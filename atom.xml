<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ICAN BLOG</title>
  <icon>https://www.gravatar.com/avatar/3b55730ce8227c56748646d6b16e5144</icon>
  <subtitle>思考、总结、分享</subtitle>
  <link href="https://lybinweb.github.io/atom.xml" rel="self"/>
  
  <link href="https://lybinweb.github.io/"/>
  <updated>2023-04-23T04:00:00.000Z</updated>
  <id>https://lybinweb.github.io/</id>
  
  <author>
    <name>ICAN</name>
    <email>1327899779@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>责任链模式</title>
    <link href="https://lybinweb.github.io/posts/357dc481/index.html"/>
    <id>https://lybinweb.github.io/posts/357dc481/index.html</id>
    <published>2023-04-23T04:00:00.000Z</published>
    <updated>2023-04-23T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="责任链模式"><a class="markdownIt-Anchor" href="#责任链模式"></a> 责任链模式</h1><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><ul><li>需求：<ul><li>充值500（orderType = 1），100%（isPay充值成功）得100的优惠劵</li><li>充值200（orderType = 2），100%（isPay充值成功）得20的优惠劵</li><li>不充值（orderType = 3），根据优惠券的库存（count）来决定，会有10的优惠券</li></ul></li></ul><h3 id="正常实现"><a class="markdownIt-Anchor" href="#正常实现"></a> 正常实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：该函数非常混乱，没有流程，没法扩展</p></blockquote><h3 id="抽象流程函数实现"><a class="markdownIt-Anchor" href="#抽象流程函数实现"></a> 抽象流程函数实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">order200</span>(orderType, isPay, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">orderNormal</span>(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">order500</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 恭喜中奖100优惠券</span></span><br><span class="line"><span class="title function_">order500</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>); <span class="comment">// 恭喜中奖10优惠券</span></span><br><span class="line"><span class="title function_">order500</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// 很遗憾没有优惠券</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：抽象流程函数，易读，易扩展；但是他要修改源代码扩展，还是不好</p></blockquote><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Chain 类: 抽象一条线(链条)</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chain</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> (fn) &#123;</span><br><span class="line"><span class="comment">// 通过每一个函数来把他包装成一条线，这个线会有当前的节点，会有指向的下一个节点（链条）</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定下一个Chain</span></span><br><span class="line">setNext (nextChain) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next</span> = nextChain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让整个函数流程执行</span></span><br><span class="line">passRequest () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>); <span class="comment">// 指向实例化对象 Chain &#123; fn: ƒ (orderType, isPay, count), next: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="variable language_">this</span>.<span class="property">fn</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// apply这里的传的this可以为null，但是为了以后可能会用到所以就传递了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">next</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">passRequest</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">next</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> <span class="title class_">Chain</span>(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> <span class="title class_">Chain</span>(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> <span class="title class_">Chain</span>(orderNormal);</span><br><span class="line"></span><br><span class="line">chainOrder500.<span class="title function_">setNext</span>(chainOrder200);</span><br><span class="line">chainOrder200.<span class="title function_">setNext</span>(chainOrderNormal);</span><br><span class="line"></span><br><span class="line">chainOrder500.<span class="title function_">passRequest</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);</span><br><span class="line">chainOrder500.<span class="title function_">passRequest</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>);</span><br><span class="line">chainOrder500.<span class="title function_">passRequest</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="责任链概念"><a class="markdownIt-Anchor" href="#责任链概念"></a> 责任链概念</h2><ul><li>明确划分每一链条中的责任，把每一个具体处理的情况处理，处理不了就往下执行</li></ul><blockquote><p>总结：扩展时不需要改动核心源代码（Chain类），易于扩展；</p></blockquote><h2 id="aop面向切面编程"><a class="markdownIt-Anchor" href="#aop面向切面编程"></a> AOP：面向切面编程</h2><ul><li>确定函数的执行顺序</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span> () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span> () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="variable language_">this</span>; <span class="comment">// test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">_this.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="variable language_">this</span>; <span class="comment">// before 执行后返回的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">_this.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">test</span>: test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testFn = obj.<span class="property">test</span>.<span class="title function_">before</span>(test1).<span class="title function_">after</span>(test3);</span><br><span class="line">testFn.<span class="title function_">call</span>(obj, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br></pre></td></tr></table></figure><h2 id="通过aop优化责任链"><a class="markdownIt-Anchor" href="#通过aop优化责任链"></a> 通过AOP优化责任链</h2><blockquote><p>责任链优化</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 原函数执行</span></span><br><span class="line"><span class="keyword">var</span> res = _this.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 传入的函数继续调用fn （下一个函数）</span></span><br><span class="line"><span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order = order500</span><br><span class="line">.<span class="title function_">after</span>(order200)</span><br><span class="line">.<span class="title function_">after</span>(orderNormal);</span><br><span class="line"></span><br><span class="line"><span class="title function_">order</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);</span><br><span class="line"><span class="title function_">order</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>);</span><br><span class="line"><span class="title function_">order</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">责任链模式</summary>
    
    
    
    <category term="设计模式" scheme="https://lybinweb.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="设计模式" scheme="https://lybinweb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="https://lybinweb.github.io/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue-optionsAPI之computed、watch类方式实现</title>
    <link href="https://lybinweb.github.io/posts/f907b889/index.html"/>
    <id>https://lybinweb.github.io/posts/f907b889/index.html</id>
    <published>2023-04-21T06:07:20.000Z</published>
    <updated>2023-04-21T06:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-optionsapi之computed-watch类方式实现"><a class="markdownIt-Anchor" href="#vue-optionsapi之computed-watch类方式实现"></a> vue-optionsAPI之computed、watch类方式实现</h1><h2 id="watch与computed区别"><a class="markdownIt-Anchor" href="#watch与computed区别"></a> watch与computed区别</h2><ul><li>watch侦听器：<ul><li>【数据更新】：给数据绑定侦听器，当数据变更时，侦听器函数执行</li><li>【特点】：数据更新时，完成什么逻辑</li><li>【使用时机】：监听一个数据的变化，变化后干什么</li></ul></li><li>computed计算属性：<ul><li>【模板template】：抽离复用模板中复杂的逻辑运算</li><li>【特点】：当函数的依赖更新后，computed函数重新执行</li><li>【使用时机】：专注视图部分的复杂运算逻辑</li></ul></li></ul><h2 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h2><blockquote><p>用类的方式实现</p></blockquote><ol><li><p>Vue constructor中接收options参数</p><ul><li>从options解构data、computed、watch</li><li>执行init()初始化函数</li></ul></li><li><p>init()函数</p><ul><li>initData函数实现data数据响应</li><li>执行initComputed初始化函数，并执行computed实例上的update方法</li><li>执行initWatcher初始化函数，并执行watcher实例上的invoke方法</li></ul></li><li><p>initData函数</p><ul><li>reactive函数处理data响应性</li></ul></li><li><p>reactive函数</p><ul><li>处理data响应性，并且需要暴露两个接口</li><li>接口1：get的时候执行的函数，并将key跟value作为形参</li><li>接口2：set的时候执行的函数，将key跟newValue、oldValue作为形参；主要是用来触发内部computed函数跟内部watch函数</li></ul></li><li><p>initComputed函数</p><ul><li>实例化Computed类，枚举computed属性并且执行每一次实例化对象下的addComputed方法，并返回实例</li></ul></li><li><p>initWatcher函数</p><ul><li>实例化Watcher类，枚举watch属性并且执行每一项实例化对象下的invoke方法，并返回实例</li></ul></li><li><p>Computed类</p><ul><li>constructor中保存computedData数据池</li><li>addComputed函数：<ul><li>处理computedData，提取_addComputedProp方法<ul><li>key：计算属性</li><li>value：计算值</li><li>get：computed函数</li><li>dep：[ 依赖 ]，提取_collectionDep方法</li></ul></li><li>computed属性挂载到实例</li><li>访问vm.total时，实现响应性，注意set的时候要执行对应的get函数，不需要赋newValue值</li></ul></li><li>update(key, watch)函数<ul><li>dep依赖变更的时候，重新执行watch函数</li></ul></li></ul></li><li><p>Watcher类</p><ul><li>constructor中保存watchers数据池</li><li>addWatcher函数：<ul><li>处理watchers数据，提取_addWatchProp方法<ul><li>key：watch函数名</li><li>fn：watch函数</li></ul></li></ul></li><li>invoke函数：<ul><li>处理watchers数据池，对比key是否相等，则执行fn</li></ul></li></ul></li></ol><h3 id="入口函数srcmainjs"><a class="markdownIt-Anchor" href="#入口函数srcmainjs"></a> 入口函数src/main.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">total () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">total2</span>: &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">total (newValue, oldValue) &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">a (newValue, oldValue) &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">b (newValue, oldValue) &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"></span><br><span class="line">vm.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"></span><br><span class="line">vm.<span class="property">b</span> = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br></pre></td></tr></table></figure><h3 id="实现数据响应式-reactivejs"><a class="markdownIt-Anchor" href="#实现数据响应式-reactivejs"></a> 实现数据响应式 reactive.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span> (vm, __get__, __set__) &#123;</span><br><span class="line"><span class="keyword">const</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="comment">// 实现reactive方法的时候要留接口回调</span></span><br><span class="line"><span class="title function_">__get__</span>(key, _data[key]);</span><br><span class="line"><span class="keyword">return</span> _data[key];</span><br><span class="line">&#125;,</span><br><span class="line">set (newValue) &#123;</span><br><span class="line"><span class="keyword">const</span> oldValue = _data[key];</span><br><span class="line">oldValue = newValue;</span><br><span class="line"><span class="comment">// 更新computedData</span></span><br><span class="line"><span class="comment">// 调用watcher</span></span><br><span class="line"><span class="comment">// 实现reactive方法的时候要留接口回调</span></span><br><span class="line"><span class="title function_">__set__</span>(key, newValue, oldValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现computed计算属性特性"><a class="markdownIt-Anchor" href="#实现computed计算属性特性"></a> 实现computed计算属性特性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computed</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> (options) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * computedData:</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * key: total,</span></span><br><span class="line"><span class="comment"> * value: 3,</span></span><br><span class="line"><span class="comment"> * get: total fn,</span></span><br><span class="line"><span class="comment"> * dep: [a, b]</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">computedData</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addComputed (vm, computed, key) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(computed, key),</span><br><span class="line"><span class="comment">// 通过fn来计算value</span></span><br><span class="line">descriptorFn = descriptor.<span class="property">value</span>.<span class="property">get</span> </span><br><span class="line"> ? descriptor.<span class="property">value</span>.<span class="property">get</span></span><br><span class="line"> : descriptor.<span class="property">value</span>,</span><br><span class="line"><span class="comment">// descriptorFn的this指向window</span></span><br><span class="line">value = descriptorFn.<span class="title function_">call</span>(vm),</span><br><span class="line">get = descriptorFn.<span class="title function_">bind</span>(vm),</span><br><span class="line">dep = <span class="variable language_">this</span>.<span class="title function_">_collectDep</span>(descriptorFn);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_addComputedProp</span>(&#123;</span><br><span class="line">key,</span><br><span class="line">value,</span><br><span class="line">get,</span><br><span class="line">dep</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// total挂载到实例</span></span><br><span class="line"><span class="keyword">const</span> dataItem = <span class="variable language_">this</span>.<span class="property">computedData</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">key</span> === key);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> dataItem.<span class="property">value</span>;</span><br><span class="line">&#125;,</span><br><span class="line">set () &#123;</span><br><span class="line">dataItem.<span class="property">value</span> = dataItem.<span class="title function_">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update (key, watch) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">computedData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> dep = itme.<span class="property">dep</span>;</span><br><span class="line"><span class="keyword">const</span> _key = dep.<span class="title function_">find</span>(<span class="function"><span class="params">el</span> =&gt;</span> el == key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_key) &#123;</span><br><span class="line"><span class="comment">// 依赖变更的时候，重新执行getter函数</span></span><br><span class="line"><span class="keyword">const</span> oldValue = item.<span class="property">value</span>;</span><br><span class="line">item.<span class="property">value</span> = item.<span class="title function_">get</span>();</span><br><span class="line"><span class="title function_">watch</span>(item.<span class="property">key</span>, item.<span class="property">value</span>, oldValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_addComputedProp (computedProp) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">computedData</span>.<span class="title function_">push</span>(computedProp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line">_collectDep (fn) &#123;</span><br><span class="line"><span class="comment">// 匹配 this. 字符</span></span><br><span class="line"><span class="comment">// \ 转义 .</span></span><br><span class="line"><span class="comment">// . 匹配.后边的任意字符</span></span><br><span class="line"><span class="comment">// + 出现一次或多次 </span></span><br><span class="line"><span class="comment">// ? 非贪婪模式</span></span><br><span class="line"><span class="comment">// g 全局匹配</span></span><br><span class="line"><span class="keyword">const</span> matched = fn.<span class="title function_">toString</span>().<span class="title function_">match</span>(<span class="regexp">/this\.(.+?)/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> matched.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Computed</span>;</span><br></pre></td></tr></table></figure><h3 id="实现watch侦听器特性"><a class="markdownIt-Anchor" href="#实现watch侦听器特性"></a> 实现watch侦听器特性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> () &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * key,</span></span><br><span class="line"><span class="comment"> * fn: get Fn</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">watchers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addWatcher (vm, watcher, key) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_addWatchProp</span>(&#123;</span><br><span class="line">key,</span><br><span class="line"><span class="attr">fn</span>: watcher[key].<span class="title function_">bind</span>(vm)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">invoke (key, newValue, oldValue) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.<span class="property">key</span> === key) &#123;</span><br><span class="line">item.<span class="title function_">fn</span>(newValue, oldValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_addWatchProp (watchProp) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">push</span>(watchProp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Watcher</span>;</span><br></pre></td></tr></table></figure><h3 id="实现类vue"><a class="markdownIt-Anchor" href="#实现类vue"></a> 实现类Vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Computed</span> <span class="keyword">from</span> <span class="string">&#x27;./Computed&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Watcher</span> <span class="keyword">from</span> <span class="string">&#x27;./Watcher&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> (options) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; data, computed, watch &#125; = options;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span> = <span class="title function_">data</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>, computed, watch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init (vm, computed, watch) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">initData</span>(vm);</span><br><span class="line"><span class="keyword">const</span> computedIns = <span class="variable language_">this</span>.<span class="title function_">initComputed</span>(vm, computed);</span><br><span class="line"><span class="keyword">const</span> watcherIns = <span class="variable language_">this</span>.<span class="title function_">initWatcher</span>(vm, watch);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$computed</span> = computedIns.<span class="property">update</span>.<span class="title function_">bind</span>(computedIns);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$watch</span> = watcherIns.<span class="property">invoke</span>.<span class="title function_">bind</span>(watcherIns);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式数据处理</span></span><br><span class="line">initData (vm) &#123;</span><br><span class="line"><span class="comment">// 实现reactive方法的时候要留接口回调</span></span><br><span class="line"><span class="title function_">reactive</span>(vm, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function">(<span class="params">key, newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (newValue === oldValue) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.$computed(key, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$watch</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">this</span>.$watch(key, newValue, oldValue);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举computed 增加computedData</span></span><br><span class="line"><span class="comment"> * 返回实例 实例有update方法 可以更新computedData的value 同时也是在更新实例上挂载的computed属性</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">initComputed (vm, computed) &#123;</span><br><span class="line"><span class="keyword">const</span> computedIns = <span class="keyword">new</span> <span class="title class_">Computed</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line"><span class="title function_">computedIns</span>(vm, computed, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> computedIns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举watch 增加侦听器</span></span><br><span class="line"><span class="comment"> * 返回实例 实例有调用watch的方法 执行侦听器</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">initWatcher (vm, watch) &#123;</span><br><span class="line"><span class="keyword">const</span> watcherIns = <span class="keyword">new</span> <span class="title class_">Watcher</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> watch) &#123;</span><br><span class="line">watcherIns.<span class="title function_">addWatcher</span>(vm, watch, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> watcherIns;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * data -&gt; fn -&gt; vm.$data -&gt; reactive -&gt; vm.xxx</span></span><br><span class="line"><span class="comment"> * get vm[key] -&gt; vm.$data[key]</span></span><br><span class="line"><span class="comment"> * set vm[key] -&gt; vm.$data[key] = newValue</span></span><br><span class="line"><span class="comment"> * updateComputedProp -&gt; value</span></span><br><span class="line"><span class="comment"> * updateWatchProp -&gt; callback</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * computed -&gt; props -&gt; &#123;</span></span><br><span class="line"><span class="comment"> * value: get value</span></span><br><span class="line"><span class="comment"> * get: method</span></span><br><span class="line"><span class="comment"> * dep: []</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * watch -&gt; props -&gt; fn -&gt; data set -&gt; call fn</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">computed实现、watch实现、optionsAPI-computed/watch实现</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
    <category term="Vue" scheme="https://lybinweb.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-optionsAPI之computed实现</title>
    <link href="https://lybinweb.github.io/posts/e99c9c30/index.html"/>
    <id>https://lybinweb.github.io/posts/e99c9c30/index.html</id>
    <published>2023-04-17T09:00:20.000Z</published>
    <updated>2023-04-17T09:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue计算属性computed实现"><a class="markdownIt-Anchor" href="#vue计算属性computed实现"></a> vue计算属性computed实现</h1><h2 id="表现"><a class="markdownIt-Anchor" href="#表现"></a> 表现</h2><ol><li>计算属性：解决模板中复杂的逻辑运算及复用的问题</li><li>计算属性只在内部逻辑依赖的数据发生变化的时候才会被再次调用</li><li>计算属性会缓存其依赖的上一次计算出的数据结果</li><li>多次复用一个相同值的数据，计算属性只调用一次</li><li>计算属性直接挂载在实例上</li></ol><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><h3 id="重点"><a class="markdownIt-Anchor" href="#重点"></a> 重点</h3><ol><li><p>数据得缓存：computed方法不会进入到data中去，所以需要有个容器来保存</p><ul><li>computedData<ul><li>value：计算结果</li><li>get：get函数</li><li>dep：收集computed函数依赖</li></ul></li></ul></li><li><p>get函数中的依赖发生变化后，就得重新调用计算方法</p></li></ol><h3 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h3><ol><li>对data进行响应式处理<ul><li>setter触发后，需要调用update方法更新视图</li><li>setter触发后，需要调用updateComputedData方法更新computedData每一项下的dep依赖，发现新的key匹配到dep中的依赖，就重新update视图</li></ul></li><li>将computed函数缓存到computedData中，以及get函数、dep依赖</li><li>对computedData进行响应式处理，访问或者更新实例上的computed值的时候，直接访问computedData保存好的（将computed计算属性值挂载到vm实例上）</li><li>render渲染视图</li><li>创建div并赋值innerHTML为template</li><li>编译模板<ul><li>遍历所有的节点，保存<code>&#123;&#123;&#125;&#125;</code>中的dom</li></ul></li><li>挂载div到$el</li></ol><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Vue</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配双大括号以内的所有字符</span></span><br><span class="line"><span class="keyword">var</span> reg_var = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * compuData：私有变量</span></span><br><span class="line"><span class="comment"> * computed里的方法并不会进入到data中去，所以要有个容器来存储</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * total: &#123;</span></span><br><span class="line"><span class="comment"> * value: 函数执行返回的结果</span></span><br><span class="line"><span class="comment"> * get: get 依赖变化一定要执行getter</span></span><br><span class="line"><span class="comment"> * dep: [&#x27;a&#x27;, &#x27;b&#x27;] 保存依赖【相当于data里的key】，监控a，b，只要变化就去调用get，重新赋值，total就会更改，那么视图就会更改</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> computedData = &#123;&#125;;</span><br><span class="line"><span class="comment">// 让数据属性对应节点DOM 当数据改变时更新DOM</span></span><br><span class="line"><span class="keyword">var</span> dataPool = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vue = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="title function_">data</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// template跟computed是不可以挂载到实例上的</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_init</span>(<span class="variable language_">this</span>, options.<span class="property">computed</span>, options.<span class="property">template</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">vm, computed, template</span>) &#123;</span><br><span class="line"><span class="title function_">dataReactive</span>(vm);</span><br><span class="line"><span class="title function_">computedReactive</span>(vm, computed);</span><br><span class="line"><span class="title function_">render</span>(vm, template);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (vm, template) &#123;</span><br><span class="line"><span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">_el = vm.<span class="property">$el</span>;</span><br><span class="line"></span><br><span class="line">container.<span class="property">innerHTML</span> = template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> domTree = <span class="title function_">_compileTemplate</span>(vm, container);</span><br><span class="line"></span><br><span class="line">_el.<span class="title function_">appendChild</span>(domTree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在data更新的时候,视图也要更新,computedData也会更新,计算属性也会更新</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span> (vm, key) &#123;</span><br><span class="line">dataPool[key].<span class="property">textContent</span> = vm[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译模板</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_compileTemplate</span> (vm, container) &#123;</span><br><span class="line"><span class="keyword">var</span> allNodes = container.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>),</span><br><span class="line">nodeItem = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allNodes.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">nodeItem = allNodes[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配不出双大括号就没必要处理</span></span><br><span class="line"><span class="keyword">var</span> matched = nodeItem.<span class="property">textContent</span>.<span class="title function_">match</span>(reg_var); <span class="comment">// [&#x27;&#123; a &#125;&#x27;, ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (matched) &#123;</span><br><span class="line">nodeItem.<span class="property">textContent</span> = nodeItem.<span class="property">textContent</span>.<span class="title function_">replace</span>(reg_var, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line"><span class="comment">// 收集有 &#123;&#123;&#125;&#125; 需要响应式的DOM</span></span><br><span class="line">dataPool[key.<span class="title function_">trim</span>()] = nodeItem;</span><br><span class="line"><span class="comment">// 将 &#123;&#123;&#125;&#125; 整体替换为vm上保存的对应的计算属性值</span></span><br><span class="line"><span class="keyword">return</span> vm[key.<span class="title function_">trim</span>()];</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dataReactive</span> (vm) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line"><span class="comment">// key 内部临时局部变量</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> _data[key];</span><br><span class="line">&#125;,</span><br><span class="line">set (newValue) &#123;</span><br><span class="line">_data[key] = newValue;</span><br><span class="line"><span class="title function_">update</span>(vm, key);</span><br><span class="line"><span class="title function_">_updateComputedData</span>(vm, key, <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title function_">update</span>(vm, key)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computedReactive</span> (vm, computed) &#123;</span><br><span class="line"><span class="title function_">_initComputedData</span>(vm, computed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> computedData) &#123;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> computedData[key].<span class="property">value</span>;</span><br><span class="line">&#125;,</span><br><span class="line">set (newValue) &#123;</span><br><span class="line">computedData[key].<span class="property">value</span> = newValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_initComputedData</span> (vm, computed) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line"><span class="comment">// 因为computed可能是get函数也可能是值value</span></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(computed, key);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * computed: &#123;</span></span><br><span class="line"><span class="comment"> * total () &#123;</span></span><br><span class="line"><span class="comment"> * return this.a + this.b;</span></span><br><span class="line"><span class="comment"> * &#125;,</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * total: &#123;</span></span><br><span class="line"><span class="comment"> * get () &#123;</span></span><br><span class="line"><span class="comment"> * return this.a + this.b;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span>descriptorFn = descriptor.<span class="property">value</span>.<span class="property">get</span> </span><br><span class="line">? descriptor.<span class="property">value</span>.<span class="property">get</span></span><br><span class="line">: descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * total: &#123;</span></span><br><span class="line"><span class="comment"> * value</span></span><br><span class="line"><span class="comment"> * get: get</span></span><br><span class="line"><span class="comment"> * dep: [&#x27;a&#x27;, &#x27;b&#x27;] </span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">computedData[key] = &#123;&#125;;</span><br><span class="line"><span class="comment">// descriptorFn的this指向descriptor这个对象，要更改this指向到实例vm，因为total里要使用this</span></span><br><span class="line">computedData[key].<span class="property">value</span> = descriptorFn.<span class="title function_">call</span>(vm);</span><br><span class="line">computedData[key].<span class="property">get</span> = descriptorFn.<span class="title function_">bind</span>(vm);</span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line">computedData[key].<span class="property">dep</span> = <span class="title function_">_collectDep</span>(descriptorFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_collectDep</span> (fn) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匹配this.</span></span><br><span class="line"><span class="comment"> * . 任意字符</span></span><br><span class="line"><span class="comment"> * * 出现一次或多次</span></span><br><span class="line"><span class="comment"> * ? 非贪婪模式</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">var</span> _collection = fn.<span class="title function_">toString</span>().<span class="title function_">match</span>(<span class="regexp">/this.(.*?)/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_collection.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _collection.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">_collection[i] = _collection[i].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _collection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_updateComputedData</span> (vm, key, update) &#123;</span><br><span class="line"><span class="keyword">var</span> _dep = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _key <span class="keyword">in</span> computedData) &#123;</span><br><span class="line">_dep = computedData[_key].<span class="property">dep</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _dep.<span class="property">length</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (_dep[i] === key) &#123;</span><br><span class="line">vm[_key] = computedData[_key].<span class="title function_">get</span>();</span><br><span class="line"><span class="title function_">update</span>(_key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Vue</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue-computed实现、optionsAPI-computed实现</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
    <category term="Vue" scheme="https://lybinweb.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue指令v-if、v-show实现</title>
    <link href="https://lybinweb.github.io/posts/e013d13/index.html"/>
    <id>https://lybinweb.github.io/posts/e013d13/index.html</id>
    <published>2023-04-14T03:30:20.000Z</published>
    <updated>2023-04-14T03:30:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue指令v-if-v-show实现"><a class="markdownIt-Anchor" href="#vue指令v-if-v-show实现"></a> vue指令v-if、v-show实现</h1><h2 id="表现"><a class="markdownIt-Anchor" href="#表现"></a> 表现</h2><ul><li>v-if: 用注释节点占位</li><li>v-show: 添加display: none</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ol><li><p>对data进行数据劫持</p></li><li><p><code>data () &#123;&#125;</code> 他要执行掉，结果放到$data上，最终挂载到实例vm上</p></li><li><p><code>methods () &#123;&#125;</code> 编译完后他里边的所有方法要放到实例上去的，因为他是方便你本身实例方法就可以直接访问。 this -&gt; vm -&gt; showImg2 -&gt; showImg1 -&gt; vm</p></li><li><p>分析抽象语法树，找到元素绑定的<code>v-if|v-show</code>以及<code>@click</code>事件处理函数</p></li><li><p>分别存储到<code>showPool</code>和<code>eventPool</code>中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1. 数据劫持 更新视图</span><br><span class="line"> * 2. 有一个容器showPool，装一个DOM对应一个数据信息（type: if/show），还有就是给DOM绑定prop，也就是data里的数据。（vue是进行分析字符串） </span><br><span class="line"> * 3. 有一个容器eventPool，一个DOM对应一个handler事件处理函数</span><br><span class="line"> * showPool:</span><br><span class="line"> * [</span><br><span class="line"> * [</span><br><span class="line"> * dom,</span><br><span class="line"> * &#123;</span><br><span class="line"> * type: if/show,</span><br><span class="line"> * prop: data</span><br><span class="line"> * &#125;</span><br><span class="line"> * ]</span><br><span class="line"> * ]</span><br><span class="line"> * </span><br><span class="line"> * eventPool:</span><br><span class="line"> * [</span><br><span class="line"> * [</span><br><span class="line"> * dom,</span><br><span class="line"> * handler</span><br><span class="line"> * ]</span><br><span class="line"> * ]</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p>绑定事件处理函数，用户触发事件处理函数，data数据更新，数据劫持触发setter，进行update页面更新</p></li></ol><h3 id="函数划分"><a class="markdownIt-Anchor" href="#函数划分"></a> 函数划分</h3><ol><li>initData 数据响应式<ul><li>vm实例：用来获取data</li><li>showPool：setter时触发，在showPool中找到对应dom</li></ul></li><li>initPool v-if、v-show、event放进对应的pool<ul><li>template 抽象语法树（ast树）分析模板</li><li>methods 找到事件处理函数</li><li>showPool</li><li>eventPool</li></ul></li><li>bindEvent 事件绑定<ul><li>vm实例：需要把方法放到实例vm中</li><li>eventPool：遍历eventPool挂载方法到实例上</li></ul></li><li>render 页面渲染<ul><li>vm实例：查找模板绑定的属性、找到根容器el将模板append进去</li><li>showPool：遍历pool根据绑定的属性值true、false初始化页面显示状态</li><li>container：append进根容器的dom</li></ul></li><li>update 页面更新<ul><li>vm实例：获取属性值</li><li>key：setter值的变化</li><li>showPool：找到对应的key的DOM更新</li></ul></li></ol><p><a href="https://imgse.com/i/ppzEFBt"><img src="https://s1.ax1x.com/2023/04/14/ppzEFBt.png" alt="ppzEFBt.png" /></a></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;../modules/Vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">isShowImg1</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">isShowImg2</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">beforeCreate () &#123;&#125;,</span><br><span class="line">created () &#123;&#125;,</span><br><span class="line">beforeMount () &#123;&#125;,</span><br><span class="line">mounted () &#123;&#125;,</span><br><span class="line"><span class="attr">template</span>: <span class="string">``</span>,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">showImg1 () &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isShowImg1</span> = !<span class="variable language_">this</span>.<span class="property">isShowImg1</span>;</span><br><span class="line">&#125;,</span><br><span class="line">showImg2 () &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isShowImg2</span> = !<span class="variable language_">this</span>.<span class="property">isShowImg2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Vue</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> recycles = &#123;</span><br><span class="line"><span class="attr">beforeCreate</span>: options.<span class="property">beforeCreate</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line"><span class="attr">created</span>: options.<span class="property">created</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line"><span class="attr">beforeMount</span>: options.<span class="property">beforeMount</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line"><span class="attr">mounted</span>: options.<span class="property">mounted</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">beforeCreate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取el挂载到实例上 </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="title function_">data</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 数据劫持 更新视图</span></span><br><span class="line"><span class="comment"> * 2. 有一个容器showPool，装一个DOM对应一个数据信息（type: if/show），还有就是给DOM绑定prop，也就是data里的数据。（vue是进行分析字符串） </span></span><br><span class="line"><span class="comment"> * 3. 有一个容器eventPool，一个DOM对应一个handler事件处理函数</span></span><br><span class="line"><span class="comment"> * showPool:</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * dom,</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * type: if/show,</span></span><br><span class="line"><span class="comment"> * prop: data</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * eventPool:</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * dom,</span></span><br><span class="line"><span class="comment"> * handler</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_init</span>(<span class="variable language_">this</span>, options.<span class="property">template</span>, options.<span class="property">methods</span>, recycles);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">vm, template, methods, recycles</span>) &#123;</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">created</span>(); <span class="comment">// 实例以及创建完</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 不可以用文档碎片，因为他不可以调用innerHTML</span></span><br><span class="line">container.<span class="property">innerHTML</span> = template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showPool = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">var</span> eventPool = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">initData</span>(vm, showPool);</span><br><span class="line"><span class="title function_">initPool</span>(container, methods, showPool, eventPool);</span><br><span class="line"><span class="title function_">bindEvent</span>(vm, eventPool);</span><br><span class="line"><span class="title function_">render</span>(vm, showPool, container, recycles);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span> (vm, showPool) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line"><span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> _data[key];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line"><span class="comment">// this.isShowImg = true;</span></span><br><span class="line">_data[key] = newValue;</span><br><span class="line"><span class="title function_">update</span>(vm, key, showPool);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initPool</span> (container, methods, showPool, eventPool) &#123;</span><br><span class="line"><span class="keyword">var</span> _allNodes = container.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> dom = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _allNodes.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">dom = _allNodes[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vIfData = dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-if&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> vShowData = dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-show&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> vEvent = dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;@click&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vIfData) &#123;</span><br><span class="line">showPool.<span class="title function_">set</span>(</span><br><span class="line">dom,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;if&#x27;</span>,</span><br><span class="line"><span class="attr">prop</span>: vIfData</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;v-if&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (vShowData) &#123;</span><br><span class="line">showPool.<span class="title function_">set</span>(</span><br><span class="line">dom,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;show&#x27;</span>,</span><br><span class="line"><span class="attr">prop</span>: vShowData</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;v-show&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vEvent) &#123;</span><br><span class="line">eventPool.<span class="title function_">set</span>(</span><br><span class="line">dom,</span><br><span class="line">methods[vEvent]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;@click&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span> (vm, eventPool) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [ dom, handler ] <span class="keyword">of</span> eventPool) &#123;</span><br><span class="line">vm[handler.<span class="property">name</span>] = handler; <span class="comment">// 实例直接可以访问方法</span></span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, vm[handler.<span class="property">name</span>].<span class="title function_">bind</span>(vm), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (vm, showPool, container, recycles) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"><span class="keyword">var</span> _el = vm.<span class="property">$el</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [ dom, info ] <span class="keyword">of</span> showPool) &#123;</span><br><span class="line">swith (info.<span class="property">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;if&quot;</span>:</span><br><span class="line">info.<span class="property">comment</span> = <span class="variable language_">document</span>.<span class="title function_">createComment</span>([<span class="string">&#x27;v-if&#x27;</span>]);</span><br><span class="line">!_data[info.<span class="property">prop</span>] &amp;&amp; dom.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(info.<span class="property">comment</span>, dom);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">!_data[info.<span class="property">prop</span>] &amp;&amp; (dom.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">beforeMount</span>(); <span class="comment">// 挂载之前</span></span><br><span class="line"></span><br><span class="line">_el.<span class="title function_">appendChild</span>(container);</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">mounted</span>(); <span class="comment">// 挂载成功后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是在initData里的set做的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span> (vm, key, showPool) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [ dom, info ] <span class="keyword">of</span> showPool) &#123;</span><br><span class="line"><span class="keyword">if</span> (info.<span class="property">prop</span> === key) &#123;</span><br><span class="line">swith (info.<span class="property">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;if&quot;</span>:</span><br><span class="line">!_data[key] ? dom.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(info.<span class="property">comment</span>, dom)</span><br><span class="line">: info.<span class="property">comment</span>.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(dom, info.<span class="property">comment</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">!_data[key] ? (dom.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">: (dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;style&#x27;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Vue</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue指令v-if、v-show实现</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
    <category term="Vue" scheme="https://lybinweb.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>重写new、instanceof</title>
    <link href="https://lybinweb.github.io/posts/4bf872c5/index.html"/>
    <id>https://lybinweb.github.io/posts/4bf872c5/index.html</id>
    <published>2022-10-20T06:52:00.000Z</published>
    <updated>2022-10-20T06:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重写new"><a class="markdownIt-Anchor" href="#重写new"></a> 重写new</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 实例化构造函数</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. this -&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">    2. this.a this.b</span></span><br><span class="line"><span class="comment">    3. &#123; a: a, b: b, __proto__: C.prototype&#123; constructor: C &#125; &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">// 3. 接收构造函数中的返回值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="title function_">myNew</span>(<span class="title class_">Test</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 返回arguments里的第一个参数 并且从arguments中删除第一个参数</span></span><br><span class="line"><span class="keyword">var</span> constructor = [].<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="keyword">var</span> _this = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">_this.<span class="property">__proto__</span> = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="keyword">var</span> res = constructor.<span class="title function_">apply</span>(_this, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">typeOf</span>(res) === <span class="string">&#x27;object&#x27;</span> ? res : _this;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写instanceof"><a class="markdownIt-Anchor" href="#重写instanceof"></a> 重写instanceof</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前提</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line">arr.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line">arr.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instanceOf</span>(<span class="params">target, type</span>) &#123;</span><br><span class="line">type = type.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">target = target.<span class="property">__proto__</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(target === <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(target === type) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target = target.<span class="property">__proto__</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">重写new、instanceof</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>重写call、apply、bind</title>
    <link href="https://lybinweb.github.io/posts/f5c15572/index.html"/>
    <id>https://lybinweb.github.io/posts/f5c15572/index.html</id>
    <published>2022-10-19T02:00:00.000Z</published>
    <updated>2022-10-19T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重写call"><a class="markdownIt-Anchor" href="#重写call"></a> 重写call</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line"><span class="comment">// 1. ctx上下文必须是一个对象 否则没有意义</span></span><br><span class="line">ctx = ctx ? <span class="title class_">Object</span>(ctx) : <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将this指向改为ctx上下文 谁调用指向谁</span></span><br><span class="line"><span class="comment">// originFn跟test都指向了同一个内存地址</span></span><br><span class="line">ctx.<span class="property">originFn</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> args = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 拿到test的第二个参数以后的所有参数 作为test的实参</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i ++) &#123;</span><br><span class="line"><span class="comment">// 4. 利用ctx.originFn的执行（并且把获取到的实参放入），将this改变</span></span><br><span class="line"><span class="comment">// 将实参以字符串形式存起来，以便于函数的执行</span></span><br><span class="line">args.<span class="title function_">push</span>(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>); <span class="comment">// args: [&#x27;arguments[1]&#x27;, &#x27;arguments[2]&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 执行字符串函数（字符串跟数组拼接，数组会自动toString为字符串）</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;ctx.originFn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="comment">// 6. 将ctx上下文中的临时变量删除</span></span><br><span class="line"><span class="keyword">delete</span> ctx.<span class="property">originFn</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">myCall</span>(&#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="重写apply"><a class="markdownIt-Anchor" href="#重写apply"></a> 重写apply</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">ctx, args</span>) &#123;</span><br><span class="line">ctx = ctx ? <span class="title class_">Object</span>(ctx) : <span class="variable language_">window</span>;</span><br><span class="line">ctx.<span class="property">originFn</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果第二个参数为原始值会抛出异常</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">typeof</span>(args) !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="title function_">typeof</span>(args) !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;CreateListFromArrayLike called on non-object&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果第二个参数没有传或者不是数组，那么就直接执行</span></span><br><span class="line"><span class="keyword">if</span>(!args || <span class="title function_">typeOf</span>(args) !== <span class="string">&#x27;array&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ctx.<span class="title function_">originFn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将第二个参数平铺到originFn中利用eval执行</span></span><br><span class="line"><span class="keyword">var</span> ret = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.originFn(&#x27;</span>+ args +<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="keyword">delete</span> ctx.<span class="property">originFn</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">typeOf</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(value === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">typeof</span>(value) === <span class="string">&#x27;object&#x27;</span> ? &#123;</span><br><span class="line"><span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;object-number&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;object-string&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;object-boolean&#x27;</span>,</span><br><span class="line">&#125;[(&#123;&#125;).<span class="property">toString</span>.<span class="title function_">call</span>(value)] : <span class="title function_">typeof</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写bind"><a class="markdownIt-Anchor" href="#重写bind"></a> 重写bind</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. test.bind() 相当于 test执行</span></span><br><span class="line"><span class="comment"> * 2. bind的第一个参数是test的this指向</span></span><br><span class="line"><span class="comment"> * 3. bind可以分离test参数 因为bind执行返回一个新的函数 </span></span><br><span class="line"><span class="comment"> * 可以在bind传一部分参数跟在返回的新函数中传另外一部分参数</span></span><br><span class="line"><span class="comment"> * 4. bind跟call参数传递是一样的</span></span><br><span class="line"><span class="comment"> * 5. 实例化返回的函数this指向test构造出来的实例</span></span><br><span class="line"><span class="comment"> * 6. 实例应该继承构造函数的原型属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> originFn = <span class="variable language_">this</span>,</span><br><span class="line">args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>), <span class="comment">// 截取第二个参数以后的参数</span></span><br><span class="line">_tempFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;; <span class="comment">// 临时缓存池</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个新的函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> newArgs = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); <span class="comment">// 保存新函数的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> originFn.<span class="title function_">apply</span>(</span><br><span class="line"><span class="variable language_">this</span> <span class="keyword">instanceof</span> fn ? <span class="variable language_">this</span> : ctx, <span class="comment">// 如果实例化了新函数那么this指向该新实例 否则 指向ctx上下文</span></span><br><span class="line">args.<span class="title function_">concat</span>(newArgs)); <span class="comment">// 拼接两个参数列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将test的prototype交给中介</span></span><br><span class="line">_tempFn.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 将中介的实例化对象交给fn的原型属性</span></span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">_tempFn</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">重写call、apply、bind</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>defineProperty版计算器</title>
    <link href="https://lybinweb.github.io/posts/ae3d3acf/index.html"/>
    <id>https://lybinweb.github.io/posts/ae3d3acf/index.html</id>
    <published>2022-09-20T09:06:00.000Z</published>
    <updated>2023-04-24T04:31:29.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据劫持版计算器"><a class="markdownIt-Anchor" href="#数据劫持版计算器"></a> 数据劫持版计算器</h2><p><img src="https://www.giaott.com/images/2022/09/20/jVE9t.gif" alt="jVE9t.gif" /></p><h3 id="html结构"><a class="markdownIt-Anchor" href="#html结构"></a> HTML结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;J_calculator&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;f-input&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s-input&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;plus&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;minus&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;mul&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;div&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css样式"><a class="markdownIt-Anchor" href="#css样式"></a> CSS样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line"><span class="title function_">plus</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">minus</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mul</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">div</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Compute</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">doc</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oCal = doc.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;J_calculator&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fInput</span> = oCal.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">sInput</span> = oCal.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">oBtnGroup</span> = oCal.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;btn-group&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">oBtnItems</span> = <span class="variable language_">this</span>.<span class="property">oBtnGroup</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">oResult</span> = oCal.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;result&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 所用到的数据</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">data</span> = <span class="variable language_">this</span>.<span class="title function_">defineData</span>();</span><br><span class="line">   <span class="comment">// 用来标识当前的运算符下标</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">btnIdx</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// console.log(this.data);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineData</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _obj = &#123;&#125;,</span><br><span class="line">fNumber = <span class="number">0</span>,</span><br><span class="line">sNumber = <span class="number">0</span>,</span><br><span class="line">field = <span class="string">&#x27;plus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _self = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(_obj, &#123;</span><br><span class="line"><span class="attr">fNumber</span>: &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;fNumber&quot; is being got.&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> fNumber;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">fNumber = newVal;</span><br><span class="line">_self.<span class="title function_">computeResult</span>(fNumber, sNumber, field);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The value &quot;fNumber&quot; has been changed.[<span class="subst">$&#123;newVal&#125;</span>]`</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">sNumber</span>: &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;sNumber&quot; is being got.&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> sNumber;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">sNumber = newVal;</span><br><span class="line">_self.<span class="title function_">computeResult</span>(fNumber, sNumber, field);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The value &quot;sNumber&quot; has been changed.[<span class="subst">$&#123;newVal&#125;</span>]`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">field</span>: &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;field&quot; is being got.&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> field;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">field = newVal;</span><br><span class="line">_self.<span class="title function_">computeResult</span>(fNumber, sNumber, field);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The value &quot;field&quot; has been changed.[<span class="subst">$&#123;newVal&#125;</span>]`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">computeResult</span>(<span class="params">fNumber, sNumber, field</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">oResult</span>.<span class="property">innerText</span> = <span class="variable language_">this</span>[field](fNumber, sNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bindEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 事件代理 给button的父级绑定点击事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">oBtnGroup</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onFieldBtnClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 给input绑定事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onNumberInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onNumberInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onFieldBtnClick</span>(<span class="params">ev</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> e = ev || <span class="variable language_">window</span>.<span class="property">event</span>,</span><br><span class="line">tar = e.<span class="property">target</span> || e.<span class="property">srcElement</span>,</span><br><span class="line">tarName = tar.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">tarName === <span class="string">&#x27;button&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">fieldUpdate</span>(tar);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onNumberInput</span>(<span class="params">ev</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> e = ev || <span class="variable language_">window</span>.<span class="property">event</span>,</span><br><span class="line">tar = e.<span class="property">target</span> || e.<span class="property">srcElement</span>,</span><br><span class="line">className = tar.<span class="property">className</span>,</span><br><span class="line">val = <span class="title class_">Number</span>(tar.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>)) || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(className) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;f-input&#x27;</span>:</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">fNumber</span> = val;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s-input&#x27;</span>:</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sNumber</span> = val;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fieldUpdate</span>(<span class="params">tar</span>) &#123;</span><br><span class="line"><span class="comment">// 清空点击之前的btn类名</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">oBtnItems</span>[<span class="variable language_">this</span>.<span class="property">btnIdx</span>].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 改变当前的btn下标 使用indexOf方法判断当前点击的元素tar是否在btn集合中，并返回索引</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">btnIdx</span> = [].<span class="property">indexOf</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">oBtnItems</span>, tar);</span><br><span class="line"><span class="comment">// 给点击的btn增加聚焦类名 </span></span><br><span class="line">tar.<span class="property">className</span> += <span class="string">&#x27; current&#x27;</span>;</span><br><span class="line"><span class="comment">// 设置数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">field</span> = tar.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-field&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Calculator</span>(<span class="variable language_">document</span>).<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">defineProperty版计算器</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Object方法" scheme="https://lybinweb.github.io/tags/Object%E6%96%B9%E6%B3%95/"/>
    
    <category term="Object.defineProperty" scheme="https://lybinweb.github.io/tags/Object-defineProperty/"/>
    
    <category term="数据劫持" scheme="https://lybinweb.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>重写typeof</title>
    <link href="https://lybinweb.github.io/posts/7b8bf196/index.html"/>
    <id>https://lybinweb.github.io/posts/7b8bf196/index.html</id>
    <published>2022-09-19T02:00:00.000Z</published>
    <updated>2022-09-19T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="typeof方法"><a class="markdownIt-Anchor" href="#typeof方法"></a> typeof方法</h2><ul><li><p>MDN解释：返回一个字符串，表示未经计算的操作数的类型</p></li><li><p>语法：</p><ul><li>typeof operand</li><li>typeof(operand)</li></ul></li><li><p>参数：一个表示对象或原始值的表达式，并将其数据类型返回</p></li><li><p>返回值：返回一个数据类型的字符串</p></li><li><p>typeof有可能返回的值：</p><ol><li>‘string’</li><li>‘function’</li></ol><ul><li>typeof Object</li></ul><ol start="3"><li>‘number’</li><li>‘string’</li><li>‘undefined’</li><li>‘object’</li></ol><ul><li>typeof {}</li><li>typeof []</li><li>typeof null</li><li>typeof new String</li><li>typeof new Boolean</li><li>typeof new Number</li></ul></li></ul><h2 id="重写typeof"><a class="markdownIt-Anchor" href="#重写typeof"></a> 重写typeof</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">typeOf</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(value === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">typeof</span>(value) === <span class="string">&#x27;object&#x27;</span> ? &#123;</span><br><span class="line"><span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;Array&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;o-Number&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;o-String&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;o-Boolean&#x27;</span></span><br><span class="line">  &#125;[(&#123;&#125;).<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value)]</span><br><span class="line">                           : <span class="title function_">typeof</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">重写typeof</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>promisify函数封装</title>
    <link href="https://lybinweb.github.io/posts/8e06be2b/index.html"/>
    <id>https://lybinweb.github.io/posts/8e06be2b/index.html</id>
    <published>2022-09-08T06:00:00.000Z</published>
    <updated>2023-04-24T04:31:29.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="promisify函数的封装"><a class="markdownIt-Anchor" href="#promisify函数的封装"></a> promisify函数的封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promisify</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>(...args, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在node中已经封装到了util中</p></blockquote><ul><li>使用：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> readFile = <span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">readFile</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">readFile</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><h2 id="promisifyall的封装"><a class="markdownIt-Anchor" href="#promisifyall的封装"></a> promisifyAll的封装</h2><blockquote><p>比如说把node中fs模块下的所有函数都通过promisify化</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promisifyAll</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> [key, fn] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      obj[key + <span class="string">&#x27;Async&#x27;</span>] = <span class="title function_">promisify</span>(fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用该方法</span></span><br><span class="line"><span class="title function_">promisifyAll</span>(fs);</span><br><span class="line">fs.<span class="title function_">readFileAsync</span>(<span class="string">&#x27;./name.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> fs.<span class="title function_">readFileSync</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> fs.<span class="title function_">readFileSync</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">promisify函数</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Promise" scheme="https://lybinweb.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>数组方法（最全）</title>
    <link href="https://lybinweb.github.io/posts/357dc481/index.html"/>
    <id>https://lybinweb.github.io/posts/357dc481/index.html</id>
    <published>2022-08-30T04:00:00.000Z</published>
    <updated>2022-08-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-javascript数组array原型prototype上的方法"><a class="markdownIt-Anchor" href="#一-javascript数组array原型prototype上的方法"></a> 一、Javascript数组Array原型prototype上的方法</h2><h3 id="1-push"><a class="markdownIt-Anchor" href="#1-push"></a> 1、push</h3><ul><li><p>MDN解释：方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度</p></li><li><p>参数：elementN</p></li><li><p>返回值：返回新数组长度</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="2-unshift"><a class="markdownIt-Anchor" href="#2-unshift"></a> 2、unshift</h3><ul><li><p>MDN解释：方法将一个或多个元素添加到数组的开头，并返回该数组的新长度</p></li><li><p>参数：elementN</p></li><li><p>返回值：返回新数组长度</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="3-pop"><a class="markdownIt-Anchor" href="#3-pop"></a> 3、pop</h3><ul><li><p>MDN解释：方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度</p></li><li><p>返回值：返回删除的元素</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="4-join"><a class="markdownIt-Anchor" href="#4-join"></a> 4、join</h3><ul><li><p>作用：将数组或者类数组以给定的分隔符拼接成字符串</p></li><li><p>MDN解释：将数组或者类数组对象的所有元素连接成一个字符串并返回这个字符串，不会改变原数组</p></li><li><p>参数：分隔符，必要的时候可以为字符串</p></li><li><p>返回值：返回分割后的字符，如果目标对象长度为0，则返回空字符串</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="5-reverse"><a class="markdownIt-Anchor" href="#5-reverse"></a> 5、reverse</h3><ul><li><p>作用：反转数组，会改变原数组</p></li><li><p>返回值：返回反转后的数组</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="6-shift"><a class="markdownIt-Anchor" href="#6-shift"></a> 6、shift</h3><ul><li><p>MDN解释：从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度</p></li><li><p>返回值：返回删除的元素</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="7-sort"><a class="markdownIt-Anchor" href="#7-sort"></a> 7、sort</h3><ul><li><p>作用：数组排序，sort方法接收一个可选的比较函数，返回负数、零、正数，用来表示两个元素的比较结果。如果结果为负数，第一个元素在第二个元素前面，如果为零则不变，如果为正数，则第一个元素在第二个元素后面</p></li><li><p>MDN解释：使用原地算法进行排序，并返回排序后的数组，会改变原数组</p></li><li><p>参数：</p><ol><li>compareFunction 可选</li></ol><ul><li>firstEl 第一个用于比较的元素</li><li>secondEl 第二个用于比较的元素</li></ul></li><li><p>返回值：返回排序后的数组</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="8-split-array没有该方法"><a class="markdownIt-Anchor" href="#8-split-array没有该方法"></a> 8、split (Array没有该方法)</h3><ul><li><p>String.prototype.split</p><ul><li><p>作用：将字符串以特定的分隔符分割为数组</p></li><li><p>MDN解释：使用指定的分隔符字符串将一个String对象分割为子字符串数组，以一个指定的分隔符字符串来决定每个拆分的位置</p></li><li><p>参数：</p><ol><li>separator 分隔符</li><li>limit 限定返回的分隔片段数量</li></ol></li><li><p>返回值：返回一个新数组</p></li><li><p>结果：<strong>不会</strong>改变原字符串</p></li></ul></li></ul><h3 id="9-splice"><a class="markdownIt-Anchor" href="#9-splice"></a> 9、splice</h3><ul><li><p>作用：增删改数组</p></li><li><p>MDN解释：通过删除或替换现有元素或者原地新增元素来修改数组，会改变原数组</p></li><li><p>参数：</p><ol><li>startIndex 开始索引</li><li>deleteCount 要删除的个数</li><li>item1，item2… 要增加的元素</li></ol></li><li><p>返回值：以数组的形式返回修改后的内容</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li><li><p>注意：<code>Array.prototype.splice.length = 2</code></p></li></ul><h3 id="10-slice"><a class="markdownIt-Anchor" href="#10-slice"></a> 10、slice</h3><ul><li><p>作用：截取数组某一部分，返回新的数组，不会改变原数组</p></li><li><p>MDN解释：该方法返回一个新的数组对象，该对象是由参数begin（包括）跟end（不包括）构成的数组的浅拷贝，不会改变原数组</p></li><li><p>参数：[begin, end)</p><ol><li>begin 开始索引（包括）</li><li>end 结束索引（不包括）</li></ol></li><li><p>返回值：返回截取的新数组</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="11-fill"><a class="markdownIt-Anchor" href="#11-fill"></a> 11、fill</h3><ul><li><p>作用：填充数组</p></li><li><p>MDN解释：用一个固定值填充数组的开始索引到结束索引的全部元素（不包括结束索引），返回填充后的数组，会改变原数组</p></li><li><p>返回值：返回填充后的数组</p></li><li><p>参数：value, [start, end)</p><ol><li>value 填充值</li><li>start 开始索引</li><li>end 结束索引</li></ol></li></ul><h3 id="12-copywithin"><a class="markdownIt-Anchor" href="#12-copywithin"></a> 12、copyWithin</h3><ul><li><p>作用：拷贝数组start到end的元素到target索引处，不会改变数组长度，会改变原数组</p></li><li><p>MDN解释：浅复制数组的一部分到同一数组中的另一个位置，并返回他，不会改变数组长度</p></li><li><p>返回值：改变后的数组</p></li><li><p>参数：</p><ol><li>target 粘贴到的位置</li><li>start 开始复制的起始索引（包括）</li><li>end 结束复制的索引（不包括）</li></ol></li></ul><h3 id="13-concat"><a class="markdownIt-Anchor" href="#13-concat"></a> 13、concat</h3><ul><li><p>作用：合并多个数组，并返回合并后的数组，不会改变原数组</p></li><li><p>参数：valueN 数组或值</p></li><li><p>返回值：返回新数组</p></li></ul><h3 id="14-tostring"><a class="markdownIt-Anchor" href="#14-tostring"></a> 14、toString</h3><ul><li><p>MDN解释：返回一个字符串，表示指定的数组及其元素，不会改变原数组</p></li><li><p>返回值：返回一个字符串，表示数组所有元素的字符串</p></li></ul><h3 id="15-valueof-继承自object"><a class="markdownIt-Anchor" href="#15-valueof-继承自object"></a> 15、valueOf (继承自Object)</h3><blockquote><p>数组Array上没有valueOf方法，他是继承自Object上的</p></blockquote><ul><li><p>MDN解释：返回指定对象的原始值</p></li><li><p>返回值：返回指定对象的原始值</p></li></ul><h3 id="16-includes"><a class="markdownIt-Anchor" href="#16-includes"></a> 16、includes</h3><ul><li><p>作用：判断一个值是否在给定数组中</p></li><li><p>MDN解释：用来判断一个数组中是否包含指定的值，如果包含则返回true，否则返回false</p></li><li><p>参数：</p><ol><li>valueToFind 要查找的值</li><li>fromIndex 开始查找的索引位置</li></ol></li><li><p>返回值：boolean值</p></li></ul><blockquote><p>从技术上来讲，该方法使用<code>零值相等</code>算法来确定是否找到给定的元素</p></blockquote><h3 id="17-find"><a class="markdownIt-Anchor" href="#17-find"></a> 17、find</h3><ul><li><p>作用：用来查找数组总满足条件的第一个值</p></li><li><p>MDN解释：返回数组中满足提供的测试函数中的第一个元素的值，没有则返回undefined</p></li><li><p>参数：</p><ol><li>callback 在数组每一项上执行的函数</li></ol><ul><li>item</li><li>index</li><li>array</li></ul><ol start="2"><li>thisArg 执行回调时的this指向</li></ol></li><li><p>返回值：返回找到的元素</p></li></ul><h3 id="18-findindex"><a class="markdownIt-Anchor" href="#18-findindex"></a> 18、findIndex</h3><ul><li><p>作用：用来查找数组中满足条件的第一个值的索引</p></li><li><p>MDN解释：返回数组中满足提供的测试函数中的第一个元素的值的索引，没有则返回-1</p></li><li><p>参数：同find方法</p></li><li><p>返回值：满足条件值的索引</p></li></ul><h3 id="19-indexof"><a class="markdownIt-Anchor" href="#19-indexof"></a> 19、indexOf</h3><ul><li><p>作用：找到数组中给定元素的第一个值的索引，没有则返回-1</p></li><li><p>MDN解释：返回在数组中找到一个给定元素的第一个索引，没有则返回-1</p></li><li><p>参数：</p><ol><li>searchElement 要查找的值</li><li>fromIndex 开始查找的索引位置</li></ol></li><li><p>返回值：首个被找到的元素的索引</p></li></ul><h3 id="20-lastindexof"><a class="markdownIt-Anchor" href="#20-lastindexof"></a> 20、lastIndexOf</h3><ul><li><p>作用：找到数组中给定元素的最后一个值的索引，没有则返回-1</p></li><li><p>MDN解释：返回在数组中找到一个给定元素的最后一个索引，没有则返回-1</p></li><li><p>参数：</p><ol><li>searchElement 要查找的值</li><li>fromIndex 开始查找的索引位置，从该位置逆向查找</li></ol></li><li><p>返回值：最后一个被找到的元素的索引</p></li></ul><h3 id="21-foreach"><a class="markdownIt-Anchor" href="#21-foreach"></a> 21、forEach</h3><ul><li><p>MDN解释：让数组中每项元素执行一次给定的回调函数</p></li><li><p>参数：</p><ol><li>callback</li><li>thisArg</li></ol></li><li><p>返回值：undefined，不会改变原数组</p></li></ul><h3 id="22-filter"><a class="markdownIt-Anchor" href="#22-filter"></a> 22、filter</h3><ul><li><p>MDN解释：返回一个新数组，包含所有通过所有给定的测试函数通过的元素</p></li><li><p>参数：</p><ol><li>callback</li></ol><ul><li>element</li><li>index</li><li>array</li></ul><ol start="2"><li>thisArg</li></ol></li><li><p>返回值：返回一个新数组</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="23-map"><a class="markdownIt-Anchor" href="#23-map"></a> 23、map</h3><ul><li><p>MDN解释：返回一个新数组，该数组由原数组中的每一项元素都通过调用给定的函数的返回值组成</p></li><li><p>参数：</p><ol><li>callback</li></ol><ul><li>element</li><li>index</li><li>array</li></ul><ol start="2"><li>thisArg</li></ol></li><li><p>返回值：返回一个新数组</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="24-reduce"><a class="markdownIt-Anchor" href="#24-reduce"></a> 24、reduce</h3><ul><li><p>MDN解释：对数组中的每个元素按序执行由您给定的reducer函数，每一次运行的reducer都会将先前计算的结果以参数传入，最后将其结果汇总后为单个返回值</p></li><li><p>参数：</p><ol><li>callbackFn</li></ol><ul><li>previousValue 上一个值，如果initialValue没有传递，则为数组索引0 的值，否则为initialValue</li><li>currentValue 当前值，如果initialValue没有传递，则为数组索引1 的值，否则为数组索引0 的值</li><li>currentIndex 当前值的索引，如果initialValue没有传递，则为数组索引1，否则为数组索引0</li><li>array 被遍历的数组</li></ul><ol start="2"><li>initialValue 第一次调用callback时的previousValue的初始值</li></ol></li><li><p>返回值：返回一个值</p></li></ul><h3 id="25-reduceright"><a class="markdownIt-Anchor" href="#25-reduceright"></a> 25、reduceRight</h3><blockquote><p>跟reduce功能一样，不同的是reduceRight从数组的最右边开始累加，一直到最左边</p></blockquote><ul><li><p>MDN解释：该方法接收一个函数作为累加器和数组的每个值（从右到左）将其减少为单个值</p></li><li><p>对数组中的每个元素按倒序的方式执行由您给定的reducer函数，每一次运行的reducer都会将先前计算的结果以参数传入，最后将其结果汇总后为单个返回值</p></li><li><p>参数：</p><ol><li>callbackFn</li></ol><ul><li>previousValue 上一个值</li><li>currentValue 当前值</li><li>currentIndex 当前值的索引</li><li>array 被遍历的数组</li></ul><ol start="2"><li>initialValue 第一次调用callback时的previousValue的初始值</li></ol></li><li><p>返回值：返回一个值</p></li></ul><h3 id="26-every"><a class="markdownIt-Anchor" href="#26-every"></a> 26、every</h3><ul><li><p>MDN解释：该方法测试数组中的每一个元素都通过给定的函数，返回一个boolean值</p></li><li><p>参数：</p><ol><li>callback</li><li>thisArg</li></ol></li><li><p>返回值：boolean值</p></li></ul><blockquote><p>如果用一个空数组测试，则返回true</p></blockquote><h3 id="27-some"><a class="markdownIt-Anchor" href="#27-some"></a> 27、some</h3><ul><li><p>MDN解释：判断数组中至少有一个值通过了给定函数的测试，返回一个boolean值</p></li><li><p>参数：</p><ol><li>callback</li><li>thisArg</li></ol></li><li><p>返回值：boolean值</p></li></ul><blockquote><p>如果用一个空数组测试，则返回false</p></blockquote><h3 id="28-symboliterator"><a class="markdownIt-Anchor" href="#28-symboliterator"></a> 28、<a href="">Symbol.iterator</a></h3><ul><li><p>作用：任何的数组、类数组、Set、Map等数据结构都继承了Symbol.iterator接口，就代表着可以被for of迭代</p></li><li><p>MDN解释：跟Array.prototype.values() 属性的初始值的同一个函数对象</p></li><li><p>返回值：默认情况下与values()方法返回值相同（Array Iterator{}）</p></li></ul><h3 id="29-values"><a class="markdownIt-Anchor" href="#29-values"></a> 29、values</h3><ul><li><p>作用：拿到可迭代对象的每一项的的value</p></li><li><p>MDN解释：返回一个新的Array Iterator对象，该对象包含数组每个索引的值</p></li><li><p>返回值：一个新的Array迭代对象</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr.<span class="title function_">values</span>(); <span class="comment">// Array Iterator&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> letter <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(letter);</span><br><span class="line">&#125;  <span class="comment">//&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="30-keys"><a class="markdownIt-Anchor" href="#30-keys"></a> 30、keys</h3><ul><li><p>作用：拿到可迭代对象的每一项的key</p></li><li><p>MDN解释：返回包含数组中每个索引键的对象</p></li><li><p>返回值：一个新的Array迭代对象</p></li></ul><h3 id="31-entries"><a class="markdownIt-Anchor" href="#31-entries"></a> 31、entries</h3><ul><li><p>作用：拿到可迭代对象的每一项的键值对</p></li><li><p>MDN解释：返回一个新的Array Iterator{}对象，该对象包含数组中每个索引的键值</p></li><li><p>返回值：一个新的Array迭代对象</p><ol><li>该对象下有一个next方法，用来迭代数组中的每一项的键值</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="comment">         __proto__:Array Iterator</span></span><br><span class="line"><span class="comment">         next:ƒ next()</span></span><br><span class="line"><span class="comment">         Symbol(Symbol.toStringTag):&quot;Array Iterator&quot;</span></span><br><span class="line"><span class="comment">         __proto__:Object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.<span class="title function_">entries</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*&#123;value: Array(2), done: false&#125;</span></span><br><span class="line"><span class="comment">          done:false</span></span><br><span class="line"><span class="comment">          value:(2) [0, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">           __proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="32-flat"><a class="markdownIt-Anchor" href="#32-flat"></a> 32、flat</h3><p><a href="https://www.yuque.com/lybinweb/wg2hbh/obwoe4">flat详细笔记地址</a></p><ul><li><p>MDN解释：按照一个可指定的深度递归遍历数组，将所有元素跟遍历到的子元素合并为一个数组返回</p></li><li><p>参数：有一个参数</p><ul><li>depth：降维的层数，默认为1<ul><li>Infinity：数组降多维</li><li>‘1’：字符串1，降维一层</li><li>true：boolean值，降维一层</li></ul></li></ul></li><li><p>返回值：返回一个新数组</p></li></ul><h3 id="33-flatmap"><a class="markdownIt-Anchor" href="#33-flatmap"></a> 33、flatMap</h3><p><a href="https://www.yuque.com/lybinweb/wg2hbh/el4xbk#17f254c9">flatMap详细笔记地址</a></p><ul><li>MDN解释：该方法首先使用映射函数映射每一项数据，然后将其结果压缩为一个新数组</li></ul><blockquote><p>flatMap == flat + map</p></blockquote><ul><li><p>参数：</p><ol><li>callbackFn</li><li>thisArg</li></ol></li><li><p>返回值：一个新数组</p></li></ul><h2 id="二-javascript数组array的构造函数的方法"><a class="markdownIt-Anchor" href="#二-javascript数组array的构造函数的方法"></a> 二、JavaScript数组Array的构造函数的方法</h2><h3 id="34-arrayof"><a class="markdownIt-Anchor" href="#34-arrayof"></a> 34、Array.of</h3><ul><li><p>作用：创建指定元素的数组</p></li><li><p>MDN解释：创建一个<code>可变数量参数</code>的新数组实例，而不考虑参数的数量或类型</p></li><li><p>参数：</p><ol><li>elementN  任意的参数个数</li></ol></li><li><p>返回值：返回新的数组实例</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">7</span>); <span class="comment">// [7]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">7</span>); <span class="comment">// [ , , , , , , ]</span></span><br></pre></td></tr></table></figure><h3 id="35-arrayfrom"><a class="markdownIt-Anchor" href="#35-arrayfrom"></a> 35、Array.from</h3><ul><li><p>作用：将类数组转换为数组</p></li><li><p>MDN解释：对一个类似数组或可迭代对象创建一个新的、浅拷贝的实例</p></li><li><p>参数：</p><ol><li>arrayLike(*必传) 类数组</li><li>mapFn        回调函数</li><li>thisArg      this指向</li></ol></li><li><p>返回值： 一个新的数组实例</p></li><li><p>描述：</p><ol><li>Array.from通过<code>什么对象</code>来创建数组对象:</li></ol><ul><li>类数组对象（拥有一个length属性和若干索引属性的任意对象）</li><li>可迭代对象（Map、Set）</li></ul><ol start="2"><li>他的第二个参数是一个回调函数，让你在最后生成的数组上进行一次类似与map的操作</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = <span class="title class_">Array</span>.<span class="title function_">form</span>(arrLike, <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><h3 id="36-arrayisarray"><a class="markdownIt-Anchor" href="#36-arrayisarray"></a> 36、Array.isArray</h3><ul><li><p>作用：判断一个值是否是数组</p></li><li><p>MDN解释: 用于确定传入的值是否是数组</p></li><li><p>参数：</p><ol><li>obj 需要监测的值</li></ol></li><li><p>返回值：boolean值</p></li></ul>]]></content>
    
    
    <summary type="html">数组方法</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="数组方法" scheme="https://lybinweb.github.io/tags/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>防抖与节流的实现以及应用</title>
    <link href="https://lybinweb.github.io/posts/830b4898/index.html"/>
    <id>https://lybinweb.github.io/posts/830b4898/index.html</id>
    <published>2022-08-24T04:10:20.000Z</published>
    <updated>2022-08-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-防抖"><a class="markdownIt-Anchor" href="#一-防抖"></a> 一、防抖</h2><h3 id="1-防抖的实现"><a class="markdownIt-Anchor" href="#1-防抖的实现"></a> 1、防抖的实现</h3><ul><li>防抖需要明白的两点：<ol><li>对于在事件被触发n秒后再执行的回调：延迟回调</li><li>如果在这n秒内再触发事件、重新开始计时</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn：目标函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time：延迟时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> triggleNow：初次是否需要触发 </span></span><br><span class="line"><span class="comment"> * * true：首次不进行防抖处理 </span></span><br><span class="line"><span class="comment"> * * false：首次需要防抖处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, time, triggerNow</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> t = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounced = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _self = <span class="variable language_">this</span>,</span><br><span class="line">args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除定时器</span></span><br><span class="line"><span class="keyword">if</span>(t) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次也进行防抖处理</span></span><br><span class="line"><span class="keyword">if</span>(triggerNow) &#123;</span><br><span class="line"><span class="keyword">let</span> exce = !t; <span class="comment">// 第一次不进行防抖处理标识</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在防抖延迟时间time后，将定时器清空，取消防抖</span></span><br><span class="line"><span class="comment">// 在time时间内，会重新计时</span></span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125;, time);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(exce) &#123;</span><br><span class="line"><span class="comment">// 直接执行函数</span></span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123; <span class="comment">// 首次不进行防抖处理</span></span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;, time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制清除防抖函数</span></span><br><span class="line">debounced.<span class="property">remove</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-防抖的应用"><a class="markdownIt-Anchor" href="#2-防抖的应用"></a> 2、防抖的应用</h3><ul><li><p>函数初次执行不需要防抖处理：<code>triggerNow = true</code></p><ol><li>列表的下拉刷新</li><li>ajax的请求</li></ol></li><li><p>函数初次执行需要防抖处理：<code>triggerNow = false</code></p><ol><li>输入框的输入校验</li></ol></li></ul><h2 id="二-节流"><a class="markdownIt-Anchor" href="#二-节流"></a> 二、节流</h2><ul><li>节流需要注意的一点：<ol><li>每隔一段事件执行一次函数</li></ol></li></ul><h3 id="1-节流的实现"><a class="markdownIt-Anchor" href="#1-节流的实现"></a> 1、节流的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn: 要进行节流处理的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay: 延迟的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> t = <span class="literal">null</span>,</span><br><span class="line">begin = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _self = <span class="variable language_">this</span>,</span><br><span class="line">args = <span class="variable language_">arguments</span>,</span><br><span class="line">cur = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流处理</span></span><br><span class="line"><span class="keyword">if</span>(cur - begin &gt;= delay) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">begin = cur;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-节流的应用"><a class="markdownIt-Anchor" href="#2-节流的应用"></a> 2、节流的应用</h3><ol><li>输入验证</li><li>窗口页面的resize</li><li>列表的下拉刷新</li><li>ajax的请求</li></ol>]]></content>
    
    
    <summary type="html">防抖与节流的实现以及应用</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>实现forEach</title>
    <link href="https://lybinweb.github.io/posts/718b0317/index.html"/>
    <id>https://lybinweb.github.io/posts/718b0317/index.html</id>
    <published>2022-08-22T16:00:00.000Z</published>
    <updated>2022-09-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="foreach会不会改变原数组"><a class="markdownIt-Anchor" href="#foreach会不会改变原数组"></a> forEach会不会改变原数组</h2><h3 id="不改变原数组"><a class="markdownIt-Anchor" href="#不改变原数组"></a> 不改变原数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">item += <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="改变原数组"><a class="markdownIt-Anchor" href="#改变原数组"></a> 改变原数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">arr[index] += <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="重写foreach"><a class="markdownIt-Anchor" href="#重写foreach"></a> 重写forEach</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myForEach</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="variable language_">this</span>,</span><br><span class="line">len = arr.<span class="property">length</span>,</span><br><span class="line">_this = <span class="variable language_">arguments</span>[<span class="number">1</span>] || <span class="variable language_">window</span>; <span class="comment">// forEach的第二个参数this指向问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_this, [arr[i], i, arr]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">重写forEach、forEach会不会改变原数组</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>5分钟实现深拷贝</title>
    <link href="https://lybinweb.github.io/posts/ecc4b994/index.html"/>
    <id>https://lybinweb.github.io/posts/ecc4b994/index.html</id>
    <published>2022-08-15T16:00:00.000Z</published>
    <updated>2022-08-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">Origin, Target</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> tar = <span class="title class_">Target</span> || &#123;&#125;,</span><br><span class="line">toStr = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>,</span><br><span class="line">arrType = <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Origin</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Origin</span>.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证当前项是对象并且不是null，因为null的类型也是objec</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Origin</span>[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="title class_">Origin</span>[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 判断当前项是数组还是对象并且赋值为空数组或空对象</span></span><br><span class="line">tar[key] = toStr.<span class="title function_">call</span>(<span class="title class_">Origin</span>[key]) === arrType ? [] : &#123;&#125;;</span><br><span class="line"><span class="comment">// 递归深拷贝函数</span></span><br><span class="line"><span class="title function_">deepClone</span>(<span class="title class_">Origin</span>[key], tar[key]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前项不是对象而是原始值则直接赋值</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">tar[key] = <span class="title class_">Origin</span>[key];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">深拷贝</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="重写" scheme="https://lybinweb.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
    <category term="rewrite" scheme="https://lybinweb.github.io/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="https://lybinweb.github.io/posts/24caea6b/index.html"/>
    <id>https://lybinweb.github.io/posts/24caea6b/index.html</id>
    <published>2022-08-14T16:00:00.000Z</published>
    <updated>2022-08-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h2><h2 id="个人基本使用"><a class="markdownIt-Anchor" href="#个人基本使用"></a> 个人基本使用</h2><p>如果更新了 <code>manifest.json</code> 首先清除一下数据</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后去文件中修改，把 <code>manifest.json</code> 多余的 script 标签删除，</p><p>把 <code>fireworks.js</code> 的重复部分删除</p><p>然后再使用</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>然后以下用法（不过一般使用最后这俩命令即可）</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言:</h2><p>为了方便查阅,这里将常用指令汇总.</p><p>防止请求次数过多插件不再自动获取番剧数据，所以请根据自己的需要在 <code>hexo generate 或 hexo deploy</code> 之前使用<code>hexo bangumi -u</code> 命令更新番剧数据！</p><p>删除数据命令:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo bangumi -d</span><br></pre></td></tr></table></figure><h2 id="简写指令"><a class="markdownIt-Anchor" href="#简写指令"></a> 简写指令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;`       等价于        `hexo new &quot;我的第一篇文章&quot;`  还等价于       `hexo new post &quot;我的第一篇文章&quot;`</span><br><span class="line"> `hexo p` 等价于 `hexo publish`</span><br><span class="line"> `hexo g` 等价于 `hexo generate`</span><br><span class="line"> `hexo s`等价于 `hexo server`</span><br><span class="line"> `hexo d` 等价于 `hexo deploy`</span><br><span class="line"> `hexo deploy -g`  等价于 `hexo deploy --generate`</span><br><span class="line"> `hexo generate -d`等价于`hexo generate --deploy</span><br></pre></td></tr></table></figure><p><strong>注: hexo clean 没有 简写, git --version 没有简写</strong></p><h2 id="指令说明"><a class="markdownIt-Anchor" href="#指令说明"></a> 指令说明:</h2><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。<br /><code>hexo server -s</code> #以静态模式启动<br /><code>hexo server -p 5000</code> #更改访问端口 (默认端口为 4000，'ctrl + c’关闭 server)<br /><code>hexo server -i IP地址</code> #自定义 IP<br /><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹<br /><code>hexo g</code> #生成静态网页 (执行 <code>$ hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将&quot;/blog/source/&quot; <a href="http://xn--ghqq00hg2v.md">下面的.md</a> 后缀的文件编译为.html 后缀的文件,存放在&quot;/blog/public/ &quot; 路径下)<br /><code>hexo d</code> #将本地数据部署到远端服务器(如 github)<br /><code>hexo init 文件夹名称</code> #初始化 XX 文件夹名称<br /><code>npm update hexo -g</code>#升级<br /><code>npm install hexo -g</code>#安装<br /><code>node-v</code> #查看 node.js 版本号<br /><code>npm -v</code> #查看 npm 版本号<br /><code>git --version</code> #查看 git 版本号<br /><code>hexo -v</code> #查看 hexo 版本号</p><p><code>hexo publish [layout]</code> #通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout]</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><p><code>hexo new aaa &quot;bbb&quot;</code> # 新建一篇文章,文章名称和标题分别为 <a href="http://bbb.md">bbb.md</a> 和 bbb. 文章采用 aaa 布局, 此时会在站点根目录下的----&gt;source-----&gt;_post 文件夹下生成 <a href="http://bbb.md">bbb.md</a> 文件, <a href="http://bbb.md">bbb.md</a> 文件的顶部(-----分割线上方区域,也称作 Front matter 区),生成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout : aaa`</span><br><span class="line"> `title:`</span><br><span class="line"> `date:</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Hexo常用命令</summary>
    
    
    
    <category term="Hexo" scheme="https://lybinweb.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo常用命令" scheme="https://lybinweb.github.io/tags/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>随手基于MVC思想实现计算器案例</title>
    <link href="https://lybinweb.github.io/posts/5645c7b1/index.html"/>
    <id>https://lybinweb.github.io/posts/5645c7b1/index.html</id>
    <published>2022-08-14T16:00:00.000Z</published>
    <updated>2022-08-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随手基于mvc思想实现计算器案例"><a class="markdownIt-Anchor" href="#随手基于mvc思想实现计算器案例"></a> 随手基于MVC思想实现计算器案例</h2><h3 id="后端mvc"><a class="markdownIt-Anchor" href="#后端mvc"></a> 后端MVC</h3><ul><li>M：Model 数据模型 -&gt; 操作数据库（对数据进行增删改查）</li><li>V：View     视图层 显示视图与视图模板</li><li>C：Controller<ul><li>服务端渲染：</li><li>控制层、逻辑层 ：  数据和视图关联挂载和基本的逻辑操作</li><li>View需要数据 Controller对应的方法调用Model的方法获取数据返回给Controller对应的方法render到View中</li><li>前端渲染：<ul><li>API层 ：前端请求的API对应的是控制器中的方法</li><li>前端异步请求URL控制器中的一个方法Model层的方法操作数据库获取数据返回给控制器方法响应回前端</li></ul></li></ul></li></ul><h3 id="前端mvc"><a class="markdownIt-Anchor" href="#前端mvc"></a> 前端MVC</h3><ul><li>Model：管理视图所需要的数据 数据与视图的关联</li><li>View：HTML模板 + 视图渲染</li><li>Controller：管理事件逻辑</li></ul><h3 id="基于mvc思想实现计算器案例"><a class="markdownIt-Anchor" href="#基于mvc思想实现计算器案例"></a> 基于MVC思想实现计算器案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    model.<span class="title function_">init</span>(); <span class="comment">// 组织数据 数据监听操作&amp;数据代理</span></span><br><span class="line">    view.<span class="title function_">render</span>(); <span class="comment">// 组织HTML模板 渲染HTML模板</span></span><br><span class="line">    controller.<span class="title function_">init</span>(); <span class="comment">// 事件处理函数绑定</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> model = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">s</span>: <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> _this.<span class="property">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">        (<span class="keyword">function</span>(<span class="params">k</span>)&#123;</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(_this, k, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> _this.<span class="property">data</span>[k];</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">              _this.<span class="property">data</span>[k] = newValue;</span><br><span class="line">              view.<span class="title function_">render</span>(&#123; [k]: newValue&#125;); </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> view = &#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-a&quot;&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-s&quot;&gt;&#123;&#123; s &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-b&quot;&gt;&#123;&#123; b &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;=&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-r&quot;&gt;&#123;&#123; r &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; placeholder=&quot;Number a&quot; class=&quot;cal-input a&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; placeholder=&quot;Number b&quot; class=&quot;cal-input b&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;*&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;/&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params">mutedData</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!mutedData) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">template</span> = <span class="variable language_">this</span>.<span class="property">template</span>.<span class="title function_">replace</span>(</span><br><span class="line">          <span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>,</span><br><span class="line">          <span class="keyword">function</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> model[key.<span class="title function_">trim</span>()];</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        container.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">template</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">el</span>).<span class="title function_">appendChild</span>(container);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> mutedData) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.cal-&#x27;</span> + key).<span class="property">textContent</span> = mutedData[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> controller = &#123;</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> oCalInputs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.cal-input&#x27;</span>),</span><br><span class="line">          oCalBtns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.cal-btn&#x27;</span>),</span><br><span class="line">          inputItem,</span><br><span class="line">          btnItem;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalInputs.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        inputItem = oCalInputs[i];</span><br><span class="line"></span><br><span class="line">        inputItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleInput</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalBtns.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        btnItem = oCalBtns[i];</span><br><span class="line"></span><br><span class="line">        btnItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleBtn</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleInput</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> tar = e.<span class="property">target</span>,</span><br><span class="line">          value = <span class="title class_">Number</span>(tar.<span class="property">value</span>),</span><br><span class="line">          field = tar.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      model[field] = value;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// model.r = eval(&#x27;model.a&#x27; + model.s + &#x27;model.b&#x27;);</span></span><br><span class="line">      <span class="title function_">with</span>(<span class="params">model</span>) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleBtn</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> type = e.<span class="property">target</span>.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">      model.<span class="property">s</span> = type;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">with</span>(<span class="params">model</span>) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MVC</summary>
    
    
    
    <category term="Vue" scheme="https://lybinweb.github.io/categories/Vue/"/>
    
    
    <category term="MVC" scheme="https://lybinweb.github.io/tags/MVC/"/>
    
    <category term="计算器案例" scheme="https://lybinweb.github.io/tags/%E8%AE%A1%E7%AE%97%E5%99%A8%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
</feed>
