<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ICAN BLOG</title>
  <icon>https://www.gravatar.com/avatar/3b55730ce8227c56748646d6b16e5144</icon>
  <subtitle>思考、总结、分享</subtitle>
  <link href="https://lybinweb.github.io/atom.xml" rel="self"/>
  
  <link href="https://lybinweb.github.io/"/>
  <updated>2023-08-04T08:40:00.000Z</updated>
  <id>https://lybinweb.github.io/</id>
  
  <author>
    <name>ICAN</name>
    <email>1327899779@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性柱状图开发</title>
    <link href="https://lybinweb.github.io/posts/4d604634/index.html"/>
    <id>https://lybinweb.github.io/posts/4d604634/index.html</id>
    <published>2023-08-04T08:40:00.000Z</published>
    <updated>2023-08-04T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性柱状图开发"><a class="markdownIt-Anchor" href="#线性柱状图开发"></a> 线性柱状图开发</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">3px</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> <span class="selector-class">.round</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#85C35E</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#85C35E</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> <span class="selector-class">.round</span><span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: transform .<span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;can&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">axis1</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;降水量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unit</span>: <span class="string">&quot;ml&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: [<span class="number">6</span>, <span class="number">32</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">68.7</span>, <span class="number">100.7</span>, <span class="number">125.6</span>, <span class="number">112.2</span>, <span class="number">78.7</span>, <span class="number">48.8</span>, <span class="number">36.0</span>, <span class="number">19.3</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">max</span>: <span class="number">250</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">axis2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;温度&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unit</span>: <span class="string">&#x27;°C&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">max</span>: <span class="number">25</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="number">6.0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">10.2</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">10.3</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">11.5</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">10.3</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">13.2</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">14.3</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">16.4</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">18.0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">16.5</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">12.0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">5.2</span></span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">bottom</span>: [</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;1月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;2月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;3月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;4月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;5月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;6月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;7月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;8月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;9月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;10月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;11月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;12月&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oRound = oContainer.<span class="title function_">querySelector</span>(<span class="string">&#x27;.round&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> circleData = [];</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canPaddingX = <span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canPaddingY = <span class="number">70</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> axisXGap = <span class="number">40</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> bottomTextGap = <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> totalHeight = <span class="number">5</span> * axisXGap;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> lineCount = <span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> axisXWidth = axisXGap * <span class="number">2</span> + (data.<span class="property">bottom</span>.<span class="property">length</span> - <span class="number">1</span>) * bottomTextGap;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canWidth = axisXWidth + canPaddingX * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canHeight = axisXGap * <span class="number">5</span> + canPaddingY * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    oContainer.<span class="property">style</span>.<span class="property">width</span> = canWidth + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    oContainer.<span class="property">style</span>.<span class="property">height</span> = canHeight + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> xGap = canPaddingY;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> leftNumber = data.<span class="property">axis2</span>.<span class="property">max</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> rightNumber = data.<span class="property">axis1</span>.<span class="property">max</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> textGap = bottomTextGap;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      adaptDpr (oCan, canWidth, canHeight);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bindEvent</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">setDefaultStyle</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawAxisField</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawAxisLines</span>(drawBottomText);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawCircles</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawCircleConnectors</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawRects</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleCanvasMouseOver, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handleCanvasMouseOver</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> x = e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> y = e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> circlePos = <span class="title function_">checkInPath</span>(x, y);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (circlePos.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">style</span>.<span class="property">left</span> = circlePos[<span class="number">0</span>] - <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">style</span>.<span class="property">top</span> = circlePos[<span class="number">1</span>] - <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setDefaultStyle</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">lineCap</span> = <span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">lineJoin</span> = <span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">font</span> = <span class="string">&#x27;14px Arial&#x27;</span>; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawAxisField</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> textPosX = xGap - <span class="number">30</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#333&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(data.<span class="property">axis2</span>.<span class="property">name</span>, canPaddingY, textPosX);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(data.<span class="property">axis1</span>.<span class="property">name</span>, axisXWidth + canPaddingX - <span class="number">20</span>, textPosX);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawAxisLines</span> (callback) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lineCount; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> isFinalLine = i === lineCount - <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawAxisLine</span>(isFinalLine);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (isFinalLine) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">bottom</span>.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">callback</span>(i);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircles</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">axis2</span>.<span class="property">data</span>.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        drawCircle (i);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircleConnectors</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; circleData.<span class="property">length</span> - <span class="number">1</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawCircleConnector</span>(i);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawRects</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">axis1</span>.<span class="property">data</span>.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawRect</span>(i);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawBottomText</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> text = data.<span class="property">bottom</span>[index];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> bottomTextWidth = ctx.<span class="title function_">measureText</span>(text).<span class="property">width</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> startX = canPaddingX + axisXGap + index * textGap; </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(startX, xGap - axisXGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">lineTo</span>(startX, xGap - axisXGap + <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(text, startX - bottomTextWidth / <span class="number">2</span>, xGap - axisXGap + <span class="number">30</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawAxisLine</span> (isFinalLine) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> leftText = leftNumber + <span class="string">&#x27; &#x27;</span> + data.<span class="property">axis2</span>.<span class="property">unit</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> rightText = rightNumber + <span class="string">&#x27; &#x27;</span> + data.<span class="property">axis1</span>.<span class="property">unit</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;middle&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">strokeStyle</span> = isFinalLine ? <span class="string">&#x27;#333&#x27;</span> : <span class="string">&#x27;#ccc&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#333&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(canPaddingX, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">lineTo</span>(axisXWidth + canPaddingX, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">textAlign</span> = <span class="string">&#x27;end&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(leftText, canPaddingX - <span class="number">10</span>, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">textAlign</span> = <span class="string">&#x27;start&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(rightText, axisXWidth + canPaddingX + <span class="number">10</span>, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      leftNumber -= <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">      rightNumber -= <span class="number">50</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      xGap += axisXGap;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircle</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x, y ] = <span class="title function_">cToPx</span>(index);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      circleData.<span class="title function_">push</span>([ x, y ]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#85C35E&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">arc</span>(x - <span class="number">2</span>, y - <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircleConnector</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x1, y1 ] = circleData[index];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x2, y2 ] = circleData[index + <span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#85C35E&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(x1, y1 - <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">lineTo</span>(x2, y2 - <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawRect</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x, y ] = <span class="title function_">mlToPx</span>(index);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#5A6FC0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(x - <span class="number">20</span>, y, <span class="number">40</span>, canPaddingY + totalHeight - y);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">cToPx</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> x = canPaddingX + axisXGap + index * bottomTextGap;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> y = totalHeight - data.<span class="property">axis2</span>.<span class="property">data</span>[index] * totalHeight / data.<span class="property">axis2</span>.<span class="property">max</span> + canPaddingY;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> [x, y];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">mlToPx</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> x = canPaddingX + axisXGap + index * bottomTextGap;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> y = totalHeight - data.<span class="property">axis1</span>.<span class="property">data</span>[index] * totalHeight / data.<span class="property">axis1</span>.<span class="property">max</span> + canPaddingY;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> [x, y];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">adaptDpr</span> (canvas, width, height) &#123;</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">width</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(width * dpr);</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">height</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(height * dpr);</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">style</span>.<span class="property">width</span> = width + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">style</span>.<span class="property">height</span> = height + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">scale</span>(dpr, dpr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkInPath</span> (x, y) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; circleData.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> [ rx, ry ] = circleData[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> _x = rx + oContainer.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> _y = ry + oContainer.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">          x &gt;= _x - <span class="number">3</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          x &lt;= _x + <span class="number">3</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          y &gt;= _y - <span class="number">3</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          y &lt;= _y + <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">        ) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> [ rx, ry ];</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> [];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">线性柱状图开发</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>line相关属性方法</title>
    <link href="https://lybinweb.github.io/posts/ec706036/index.html"/>
    <id>https://lybinweb.github.io/posts/ec706036/index.html</id>
    <published>2023-08-03T08:40:00.000Z</published>
    <updated>2023-08-03T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="line相关属性方法"><a class="markdownIt-Anchor" href="#line相关属性方法"></a> line相关属性方法</h1><h2 id="ctxbeginpath方法"><a class="markdownIt-Anchor" href="#ctxbeginpath方法"></a> ctx.beginPath方法</h2><ul><li>beginPath(): 开启一个新的绘制路径<ol><li>如果需要单独设置样式的绘制路径就要使用beginPath</li><li>画一条连接的线不需要使用beginPath，不然就不是一个路径画出来的线段</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果没有beginPath的话，两条线的颜色都是blue</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h2 id="ctxlinewidth属性"><a class="markdownIt-Anchor" href="#ctxlinewidth属性"></a> ctx.lineWidth属性</h2><ul><li>lineWidth: 线段的宽度<ul><li>默认值：1.0</li><li>无效值：0、负数、infinity、null</li></ul></li></ul><h2 id="ctxlinecap属性"><a class="markdownIt-Anchor" href="#ctxlinecap属性"></a> ctx.lineCap属性</h2><ul><li>lineCap: 线段末端的形状<ul><li>参数：<ul><li>默认值：<code>butt</code>（方形）</li><li><code>square</code>：方形（两端增加线段的长度）<ul><li>高度：线段的宽度</li><li>宽度：线段宽度的一半</li></ul></li><li><code>round</code>：圆形<ul><li>增加线段的长度</li><li>半径：线段宽度的一半</li></ul></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">500</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">800</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">800</span>, <span class="number">500</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">lineCap</span> = <span class="string">&#x27;round&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">30</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">800</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="封装drawline函数"><a class="markdownIt-Anchor" href="#封装drawline函数"></a> 封装drawLine函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drawLine</span> (&#123;</span><br><span class="line">  beginPath, <span class="comment">// boolean 默认为true</span></span><br><span class="line">  width, <span class="comment">// number</span></span><br><span class="line">  color, <span class="comment">// string</span></span><br><span class="line">  cap, <span class="comment">// string</span></span><br><span class="line">  join, <span class="comment">// string</span></span><br><span class="line">  miterLimit, <span class="comment">// number</span></span><br><span class="line">  moveTo, <span class="comment">// []</span></span><br><span class="line">  lineTo, <span class="comment">// []</span></span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> lineCapList = [<span class="string">&#x27;butt&#x27;</span>, <span class="string">&#x27;square&#x27;</span>, <span class="string">&#x27;round&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> lineJoinList = [<span class="string">&#x27;miter&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;bevel&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  beginPath = beginPath === <span class="literal">undefined</span> ? !beginPath : beginPath;</span><br><span class="line"></span><br><span class="line">  width &amp;&amp; (ctx.<span class="property">lineWidth</span> = width);</span><br><span class="line">  color &amp;&amp; (ctx.<span class="property">strokeStyle</span> = color);</span><br><span class="line">  miterLimit &amp;&amp; (ctx.<span class="property">miterLimit</span> = miterLimit);</span><br><span class="line">  lineCapList.<span class="title function_">includes</span>(cap) &amp;&amp; (ctx.<span class="property">lineCap</span> = cap);</span><br><span class="line">  lineJoinList.<span class="title function_">includes</span>(join) &amp;&amp; (ctx.<span class="property">lineJoin</span> = join);</span><br><span class="line"></span><br><span class="line">  beginPath &amp;&amp; ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  <span class="title class_">Array</span>.<span class="title function_">isArray</span>(moveTo) &amp;&amp; moveTo.<span class="property">length</span> === <span class="number">2</span> &amp;&amp; ctx.<span class="title function_">moveTo</span>(...moveTo);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lineTo) &#123;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">isArray</span>(lineTo) &amp;&amp; lineTo.<span class="property">length</span> === <span class="number">2</span> &amp;&amp; ctx.<span class="title function_">lineTo</span>(...lineTo);</span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ctxlinejoin属性"><a class="markdownIt-Anchor" href="#ctxlinejoin属性"></a> ctx.lineJoin属性</h2><ul><li>lineJoin: 连续绘制的两条线段之间填充的形状<ul><li>前提：必须是连续绘制的线段（同一路径下多条线段绘制）</li><li>参数：<ul><li>默认值：<code>miter</code>（斜接，线段转弯时为尖角）</li><li><code>round</code>：扇形（线段转弯时为扇形）</li><li><code>bevel</code>：斜面（线段转弯时为三角形）</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">lineJoin</span> = <span class="string">&#x27;round&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="ctxmiterlimit"><a class="markdownIt-Anchor" href="#ctxmiterlimit"></a> ctx.miterLimit</h2><ul><li>miterLimit: 斜接面限制比例<ul><li>边角的角度越小，斜接角度就越长</li><li>为了避免斜接长度过长，可以使用miterLimit限制</li><li>斜接长度超过miterLimit时，边角会以lineJoin的square或者round来显示</li><li>参数：<ul><li>默认值：10.0</li></ul></li></ul></li></ul><h2 id="ctxsetlinedash方法"><a class="markdownIt-Anchor" href="#ctxsetlinedash方法"></a> ctx.setLineDash()方法</h2><ul><li>setLineDash方法：设置虚线数据<ul><li>参数：<ul><li>Array: [1, 2, 3, 4]<br />线 空 线 空</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">setLineDash</span>([ <span class="number">10</span>, <span class="number">20</span> ]);</span><br></pre></td></tr></table></figure><h2 id="ctxgetlinedash方法"><a class="markdownIt-Anchor" href="#ctxgetlinedash方法"></a> ctx.getLineDash()方法</h2><ul><li>getLineDash方法：获取虚线数据</li></ul><h2 id="ctxlinedashoffset属性"><a class="markdownIt-Anchor" href="#ctxlinedashoffset属性"></a> ctx.lineDashOffset属性</h2><ul><li>lineDashOffset: 虚线的偏移量</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 蚂蚁线</span></span><br><span class="line"><span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span> () &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line">  ctx.<span class="title function_">setLineDash</span>([<span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line">  ctx.<span class="property">lineDashOffset</span> = -offset;</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">march</span> () &#123;</span><br><span class="line">  offset ++;</span><br><span class="line">  <span class="keyword">if</span> (offset &gt; <span class="number">16</span>) &#123;</span><br><span class="line">    offset = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">draw</span>();</span><br><span class="line">  <span class="built_in">setTimeout</span>(march, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">march</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">line相关属性方法</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>像素、绘制原理、清晰度问题</title>
    <link href="https://lybinweb.github.io/posts/9dd20eee/index.html"/>
    <id>https://lybinweb.github.io/posts/9dd20eee/index.html</id>
    <published>2023-08-03T08:40:00.000Z</published>
    <updated>2023-08-03T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="像素-绘制原理-清晰度问题"><a class="markdownIt-Anchor" href="#像素-绘制原理-清晰度问题"></a> 像素、绘制原理、清晰度问题</h1><h2 id="像素"><a class="markdownIt-Anchor" href="#像素"></a> 像素</h2><ul><li>设备物理像素：分辨率 1920*1080</li><li>像素：物理屏幕上一个一个的格子<ul><li>1pt*1pt：表示设备显示像素的物理格子的大小</li></ul></li><li>设备独立像素：定义UI布局时需要用到的虚拟的像素单位</li></ul><blockquote><p>devicePixelRatio：设备物理像素 / 设备独立像素 =&gt; 2<br />浏览器宿主 =&gt; devicePixelRatio =&gt; 算出设备独立像素 =&gt; 2pt =&gt; 1px =&gt; 2pt*2pt</p></blockquote><h2 id="绘制原理"><a class="markdownIt-Anchor" href="#绘制原理"></a> 绘制原理</h2><ul><li>Canvas是由设置、绘制、渲染三部分组成的</li><li>浏览器样式渲染跟Canvas的关系只在渲染阶段</li></ul><blockquote><p><code>设置+绘制</code>的阶段跟<code>渲染</code>的阶段是由差异的</p></blockquote><ul><li><code>window.devicePixelRatio</code>: 设备物理像素 / 设备独立像素</li></ul><h2 id="解决canvas绘制不清晰的问题"><a class="markdownIt-Anchor" href="#解决canvas绘制不清晰的问题"></a> 解决canvas绘制不清晰的问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> canvas: canvasDOM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> width: clientWidth</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> height: clientHeight</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adaptDpr</span> (canvas, width, height) &#123;</span><br><span class="line">  <span class="keyword">const</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>;</span><br><span class="line">  </span><br><span class="line">  canvas.<span class="property">width</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(width * dpr);</span><br><span class="line">  canvas.<span class="property">height</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(height * dpr);</span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">width</span> = width + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">height</span> = height + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  ctx.<span class="title function_">scale</span>(dpr, dpr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">像素、绘制原理、清晰度问题</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>什么是canvas、canvas绘制矩形</title>
    <link href="https://lybinweb.github.io/posts/e22c6d05/index.html"/>
    <id>https://lybinweb.github.io/posts/e22c6d05/index.html</id>
    <published>2023-07-21T08:14:00.000Z</published>
    <updated>2023-07-21T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是canvas-canvas绘制矩形"><a class="markdownIt-Anchor" href="#什么是canvas-canvas绘制矩形"></a> 什么是canvas、canvas绘制矩形</h1><h2 id="一-什么是canvas"><a class="markdownIt-Anchor" href="#一-什么是canvas"></a> 一、什么是canvas</h2><ul><li><p>浏览器需要在canvas画布元素上进行图形化绘制</p><ol><li>canvas标签是HTML5版本新增标签</li><li>配合canvas标签元素，HTML5技术 JavaScript API(Canvas API)来绘制图形</li></ol></li><li><p>canvas标签属性</p><ol><li>id -&gt; JavaScript要获取到canvas画布对象，并通过该DOM对象来创建图形的上下文（绘制的方法和属性）</li><li>width -&gt; canvas独有的属性，给当前画布对象设置宽（画布宽度），而不是给canvas元素设置宽（默认值：300px）</li><li>height -&gt; 画布高度（默认值：150px）</li></ol></li></ul><blockquote><p>注意：画布的大小决定了Canvas API绘制图形的边界</p></blockquote><ol><li>使用canvas元素的宽高属性定义画布大小（推荐）</li><li>使用CSS定义画布的宽高属性（不推荐，因为会导致绘制的内容变形）</li><li>canvas会存在兼容性问题：<code>&lt;canvas&gt;您使用的浏览器不支持canvas元素&lt;/canvas&gt;</code></li><li>canvas画布最大面积</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;can&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布的元素（一般canvas用id来做，因为画布是唯一的）</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(oCan); <span class="comment">// HTMLCanvasElement对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(oCan)); <span class="comment">// [object HTMLCanvasElement]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用当前画布对象，创建一个绘制图形的上下文（方法与属性集合）</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="comment">// 如果无法创建上下文，则返回null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ctx); <span class="comment">// CanvasRenderingContext2D对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ocangetcontext"><a class="markdownIt-Anchor" href="#ocangetcontext"></a> oCan.getContext()</h3><ul><li><code>getContext(contentType, contextAttributes)</code>：创建canvas上下文<ul><li>参数：contentType（string）<ol><li><code>2d</code> -&gt; 创建2d渲染的上下文 -&gt; 绘制接口：<code>CanvasRenderingContext2D</code> -&gt; 所有的属性和方法</li><li><code>webgl/webgl2</code> -&gt; 创建3d渲染上下文 -&gt; 绘制接口：<code>WebGL(2)RenderingContext</code><ul><li>注意：webgl2是webgl的升级版本（增加了更多的API和配置）</li></ul></li><li><code>bitmaprenderer</code> -&gt; 创建ImageBitMap替换canvas的上下文（位图，着眼于像素渲染到一种位图） -&gt; 绘制接口：<code>ImageBigMapRenderingContext</code></li></ol></li><li>参数：contextAttributes（Object）<ol><li><code>alpha</code>: true<ul><li>设置false：canvas背景不透明，加速渲染透明的图像或图形</li></ul></li></ol></li></ul></li></ul><h2 id="二-绘制矩形-rect"><a class="markdownIt-Anchor" href="#二-绘制矩形-rect"></a> 二、绘制矩形 rect</h2><ul><li><p>Canvas 2d坐标系：px</p><ul><li>x轴：元素的left偏移量</li><li>y轴：元素的top偏移量</li></ul></li><li><p>stroke 描边，画线、空心</p></li><li><p>fill：填充，实心</p></li><li><p>绘制矩形：</p><ul><li>默认颜色：黑色 #000</li><li>参数列表：<ol><li>横坐标 x</li><li>纵坐标 y</li><li>矩形宽度 width</li><li>矩形高度 height</li></ol></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">angle角度相关</span></span><br><span class="line"><span class="comment">  rectangle矩形</span></span><br><span class="line"><span class="comment">    rect正，直的</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  triangle三角形 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">uni一个，单独（变成一个的）</span></span><br><span class="line"><span class="comment">  uniform制服，统一的，一致的</span></span><br><span class="line"><span class="comment">  union联盟</span></span><br><span class="line"><span class="comment">  unit一个单位，个位数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bicycle两轮车</span></span><br><span class="line"><span class="comment">tri</span></span><br><span class="line"><span class="comment">  three</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bio生物，生命</span></span><br><span class="line"><span class="comment">ology学科</span></span><br><span class="line"><span class="comment">biology生物</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存客户端元素</span></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置画布的宽高</span></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 设置描边颜色</span></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制描边矩形 rectangle矩形 triangle三角形 angle角度相关</span></span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">120</span>);</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">400</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制填充矩形</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">120</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">400</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除画布</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// clearRect 清除一个特定矩形范围内的内容</span></span><br><span class="line">  <span class="comment">// 通过把像素点的颜色设置为透明，来达到清除一个矩形区域的内容的目的</span></span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-canvasrenderingcontext2dstrokerect"><a class="markdownIt-Anchor" href="#1-canvasrenderingcontext2dstrokerect"></a> 1、CanvasRenderingContext2D.strokeRect()</h3><ul><li>绘制描边矩形</li></ul><h3 id="2-canvasrenderingcontext2dfillrect"><a class="markdownIt-Anchor" href="#2-canvasrenderingcontext2dfillrect"></a> 2、CanvasRenderingContext2D.fillRect()</h3><ul><li>绘制填充矩形</li></ul><h3 id="3-canvasrenderingcontext2dclearrect"><a class="markdownIt-Anchor" href="#3-canvasrenderingcontext2dclearrect"></a> 3、CanvasRenderingContext2D.clearRect()</h3><ul><li>清除矩形范围内的绘制</li></ul><h2 id="三-拖动鼠标创建矩形"><a class="markdownIt-Anchor" href="#三-拖动鼠标创建矩形"></a> 三、拖动鼠标创建矩形</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存客户端元素</span></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置画布的宽高</span></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rectInfo = <span class="literal">null</span>; <span class="comment">// [x, y, w, h]</span></span><br><span class="line"><span class="keyword">const</span> rectWrapper = []; <span class="comment">// [ [x, y, w, h], [x, y, w, h], ... ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;fill&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">  oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, handleCanvasMouseDown, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCanvasMouseDown</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">  rectInfo = [e.<span class="property">clientX</span>, e.<span class="property">clientY</span>];</span><br><span class="line"></span><br><span class="line">  oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleCanvasMouseMove, <span class="literal">false</span>);</span><br><span class="line">  oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, handleCanvasMouseUp, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCanvasMouseMove</span> (e) &#123;</span><br><span class="line">  <span class="title function_">createRect</span>(rectInfo[<span class="number">0</span>], rectInfo[<span class="number">1</span>], e.<span class="property">clientX</span>, e.<span class="property">clientY</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCanvasMouseUp</span> () &#123;</span><br><span class="line">  <span class="title function_">saveRect</span>();</span><br><span class="line">  oCan.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleCanvasMouseMove);</span><br><span class="line">  oCan.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, handleCanvasMouseUp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRect</span> (x1, y1, x2, y2) &#123;</span><br><span class="line">  <span class="keyword">const</span> w = <span class="title class_">Math</span>.<span class="title function_">abs</span>(x2 - x1);</span><br><span class="line">  <span class="keyword">const</span> h = <span class="title class_">Math</span>.<span class="title function_">abs</span>(y2 - y1);</span><br><span class="line">  rectInfo = [x1, y1, w, h];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;stroke&#x27;</span>:</span><br><span class="line">      <span class="title function_">strokeRects</span>();</span><br><span class="line">      <span class="title function_">strokeRect</span>(...rectInfo);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;fill&#x27;</span>:</span><br><span class="line">      <span class="title function_">fillRects</span>();</span><br><span class="line">      <span class="title function_">fillRect</span>(...rectInfo);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearRect</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strokeRect</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fillRect</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">fillRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strokeRects</span> () &#123;</span><br><span class="line">  rectWrapper.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[ x, y, w, h]</span>) =&gt;</span> <span class="title function_">strokeRect</span>(x, y, w, h));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fillRects</span> () &#123;</span><br><span class="line">  rectWrapper.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[ x, y, w, h]</span>) =&gt;</span> <span class="title function_">fillRect</span>(x, y, w, h));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveRect</span> () &#123;</span><br><span class="line">  rectWrapper.<span class="title function_">push</span>(rectInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">什么是canvas,canvas绘制矩形</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>虚拟列表</title>
    <link href="https://lybinweb.github.io/posts/300a8ca5/index.html"/>
    <id>https://lybinweb.github.io/posts/300a8ca5/index.html</id>
    <published>2023-07-20T06:55:00.000Z</published>
    <updated>2023-07-20T06:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟列表"><a class="markdownIt-Anchor" href="#虚拟列表"></a> 虚拟列表</h1><h2 id="什么是虚拟列表"><a class="markdownIt-Anchor" href="#什么是虚拟列表"></a> 什么是虚拟列表</h2><ul><li>概念：虚拟列表是一种优化长列表显示的技术。当列表数据量过大的时候，传统的做法是将每一项数据都会渲染到浏览器页面上，这样会导致页面加载过慢、卡顿、占用内存较高、影响用户体验的现象。而虚拟列表的做法是页面DOM列表的长度是固定的，动态的改变每一项，从而达到视觉上就是长列表的技术。</li></ul><h2 id="虚拟列表的注意事项跟实现思路"><a class="markdownIt-Anchor" href="#虚拟列表的注意事项跟实现思路"></a> 虚拟列表的注意事项跟实现思路</h2><ul><li><p>虚拟列表思路：</p><ol><li>列表在上下滚动的时候，通过给列表容器增加padding-top达到列表滚动的条件。列表第一项滚动离开可视区域列表外那一刻，增加上padding，并且列表所有项索引+1了，来更新列表，他的核心是通过增加或减少padding-top且增加padding-bottom来实现的</li><li>startIndex = scrollTop / itemHeight</li></ol></li><li><p>虚拟列表需要考虑的问题：</p><ol><li>每一次虚拟列表在更新的时候，每一项的视图可能都不一样</li><li>在快速滑动的时候，白屏怎么处理</li><li>在滑动的时候，会卡顿，不是性能导致的，是因为渲染不及时又进行了滚动导致的</li><li>滑动到底部的时候，你要预留的空间是通过微调来调出来的，不同的场景下微调的距离是不同的，是看你的列表的规划而定的</li></ol></li><li><p>虚拟列表的核心：<strong>有限的DOM中去做无限的DOM渲染、结构渲染</strong></p></li><li><p>实现虚拟列表需要弄清楚的前置条件：</p><ol><li>列表数据dataSource（可能通过请求一次又一次动态获取）</li><li>可视区域列表数据currentData</li><li>列表项的高度ITEM_HEIGTH（定值）</li><li>可视区域列表最大容纳列表项个数MAX_ITEM_COUNT</li><li>可视区域列表的开始索引startIndex（核心）</li><li>可视区域列表的结束索引endIndex</li><li>可视区域列表的上下padding</li></ol></li><li><p>优化：</p><ol><li>滚动的时候节流，唯一方法：利用requestAnimationFrame动画帧来做</li><li>滚动白屏优化：列表渲染两屏，滚动到第二屏的时候才增加上padding</li></ol></li></ul><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><ul><li>目录结构<ul><li>index.html</li><li>app.js</li><li>config.js</li><li>utils.js</li><li>reactive.js</li><li>render.js</li></ul></li></ul><h3 id="indexhtml"><a class="markdownIt-Anchor" href="#indexhtml"></a> index.html</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vite App&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .scroll-wrapper &#123;</span><br><span class="line">        height: 100vh;</span><br><span class="line">        overflow-y: auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .list-item &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border-bottom: 1px solid #000;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;scroll-wrapper&quot; id=&quot;J_scrollWrapper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;list-wrapper&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script type=&quot;module&quot; src=&quot;./app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="appjs"><a class="markdownIt-Anchor" href="#appjs"></a> app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="variable constant_">ITEM_HEIGHT</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, setCurrentData, setDataSource &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;./render&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;setAnimationFrame&#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oScroller = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_scrollWrapper&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> oList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list-wrapper&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> $state = <span class="title function_">reactive</span>(oList);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">initData</span>(<span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="title function_">render</span>($state.<span class="property">currentData</span>, $state.<span class="property">paddingSet</span>, oList);</span><br><span class="line">    <span class="title function_">bindEvent</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initData</span> (init, count) &#123;</span><br><span class="line">    <span class="title function_">setDataSource</span>(init, count);</span><br><span class="line">    <span class="title function_">setCurrentData</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">    oScroller.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleScroll</span> () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * - 需要考虑到时间问题跟上一次是否渲染完毕了，再去走下一步的程序：节流</span></span><br><span class="line"><span class="comment">     * - requestAnimationFrame：告诉浏览器你需要执行一个动画，并且要求浏览器在下一次重绘之前调用指定的回调函数更新动画执行。该方法接收一个回调函数作为参数，该回调函数会在下一次浏览器重绘之前执行</span></span><br><span class="line"><span class="comment">     * - 人能接受的最低帧数：30帧 =&gt; 1s设置3次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      $state.<span class="property">startIndex</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">scrollTop</span> / <span class="variable constant_">ITEM_HEIGHT</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="configjs"><a class="markdownIt-Anchor" href="#configjs"></a> config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ITEM_HEIGHT</span> = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MAX_ITEM_COUNT</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_scrollWrapper&#x27;</span>).<span class="property">offsetHeight</span> / <span class="variable constant_">ITEM_HEIGHT</span>) + <span class="number">1</span>; <span class="comment">//</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">TIME_PRE_FPS</span> = <span class="number">1000</span> / <span class="number">30</span>; <span class="comment">// 1s更新的帧数次数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="utilsjs"><a class="markdownIt-Anchor" href="#utilsjs"></a> utils.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">TIME_PRE_FPS</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 模拟获取数据 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getData</span> (init, count) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = init; i &lt;= count; i ++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setAnimationFrame</span> (callback) &#123;</span><br><span class="line">  <span class="keyword">let</span> beginTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> <span class="title function_">cb</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> endTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (endTime - beginTime &gt;= <span class="variable constant_">TIME_PRE_FPS</span>) &#123;</span><br><span class="line">      beginTime = endTime;</span><br><span class="line">      <span class="title function_">requestAnimationFrame</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reactivejs"><a class="markdownIt-Anchor" href="#reactivejs"></a> reactive.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ITEM_HEIGHT</span>, <span class="variable constant_">MAX_ITEM_COUNT</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getData &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; update, updatePaddingSet &#125; <span class="keyword">from</span> <span class="string">&quot;./render&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">dataSource</span>: [],</span><br><span class="line">  <span class="attr">currentData</span>: [],</span><br><span class="line">  <span class="attr">startIndex</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">endIndex</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">paddingSet</span>: &#123;</span><br><span class="line">    <span class="attr">paddingTop</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">paddingBottom</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span> (oList) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>($state, &#123;</span><br><span class="line">    <span class="attr">dataSource</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">dataSource</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        data.<span class="property">dataSource</span> = newValue;</span><br><span class="line">        <span class="comment">// set currentData</span></span><br><span class="line">        <span class="title function_">setCurrentData</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">currentData</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">currentData</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        data.<span class="property">currentData</span> = newValue;</span><br><span class="line">        <span class="comment">// update view</span></span><br><span class="line">        <span class="title function_">update</span>($state.<span class="property">currentData</span>, oList);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">startIndex</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">startIndex</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($state.<span class="property">startIndex</span> !== newValue) &#123;</span><br><span class="line">          data.<span class="property">startIndex</span> = newValue;</span><br><span class="line">          <span class="comment">// set currentData</span></span><br><span class="line">          <span class="title function_">setCurrentData</span>();</span><br><span class="line">          <span class="comment">// set dataSource (endIndex &gt;= dataSource.length - 1)</span></span><br><span class="line">          $state.<span class="property">endIndex</span> &gt;= $state.<span class="property">dataSource</span>.<span class="property">length</span> - <span class="number">1</span> &amp;&amp; <span class="title function_">setDataSource</span>($state.<span class="property">dataSource</span>.<span class="property">length</span> + <span class="number">1</span>, $state.<span class="property">dataSource</span>.<span class="property">length</span> * <span class="number">2</span>);</span><br><span class="line">          <span class="comment">// set padding</span></span><br><span class="line">          <span class="title function_">setPaddingSet</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">endIndex</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">setEndIndex</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">paddingSet</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">paddingSet</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        data.<span class="property">paddingSet</span> = newValue;</span><br><span class="line">        <span class="comment">// update view padding</span></span><br><span class="line">        <span class="title function_">updatePaddingSet</span>($state.<span class="property">paddingSet</span>, oList);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setEndIndex</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> endIndex = $state.<span class="property">startIndex</span> + <span class="variable constant_">MAX_ITEM_COUNT</span> * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $state.<span class="property">dataSource</span>[endIndex] ? endIndex : $state.<span class="property">dataSource</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setDataSource</span> (init, count) &#123;</span><br><span class="line">  $state.<span class="property">dataSource</span> = [</span><br><span class="line">    ...$state.<span class="property">dataSource</span>,</span><br><span class="line">    ...<span class="title function_">getData</span>(init, count)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setCurrentData</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> startIndex = <span class="title function_">resetStartIndex</span>();</span><br><span class="line">  $state.<span class="property">currentData</span> = $state.<span class="property">dataSource</span>.<span class="title function_">slice</span>(startIndex, $state.<span class="property">endIndex</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setPaddingSet</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> startIndex = <span class="title function_">resetStartIndex</span>();</span><br><span class="line">  $state.<span class="property">paddingSet</span> = &#123;</span><br><span class="line">    <span class="attr">paddingTop</span>: startIndex * <span class="variable constant_">ITEM_HEIGHT</span>,</span><br><span class="line">    <span class="attr">paddingBottom</span>: ($state.<span class="property">dataSource</span>.<span class="property">length</span> - $state.<span class="property">endIndex</span>) * <span class="variable constant_">ITEM_HEIGHT</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetStartIndex</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> $state.<span class="property">startIndex</span> &lt;= <span class="variable constant_">MAX_ITEM_COUNT</span> ? <span class="number">0</span> : $state.<span class="property">startIndex</span> - <span class="variable constant_">MAX_ITEM_COUNT</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="renderjs"><a class="markdownIt-Anchor" href="#renderjs"></a> render.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span> (currentData, paddingSet, list) &#123;</span><br><span class="line">  <span class="keyword">const</span> oFragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">  currentData.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    oItem.<span class="property">className</span> = <span class="string">&#x27;list-item&#x27;</span>;</span><br><span class="line">    oItem.<span class="property">innerText</span> = item;</span><br><span class="line"></span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(oItem);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  list.<span class="title function_">appendChild</span>(oFragment);</span><br><span class="line">  <span class="title function_">updatePaddingSet</span>(paddingSet, list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">update</span> (currentData, list) &#123;</span><br><span class="line">  <span class="keyword">const</span> oItems = list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.list-item&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oItems.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    item.<span class="property">innerText</span> = currentData[index];</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updatePaddingSet</span> (paddingSet, list) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> paddingSet) &#123;</span><br><span class="line">    list.<span class="property">style</span>[key] = paddingSet[key] + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">虚拟列表</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="虚拟列表" scheme="https://lybinweb.github.io/tags/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>绘制文本 Text相关属性、方法</title>
    <link href="https://lybinweb.github.io/posts/e36d962f/index.html"/>
    <id>https://lybinweb.github.io/posts/e36d962f/index.html</id>
    <published>2023-07-14T08:14:00.000Z</published>
    <updated>2023-08-03T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制文本-text相关属性-方法"><a class="markdownIt-Anchor" href="#绘制文本-text相关属性-方法"></a> 绘制文本 Text相关属性、方法</h1><h2 id="filltext方法"><a class="markdownIt-Anchor" href="#filltext方法"></a> fillText()方法</h2><ul><li>fillText：填充文本（实心）<ul><li>参数：<ol><li>文本（必填）</li><li>横坐标（必填）</li><li>纵坐标（必填）</li><li>文本最大宽度（可选） 最大文本绘制宽度【变形、挤压、压扁】</li></ol></li></ul></li></ul><h2 id="font属性"><a class="markdownIt-Anchor" href="#font属性"></a> font属性</h2><ul><li>font：设置文本样式、尺寸、字体（按顺序、同步设置）<ul><li>参数：<ol><li>样式（可选）</li><li>尺寸（可选）</li><li>字体（可选）</li></ol></li><li>默认值：<code>10px sans-serif</code></li></ul></li></ul><h2 id="stroketext方法"><a class="markdownIt-Anchor" href="#stroketext方法"></a> strokeText()方法</h2><ul><li>strokeText：描边文本（空心）<ul><li>参数：<ol><li>文本（必填）</li><li>横坐标（必填）</li><li>纵坐标（必填）</li><li>文本最大宽度（可选）</li></ol></li></ul></li></ul><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;bold 50px serif&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"><span class="comment">// 填充文本</span></span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I love you!&#x27;</span>, <span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;bold 50px serif&#x27;</span>;</span><br><span class="line"><span class="comment">// 线的颜色</span></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"><span class="comment">// 描边文本</span></span><br><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&#x27;I love you!&#x27;</span>, <span class="number">1000</span>, <span class="number">300</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="textalign属性"><a class="markdownIt-Anchor" href="#textalign属性"></a> textAlign属性</h2><ul><li>textAlign：将文本的左或右边对齐y轴<ul><li>参数：<code>start|left|end|right</code><ul><li><code>start|left 等效</code></li><li><code>end|right 等效</code></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">500</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&#x27;left&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I love you!!!&#x27;</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&#x27;right&#x27;</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&#x27;I love you!!!&#x27;</span>, <span class="number">100</span>, <span class="number">250</span>);</span><br></pre></td></tr></table></figure><h2 id="textbaseline属性"><a class="markdownIt-Anchor" href="#textbaseline属性"></a> textBaseline属性</h2><ul><li>textBaseline：文本基线<ul><li>参数<ol><li><code>top</code>：文本顶部对齐x轴</li><li><code>hanging</code>：文本顶部对齐x轴（距离更近一些）</li><li><code>middle</code>：文本垂直居中x轴（文本贯穿x轴）</li><li><code>alphabetic</code>：文本底部对齐x轴（以英文字母为基准的对齐）</li><li><code>idiographic</code>：以表意文字为基准的对齐（中文字体稍微往下走一点，文本底部对齐x轴）</li><li><code>bottom</code>：文本底部对齐x轴（中文字体底部也对齐x轴）</li></ol></li><li>默认值：<code>alphabetic</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;top|hanging&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="direction属性"><a class="markdownIt-Anchor" href="#direction属性"></a> direction属性</h2><blockquote><p>兼容性比较差，实验性属性</p></blockquote><ul><li>direction：<ul><li>参数：<ol><li><code>ltr</code>：left to right</li><li><code>rtl</code>：right to left</li></ol></li><li>注意：跟start、end有关系</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">direction</span> = <span class="string">&#x27;rtl&#x27;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&#x27;start&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I love you!!!&#x27;</span>, <span class="number">500</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="measuretext方法"><a class="markdownIt-Anchor" href="#measuretext方法"></a> measureText方法</h2><ul><li>measureText：测量文本的尺寸位置的信息对象<ul><li>参数：要测量的文本<ul><li>返回值<br />TextMetrics {<br />actualBoundingBoxAscent, 基线距离文本顶点的距离<br />actualBoundingBoxDescent, 基线距离下边的边缘的距离<br />actualBoundingBoxLeft, 基线起点距离Y轴左侧偏移的距离<br />actualBoundingBoxRight, 基线起点距离Y轴右侧偏移的距离<br />fontBoundingBoxAscent,<br />fontBoundingBoxDescent,<br />width<br />}</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I&#x27;</span>, <span class="number">500</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">const</span> info = ctx.<span class="title function_">measureText</span>(<span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">width</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">info:</span></span><br><span class="line"><span class="comment">TextMetrics &#123;</span></span><br><span class="line"><span class="comment">  actualBoundingBoxAscent, 基线距离文本顶点的距离</span></span><br><span class="line"><span class="comment">  actualBoundingBoxDescent, 基线距离下边的边缘的距离</span></span><br><span class="line"><span class="comment">  actualBoundingBoxLeft, 基线起点距离Y轴左侧偏移的距离</span></span><br><span class="line"><span class="comment">  actualBoundingBoxRight, 基线起点距离Y轴右侧偏移的距离</span></span><br><span class="line"><span class="comment">  fontBoundingBoxAscent, </span></span><br><span class="line"><span class="comment">  fontBoundingBoxDescent,</span></span><br><span class="line"><span class="comment">  width </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="canvas文本输入框案例"><a class="markdownIt-Anchor" href="#canvas文本输入框案例"></a> Canvas文本输入框案例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;30px serif&#x27;</span>;</span><br><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;top&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textArr = [];</span><br><span class="line"><span class="keyword">const</span> widthArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> lineHeight = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">drawInputBox</span>(<span class="number">200</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">  <span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, handleKeyDown, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleKeyDown</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 当前状态是大写还是小写</span></span><br><span class="line">  <span class="keyword">const</span> capslock = e.<span class="title function_">getModifierState</span>(<span class="string">&#x27;CapsLock&#x27;</span>);</span><br><span class="line">  <span class="comment">// 按键字母转为小写</span></span><br><span class="line">  <span class="keyword">const</span> key = !capslock ? e.<span class="property">key</span>.<span class="title function_">toLowerCase</span>() : e.<span class="property">key</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&#x27;capslock&#x27;</span> || key === <span class="string">&#x27;CAPSLOCK&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">shiftKey</span>, <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e.<span class="property">keyCode</span>))</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">shiftKey</span> &amp;&amp; <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e.<span class="property">keyCode</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;shift&#x27;</span> || key === <span class="string">&#x27;SHIFT&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="title function_">addChar</span>(key.<span class="title function_">toUpperCase</span>());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (key.<span class="title function_">toLowerCase</span>()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;alt&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;meta&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;backspace&#x27;</span>:</span><br><span class="line">      <span class="title function_">removeChar</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;enter&#x27;</span>:</span><br><span class="line">      index ++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="title function_">addChar</span>(key);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeChar</span> () &#123;</span><br><span class="line">  <span class="keyword">if</span> (textArr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> charArr = textArr[textArr.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!charArr.<span class="property">length</span>) &#123; <span class="comment">// 长度为0</span></span><br><span class="line">      textArr.<span class="title function_">pop</span>();</span><br><span class="line">      widthArr.<span class="title function_">pop</span>();</span><br><span class="line">      index --;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> lastChar = charArr.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">const</span> charWidth = ctx.<span class="title function_">measureText</span>(lastChar).<span class="property">width</span>;</span><br><span class="line">    widthArr[index] -= charWidth;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">drawText</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawText</span> () &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(<span class="number">200</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">50</span> + index * lineHeight);</span><br><span class="line"></span><br><span class="line">  textArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">charArr, index</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="title function_">strokeText</span>(charArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>), <span class="number">210</span>, <span class="number">110</span> + index * lineHeight);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addChar</span> (key) &#123;</span><br><span class="line">  <span class="keyword">const</span> keyWidth = ctx.<span class="title function_">measureText</span>(key).<span class="property">width</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (textArr[index]) &#123;</span><br><span class="line">    textArr[index].<span class="title function_">push</span>(key);</span><br><span class="line">    widthArr[index] += keyWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    textArr[index] = [key];</span><br><span class="line">    widthArr[index] = keyWidth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (widthArr[index] &gt;= <span class="number">275</span>) &#123;</span><br><span class="line">    index ++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">drawText</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawInputBox</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">绘制文本 Text相关属性、方法</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>基础知识复习</title>
    <link href="https://lybinweb.github.io/posts/ad732e86/index.html"/>
    <id>https://lybinweb.github.io/posts/ad732e86/index.html</id>
    <published>2023-06-25T03:20:00.000Z</published>
    <updated>2023-06-25T03:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ts基础内容复习"><a class="markdownIt-Anchor" href="#ts基础内容复习"></a> TS基础内容复习</h1><ul><li>JS -&gt; 浏览器 | Node 可以直接执行</li><li>TS -&gt; 可以用Deno直接执行，其原理是Deno是Rust语言写的，将TS转换为JS，然后用V8执行</li></ul><blockquote><p>TS -&gt; 类型擦除 -&gt; ES6(NodeJS 12+/chrome 100上运行) -&gt; 编译(babel) -&gt; ES5(NodeJS10-/IE11-) -&gt; 打包 -&gt; 单文件 -&gt; 浏览器下载</p></blockquote><h2 id="如何擦除类型"><a class="markdownIt-Anchor" href="#如何擦除类型"></a> 如何擦除类型</h2><ul><li>快：不检查TS语法<ul><li>esbuild 【go语言开发】<ul><li><code>npm i -g esbuild</code> 安装</li><li><code>esbuild 1.ts &gt; 1.js</code> 将1.ts的TS擦除调保存到1.js文件中</li></ul></li><li>swc【rust语言开发】<ul><li><code>swc 1.ts -o 1.js</code></li></ul></li></ul></li><li>慢：做语法检查<ul><li>tsc<ul><li><code>npm i -g typescript</code><ul><li><code>tsc 1.ts</code></li></ul></li></ul></li><li>babel<ul><li><code>npm i @babel/core @babel/cli @babel/preset-typescript</code></li><li><code>babel --presets @babel/preset-typescript 1.ts</code></li></ul></li></ul></li></ul><h2 id="运行typescript"><a class="markdownIt-Anchor" href="#运行typescript"></a> 运行TypeScript</h2><ol><li>TypeScript Playground 官方出版</li><li>第三方<ul><li><code>playcode.io</code> 前端最快编辑器 收费</li><li><code>stackblitz.com</code> 有单独的Vite</li><li><code>codesandbox.io</code></li></ul></li><li>本地运行<ul><li>vite 开启服务运行TS代码<ul><li><code>npm create vite@latest</code>|<code>yarn create vite</code>|<code>pnpm create vite</code></li></ul></li><li>ts-node 直接执行TS代码<ul><li><code>npm i -g TypeScript</code></li><li><code>npm i -g ts-node</code></li></ul></li><li>swc-node</li><li>esm-loader</li><li>esno</li></ul></li></ol><h2 id="数据与类型"><a class="markdownIt-Anchor" href="#数据与类型"></a> 数据与类型</h2><ul><li>数据类型：<ul><li>JS：number string boolean null undefined symbol</li><li>TS：JS + void never enum unknown any type interface</li></ul></li></ul><h3 id="type描述原始值"><a class="markdownIt-Anchor" href="#type描述原始值"></a> type描述原始值</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="built_in">boolean</span> = <span class="literal">true</span> | <span class="literal">false</span>; <span class="comment">// |读做并</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Object</span> = &#123;&#125; | <span class="title class_">Array</span> | <span class="title class_">Function</span> | <span class="title class_">String</span> | <span class="title class_">Number</span> | <span class="title class_">Boolean</span> | <span class="title class_">RegExp</span>;</span><br></pre></td></tr></table></figure><ul><li><p>TS中不手动用Number、String、Boolean，只用小写的number、string、boolean</p></li><li><p>TS中不用大写Object</p></li></ul><h3 id="用type描述普通对象"><a class="markdownIt-Anchor" href="#用type描述普通对象"></a> 用type描述普通对象</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 索引签名 -&gt; 键的类型必须为string、number、symbol</span></span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record泛型 -&gt; 表示key为string、value为number的对象</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="描述array"><a class="markdownIt-Anchor" href="#描述array"></a> 描述Array</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span>[];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">number</span>[];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">B1</span> = <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度为3的字符串数组 三元组</span></span><br><span class="line"><span class="keyword">type</span> C = [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">C1</span>: C = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二元组</span></span><br><span class="line"><span class="keyword">type</span> D = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">D1</span>: D = [<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> E = [<span class="built_in">string</span>[], <span class="built_in">number</span>[]];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">E1</span>: E = [[<span class="string">&#x27;a&#x27;</span>], [<span class="number">1</span>]];</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>由于Array太不精确，所以TS开发者一般用：<code>Array&lt;?&gt;</code> 或者 <code>String[]</code> 或者 <code>[string, number]</code>来描述数组</li></ul><h3 id="描述函数对象"><a class="markdownIt-Anchor" href="#描述函数对象"></a> 描述函数对象</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FnA</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数可以不写，类型推导</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">FnA</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnReturnVoid</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnReturnUndefined</span> = <span class="function">() =&gt;</span> <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f1</span>: <span class="title class_">FnReturnVoid</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;FnReturnVoid&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">f2</span>: <span class="title class_">FnReturnUndefined</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;FnReturnUndefined&#x27;</span>);</span><br><span class="line">  <span class="comment">// 必须要return undefined; 或者 return null;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">sayHiFn</span>: <span class="title class_">FnWithThis</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnWithThis</span> = <span class="function">(<span class="params"><span class="variable language_">this</span>: Person, name: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sayHi</span>: <span class="title class_">FnWithThis</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在浏览器中this为globalThis默认是window 【window上是有name的】</span></span><br><span class="line">  <span class="comment">// 在node中this就是global</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 我们希望this是Person，那么就不能用箭头函数了</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sayHiFn</span>: <span class="title class_">FnWithThis</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// this就指向Person</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;lyb&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHiFn</span>: sayHiFn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">sayHiFn</span>(<span class="string">&#x27;lyb&#x27;</span>);</span><br><span class="line">sayHiFn.<span class="title function_">call</span>(p, <span class="string">&#x27;lyb&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>由于Function太不精确，所以TS一般用<code>() =&gt; ?</code>来描述函数</li></ul><h3 id="描述其他对象"><a class="markdownIt-Anchor" href="#描述其他对象"></a> 描述其他对象</h3><ul><li>直接用他的构造函数描述</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/ab+c/</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r2</span>: <span class="title class_">RegExp</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abc+c&#x27;</span>);</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">m</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;xxx&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">wm</span>: <span class="title class_">WeakMap</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125;, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">s</span>: <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ws</span>: <span class="title class_">WeakSet</span>&lt;<span class="built_in">string</span>[]&gt; = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br></pre></td></tr></table></figure><h2 id="any和unknown是什么"><a class="markdownIt-Anchor" href="#any和unknown是什么"></a> any和unknown是什么</h2><ul><li>any类型：支持全部TS类型</li><li>unknown类型：值是远端获取的，没有办法提前知道，使用的时候可以断言下</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="built_in">any</span> = <span class="number">1</span>;</span><br><span class="line">c.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>); <span class="comment">// 用any，丢失了自动检查语法的机会</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先把a的类型盖住，因为不确定他是什么类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">unknown</span> = <span class="keyword">await</span> ajax.<span class="title function_">get</span>(<span class="string">&#x27;/api/users&#x27;</span>);</span><br><span class="line"><span class="comment">// 在使用的时候可以用断言的方式具体给一个类型</span></span><br><span class="line"><span class="keyword">const</span> b = (a <span class="keyword">as</span> <span class="built_in">number</span>);</span><br></pre></td></tr></table></figure><h2 id="never类型"><a class="markdownIt-Anchor" href="#never类型"></a> never类型</h2><ul><li>never类型：空集，一个不包含任何类型的空集，什么类型都不是</li><li>作用：不是用来指定声明的，而是推断的</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">toFixed</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">valueOf</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// a -&gt; never 类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="enum类型"><a class="markdownIt-Anchor" href="#enum类型"></a> enum类型</h2><h3 id="何时用enum很帅"><a class="markdownIt-Anchor" href="#何时用enum很帅"></a> 何时用enum很帅</h3><ul><li><p>何时用enum类型？</p><ol><li>映射数字对字符串的时候，比如0代表未完成，1代表已完成，</li><li>做权限控制的时候</li></ol></li><li><p>逗号分割，值会自增</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> A &#123;</span><br><span class="line">  todo = <span class="number">1</span>,</span><br><span class="line">  done, <span class="comment">// 会自动赋值为 2</span></span><br><span class="line">  archived, <span class="comment">// 依次类推...</span></span><br><span class="line">  deleted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>做权限控制：</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Permission</span> &#123;</span><br><span class="line">  <span class="title class_">None</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Read</span> = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,    <span class="comment">// 将1左移0位 -&gt; 0001</span></span><br><span class="line">  <span class="title class_">Write</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,   <span class="comment">// 将1左移1位 -&gt; 0010</span></span><br><span class="line">  <span class="title class_">Delete</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// 将1左移2位 -&gt; 0100</span></span><br><span class="line">  <span class="title class_">Manage</span> = <span class="title class_">Read</span> | <span class="title class_">Write</span> | <span class="title class_">Delete</span>, <span class="comment">// 这里不是联合类型，而是二进制的或运算 -&gt; 0111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">permission</span>: <span class="title class_">Permissions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">permission</span>: <span class="number">0b0100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">permission</span> &amp; <span class="title class_">Permission</span>.<span class="property">Write</span>) === <span class="title class_">Permission</span>.<span class="property">Write</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拥有写权限&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">permission</span> &amp; <span class="title class_">Permission</span>.<span class="property">Manage</span>) === <span class="title class_">Permission</span>.<span class="property">Manage</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拥有管理权限&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="何时用enum很呆"><a class="markdownIt-Anchor" href="#何时用enum很呆"></a> 何时用enum很呆</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">  <span class="title class_">Apple</span> = <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="title class_">Orange</span> = <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的fruit会告警，但是不会报错。因为&#x27;apple&#x27;不属于Fruit枚举成员值之一</span></span><br><span class="line"><span class="comment">// 如果需要将字符串&#x27;apple&#x27;转换为Fruit枚举类型，则应该使用类型断言来告诉编译器变量的实际类型</span></span><br><span class="line"><span class="comment">// let fruit: Fruit = &#x27;apple&#x27; as Fruit;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fruit</span>: <span class="title class_">Fruit</span> = <span class="string">&#x27;apple&#x27;</span>; </span><br><span class="line"></span><br><span class="line">fruit = <span class="title class_">Fruit</span>.<span class="property">Orange</span>; </span><br></pre></td></tr></table></figure><ul><li>可以使用type：</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fruit</span> = <span class="string">&#x27;apple&#x27;</span> | <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fruit</span>: <span class="title class_">Fruit</span> = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line">fruit = <span class="string">&#x27;orange&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>总结：number enum推荐使用，string enum是不推荐的，number|string enum也是不推荐的</li></ul><h2 id="type与interface的区别"><a class="markdownIt-Anchor" href="#type与interface的区别"></a> type与interface的区别</h2><h3 id="何时用type"><a class="markdownIt-Anchor" href="#何时用type"></a> 何时用type？</h3><ul><li><p>type：类型别名 Type Alias</p><ul><li>类型只能表示集合，不可表示正数负数以及NaN</li></ul></li><li><p>type可以表示的类型：</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Name</span> = <span class="string">&#x27;lyb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假值类型 （NaN是Number，他不是类型，不可以写）</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FalseLike</span> = <span class="number">0</span> | <span class="literal">false</span> | <span class="string">&#x27;&#x27;</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Points</span> = <span class="title class_">Point</span>[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二元组</span></span><br><span class="line"><span class="keyword">type</span> line = [<span class="title class_">Point</span>, <span class="title class_">Point</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Circle</span> = &#123;</span><br><span class="line">  <span class="attr">center</span>: <span class="title class_">Point</span>,</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnWithProps</span> = &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">string</span>): <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>什么时候都可以用type，只有一个情况不允许</li></ul><h3 id="interface"><a class="markdownIt-Anchor" href="#interface"></a> interface</h3><ul><li>接口：描述对象的属性（包括函数或非函数） declare the shapes of objects</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>interface跟type的区别：interface就是将type能实现的功能用类的方式重新实现一遍</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A1 <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;, X &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &amp; &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125; &amp; X;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Data</span> &#123; [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Points</span> <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="title class_">Point</span>&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123; (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">interface</span> D <span class="keyword">extends</span> <span class="title class_">Date</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>区别：<ol><li>interface只描述对象，type则描述所有类型；【所以interface可以合并、可以扩展，type不可重新赋值、合并】</li><li>type只是别名，interface则是类型声明</li><li>对外API尽量用interface，方便操作。对内API尽量用type，防止代码分散</li><li>Type交叉类型属性冲突后类型会变为never，interface继承后属性冲突会直接报错</li></ol></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">A = <span class="built_in">string</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩展axios</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;axios&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line">    _autoLoading?: <span class="built_in">boolean</span></span><br><span class="line">    _mock?: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展String</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="title function_">padZero</span>(<span class="attr">length</span>: <span class="built_in">number</span>): <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ts类型系统的运算"><a class="markdownIt-Anchor" href="#ts类型系统的运算"></a> TS类型系统的运算</h2><h3 id="联合类型"><a class="markdownIt-Anchor" href="#联合类型"></a> 联合类型</h3><ul><li>union types：联合类型 并集</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = A | B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: C = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lyb&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型收窄"><a class="markdownIt-Anchor" href="#类型收窄"></a> 类型收窄</h4><ul><li>利用typeof做类型收窄</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">number</span> | <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    a.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>typeof的缺点：无法对null、Array、等区分类型</p></li><li><p>利用instanceof做类型收窄（来解决typeof的这个问题）：</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">Array</span>&lt;<span class="built_in">Date</span>&gt; | <span class="built_in">Date</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (a <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    <span class="comment">// 日期</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>instanceof的问题：</p><ul><li>不支持基本类型 String、Number、Boolean</li><li>不支持TS独有的类型（TS类型会被擦除）</li></ul></li><li><p>利用<code>in</code>来做类型收窄</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123; <span class="attr">x</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: Person | Animal</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="comment">// Person</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="comment">// Animal</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// never</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用JS中判断类型的函数来区分</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(a)) &#123;</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用逻辑来做类型收窄</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a?: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="comment">// string[]</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f1</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  a; <span class="comment">// number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区分类型的通解"><a class="markdownIt-Anchor" href="#区分类型的通解"></a> 区分类型的通解</h3><h4 id="类型谓词-is"><a class="markdownIt-Anchor" href="#类型谓词-is"></a> 类型谓词 is</h4><ul><li>is: 支持所以的TS类型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Rect</span> = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Circle</span> = &#123;</span><br><span class="line">  <span class="attr">center</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: Rect | Circle</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRect</span>(a)) &#123;</span><br><span class="line">    <span class="comment">// Rect</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可用箭头函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRect</span> (<span class="attr">x</span>: <span class="title class_">Rect</span> | <span class="title class_">Circle</span>): x is <span class="title class_">Rect</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;height&#x27;</span> <span class="keyword">in</span> x &amp;&amp; <span class="string">&#x27;width&#x27;</span> <span class="keyword">in</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可辨别联合-xkind"><a class="markdownIt-Anchor" href="#可辨别联合-xkind"></a> 可辨别联合 x.kind</h4><ul><li><p>让复杂类型的收窄变成简单类型的对比</p></li><li><p>要求：T = A | B | C</p><ol><li>A/B/C 有相同属性kind或其他</li><li>kind 的类型收基本类型</li><li>各类型中的kind无交集</li></ol><ul><li>则称T为可辨别联合</li><li>总结：同名、可辨别的简单类型的key</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Rect</span> = &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&#x27;Rect&#x27;</span></span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Circle</span> = &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&#x27;Circle&#x27;</span></span><br><span class="line">  <span class="attr">center</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span> | Rect | Circle</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// number</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// string</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.<span class="property">kind</span> === <span class="string">&#x27;Rect&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Rect</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.<span class="property">kind</span> === <span class="string">&#x27;Circle&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Circle</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>补充：类型收窄还可以用断言。</li></ul><h2 id="any"><a class="markdownIt-Anchor" href="#any"></a> any</h2><ol><li>any类型收所有类型的联合吗？除了 never/unknow/any/void 为什么？</li></ol><ul><li>并不是，因为类型一旦做了联合，就不能用了。只能用交集中的方法</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数a：联合类型 【string跟number的交集】</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  a.<span class="title function_">toString</span>(); <span class="comment">// 可以用，因为String跟Number都有toString方法</span></span><br><span class="line">  a.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>); <span class="comment">// 报错，因为Number没有split方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>any<ul><li>如果你不想报警，那么就用any</li><li>any：TS绝大部分规则对any不生效</li><li>any不能赋值给never</li></ul></li></ul><ol start="2"><li>什么 === 所有类型的联合？为什么</li></ol><ul><li>unknown类型（不知道数据是什么类型），可以类型收窄</li></ul><blockquote><p>any: noTypeError<br />unknown: 所有类型的联合，需要类型收窄使用</p></blockquote><h2 id="ts类型还有哪些运算"><a class="markdownIt-Anchor" href="#ts类型还有哪些运算"></a> TS类型还有哪些运算</h2><h3 id="交叉类型-intersection-types"><a class="markdownIt-Anchor" href="#交叉类型-intersection-types"></a> 交叉类型 intersection types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> &amp; <span class="built_in">number</span>; <span class="comment">// never</span></span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hasLeftHandType = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;一米八&#x27;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&#x27;一米五&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: hasLeftHandType = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;一米八&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: hasLeftHandType = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;一米八&#x27;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&#x27;一米五&#x27;</span> <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: hasLeftHandType = obj; <span class="comment">// 直接赋值，不会报错，可以有right了</span></span><br></pre></td></tr></table></figure><ul><li>接口可以有交集</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Colorful</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口能求交集</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ColorfulCircle</span> = <span class="title class_">Colorful</span> &amp; <span class="title class_">Circle</span>;</span><br></pre></td></tr></table></figure><ul><li>模拟user继承Person</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">Person</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>交叉类型的特殊场景：属性冲突</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个类型都有id，类型分别是number跟string，交叉后，类型成为never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">Person</span>; <span class="comment">// 交叉的时候不报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">User</span> = &#123; <span class="comment">// User也是never类型了</span></span><br><span class="line">  <span class="comment">// 用的时候报错</span></span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span> <span class="comment">// never</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>interface接口的继承（跟type的交叉类型比较）</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User直接报错 string的id不能赋值给number</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Type跟interface的第四个区别：Type交叉类型属性冲突后类型会变为never，interface继承后属性冲突会直接报错</p></blockquote>]]></content>
    
    
    <summary type="html">TypeScript基础知识复习</summary>
    
    
    
    <category term="TypeScript" scheme="https://lybinweb.github.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://lybinweb.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>限制并发请求并且可配置</title>
    <link href="https://lybinweb.github.io/posts/d984b3ac/index.html"/>
    <id>https://lybinweb.github.io/posts/d984b3ac/index.html</id>
    <published>2023-06-06T06:00:00.000Z</published>
    <updated>2023-06-06T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限制并发请求并且可配置"><a class="markdownIt-Anchor" href="#限制并发请求并且可配置"></a> 限制并发请求并且可配置</h2><ul><li>应用中如果需要一次性请求很多很多接口的时候，会导致网络拥堵、服务器压力增大、导致内存泄露或者浏览器崩溃，所以需要限制并发请求。</li></ul><h3 id="server"><a class="markdownIt-Anchor" href="#server"></a> server</h3><ul><li>用express写几个测试接口：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span> );</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test1&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test2&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test3&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test4&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test4&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test5&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test5&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="client"><a class="markdownIt-Anchor" href="#client"></a> client</h3><ul><li>将请求接口的每个方法放入队列中，等待这并发请求处理</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CurrencyRequest</span> <span class="keyword">from</span> <span class="string">&#x27;./CurrencyRequest.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://localhost:8000/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest1</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test1&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest2</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test2&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest3</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test3&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest4</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test4&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest5</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test5&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> taskQueue = [</span><br><span class="line">  getTest1, </span><br><span class="line">  getTest2,</span><br><span class="line">  getTest3,</span><br><span class="line">  getTest4,</span><br><span class="line">  getTest5</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> currencyRequest = <span class="keyword">new</span> <span class="title class_">CurrencyRequest</span>(&#123;</span><br><span class="line">  <span class="attr">maxCurrencyCount</span>: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> task <span class="keyword">of</span> taskQueue) &#123;</span><br><span class="line">  currencyRequest.<span class="title function_">push</span>(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currencyRequest.<span class="property">responses</span>);</span><br></pre></td></tr></table></figure><ul><li>写一个类，用来实例化一个并发请求</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">CurrencyRequest</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (&#123;</span><br><span class="line">    maxCurrencyCount,</span><br><span class="line">    taskQueue,</span><br><span class="line"></span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span> = maxCurrencyCount;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskQueue</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">responses</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_doRequest</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push (task) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _doRequest () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">taskQueue</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> minCurrencyCount = <span class="title function_">_getMinCount</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="property">length</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; minCurrencyCount; i ++) &#123;</span><br><span class="line">      <span class="keyword">const</span> task = <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span> --;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_runTask</span>(task);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _runTask (task) &#123;</span><br><span class="line">    <span class="title function_">task</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">responses</span>[task.<span class="property">name</span>] = &#123;</span><br><span class="line">        <span class="attr">result</span>: res,</span><br><span class="line">        <span class="attr">error</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">responses</span>[task.<span class="property">name</span>] = &#123;</span><br><span class="line">        <span class="attr">result</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">error</span>: err</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span> ++;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_doRequest</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_getMinCount</span> (count1, count2) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(count1, count2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">限制并发请求并且可配置</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Promise" scheme="https://lybinweb.github.io/tags/Promise/"/>
    
    <category term="并发请求" scheme="https://lybinweb.github.io/tags/%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>5. 数据类型和结构</title>
    <link href="https://lybinweb.github.io/posts/9f26e741/index.html"/>
    <id>https://lybinweb.github.io/posts/9f26e741/index.html</id>
    <published>2023-06-05T01:46:00.000Z</published>
    <updated>2023-06-05T01:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-javascript的数据类型和结构"><a class="markdownIt-Anchor" href="#一-javascript的数据类型和结构"></a> 一、JavaScript的数据类型和结构</h2><ul><li>英文： Data types and data structure</li><li>数据类型： 编程语言中用于存储和运算的工具</li><li>数据结构： 编程语言中用于表示数据意义（队列、栈、树等）与操作的工具</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串类型的存储</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment">// 字符串运算</span></span><br><span class="line">str += <span class="string">&#x27;4&#x27;</span>; </span><br><span class="line"><span class="comment">// str =&gt; &#x27;1234&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表现的是一种数据意义：数字123顺序排列（数据的结构）</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 数据的操作：入栈</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="二-变量与类型的无关性"><a class="markdownIt-Anchor" href="#二-变量与类型的无关性"></a> 二、变量与类型的无关性</h2><h3 id="1-弱类型语言的特点"><a class="markdownIt-Anchor" href="#1-弱类型语言的特点"></a> 1、弱类型语言的特点</h3><ul><li>变量：映射内存地址的标识符 -&gt; 0x0000</li><li>类型：描述值在内存中如何存储的工具</li><li>总结：弱类型语言是动态的通过值判断类型，根据类型来分配存储空间的</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义一个标识符a</span><br><span class="line"><span class="number">2.</span> a作为一个变量</span><br><span class="line"><span class="number">3.</span> 分配双精度<span class="number">64</span>位的存储空间</span><br><span class="line"><span class="number">4.</span> 将<span class="number">1</span>存储到这个空间</span><br><span class="line"><span class="number">5.</span> 重新分配字符串空间</span><br><span class="line"><span class="number">6.</span> 将字符串 <span class="string">&#x27;1&#x27;</span> 存储到该空间</span><br><span class="line"><span class="number">7.</span> 将标识符a映射到新的空间地址</span><br><span class="line"></span><br><span class="line">标识符    地址    栈</span><br><span class="line">a        <span class="number">0x0001</span>  <span class="string">&#x27;1&#x27;</span></span><br><span class="line">a        <span class="number">0x0000</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-强类型语言"><a class="markdownIt-Anchor" href="#2-强类型语言"></a> 2、强类型语言</h3><ul><li>根据变量指定的类型分配空间，将值存储到该空间</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>; <span class="comment">// x</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>; <span class="comment">// x  -128~127</span></span><br></pre></td></tr></table></figure><h2 id="三-基本数据类型与原始值"><a class="markdownIt-Anchor" href="#三-基本数据类型与原始值"></a> 三、基本数据类型与原始值</h2><ul><li>Primitive data type and primitive value</li></ul><h3 id="1-基本数据类型"><a class="markdownIt-Anchor" href="#1-基本数据类型"></a> 1、基本数据类型</h3><ul><li>语言最底层指定的数据类型（不需要任何语言工具创建）</li><li>类型的表示：一般来说首写字母大写<ol><li>Null</li><li>undefined</li><li>Boolean</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li></ol></li><li>typeof运算符后的结果：<ol><li>Null -&gt; object</li><li>undefined -&gt; undefined</li><li>Boolean -&gt; boolean</li><li>Number -&gt; number</li><li>BigInt -&gt; bigint</li><li>String -&gt; string</li><li>Symbol -&gt; symbol</li></ol></li><li>原始值（基础数据类型值）：语言最底层就指定的基本数据类型对应的值<ol><li>Null null</li><li>undefined undefined</li><li>Boolean true/false</li><li>Number 123/1.2</li><li>BigInt 任意数值的整数</li><li>String ‘abc’</li><li>Symbol Symbol(abc)</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> varBigInt = <span class="title class_">BigInt</span>(<span class="number">223</span>);</span><br><span class="line"><span class="keyword">let</span> varSymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-原始值的不可变性"><a class="markdownIt-Anchor" href="#2-原始值的不可变性"></a> 2、原始值的不可变性</h3><ul><li>不可变：数据存储在内存中，不可更改（针对于栈内存存储）</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">标识符    地址    栈内存</span><br><span class="line">a       <span class="number">0x0001</span>    <span class="number">2</span></span><br><span class="line">        <span class="number">0x0000</span>    <span class="number">1</span>  （值是不可以变化的，需要等着垃圾回收）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 栈内存中的1，它是不可以改变的</span></span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 栈中重新保存2</span></span><br></pre></td></tr></table></figure><h2 id="四-声明变量默认被分配的值变量的默认初始化"><a class="markdownIt-Anchor" href="#四-声明变量默认被分配的值变量的默认初始化"></a> 四、声明变量默认被分配的值（变量的默认初始化）</h2><ol><li>系统默认初始化</li></ol><ul><li>undefined（是JS系统种默认分配的值）</li><li>undefined是缺省值的情况下默认分配的值</li></ul><ol start="2"><li>手动初始化</li></ol><ul><li>声明变量与初始化操作<ul><li>var a = 1;</li><li>Variable declaration + value initialization</li></ul></li><li>原则上不明确类型的引用类型缺省的时候初始化：null<ul><li>let obj = null; // 语义化更好</li></ul></li><li>引用值：数据的容器<ul><li>{ a: 1, b: 2}</li><li>[1, 2, 3]</li></ul></li><li>总结：系统默认会对变量的类型指定为原始值，原始值的系统默认值为undefined，null为空指针，指针并未指向任何内存空间</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标识符      栈          堆</span></span><br><span class="line"><span class="comment">          null -&gt;   </span></span><br><span class="line"><span class="comment">obj       0x0000  -&gt;  &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="literal">null</span>; <span class="comment">// 语义化更高</span></span><br><span class="line">obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="五-值的真假性truthy-falsyfalsey"><a class="markdownIt-Anchor" href="#五-值的真假性truthy-falsyfalsey"></a> 五、值的真假性（truthy / falsy|falsey）</h2><ul><li>Boolean类型是逻辑性的值：<ul><li>true/false 真假、正反、是否 非黑即白的逻辑</li></ul></li><li>用Boolean的逻辑看待值的真假性</li><li>用Boolean()转换布尔值：<ul><li>true -&gt; truthy值（真值）</li><li>false -&gt; falsy值（假值）</li></ul></li><li>falsy值：<ul><li>false</li><li>0/-0/0n(BigInt的表示法)</li><li>“”/’’/``</li><li>null</li><li>undefined</li><li>NaN</li></ul></li><li>truthy值：除了假值外，都是真值</li><li>Java：<code>if (...返回真假...) &#123;&#125;</code></li><li>JavaScript：<code>if (...返回布尔值/返回真假值) &#123;&#125;</code><ul><li>if (1/true) {}</li><li>if (0/false) {}</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="六-对象引用数据类型object-data-types"><a class="markdownIt-Anchor" href="#六-对象引用数据类型object-data-types"></a> 六、对象（引用）数据类型（Object data types）</h2><ul><li>对象：一种内存存储为引用型的数据类型</li><li>引用：标识符可以通过地址引用一块内存空间（具备指针特性）</li><li>总结：<ul><li>栈内存通过地址指针寻找堆内存中的特定空间，并获取到内存存储的值</li><li>当空间引用被全部清除，该值就会被垃圾回收机制在一个周期之内回收，并释放当前空间</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">标识符        栈        指针        堆</span></span><br><span class="line"><span class="comment">          0x0000        -&gt; 断掉   &#123; a: 1 &#125; 么有引用，垃圾回收</span></span><br><span class="line"><span class="comment">obj2      0x0000</span></span><br><span class="line"><span class="comment">arr          0x0001      -&gt;      [1, 2, 3]</span></span><br><span class="line"><span class="comment">          0x0002      -&gt;      &#123; b: 2 &#125; 没有引用，垃圾回收</span></span><br><span class="line"><span class="comment">obj          null        -&gt;        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">obj = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">obj = <span class="literal">null</span>; <span class="comment">// 断开引用，不等于堆内存空间的值被删除，需要等待垃圾回收机制周期性清除</span></span><br></pre></td></tr></table></figure><h2 id="七-引用值对象值"><a class="markdownIt-Anchor" href="#七-引用值对象值"></a> 七、引用值（对象值）</h2><ul><li>Object</li><li>Array</li><li>Date</li><li>Map|WeakMap</li><li>Set|WeakSet</li><li>Function</li><li>() =&gt; {}</li><li>迭代器生成器函数</li></ul><h3 id="1-引用值的可变性"><a class="markdownIt-Anchor" href="#1-引用值的可变性"></a> 1、引用值的可变性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;a: 1&#125; 变化了 -&gt; &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-引用值的属性访问"><a class="markdownIt-Anchor" href="#2-引用值的属性访问"></a> 2、引用值的属性访问</h3><ul><li>总结：只有引用值类型的数据才有属性</li><li>访问属性的方法：<ol><li>点语法 <code>const obj = &#123;a: 1&#125;; console.log(obj.a);</code></li><li>索引法 <code>const obj = &#123;a: 1&#125;; console.log(obj['a']);</code></li><li>类型的工具上有get方法：比如Map上的get方法</li></ol></li><li>数组的访问：索引法</li></ul><h2 id="八-原始值的包装特性"><a class="markdownIt-Anchor" href="#八-原始值的包装特性"></a> 八、原始值的包装特性</h2><ul><li>除了Undefined、Null以外，每一种基本数据类型都有对象的对象包装器</li><li>对象包装器：因为只有引用类型值有访问属性的能力，原始值没有属性访问的能力。为了让原始值有可访问特定属性的能力而设计的对象转换工具</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建标识符str</span><br><span class="line"><span class="number">2.</span> 开辟字符串存储空间</span><br><span class="line"><span class="number">3.</span> 将<span class="string">&#x27;abc&#x27;</span>存储到该空间</span><br><span class="line"><span class="number">4.</span> 将空间地址映射到标识符str</span><br><span class="line"><span class="number">5.</span> 代码走到.<span class="property">length</span></span><br><span class="line"><span class="number">6.</span> <span class="keyword">new</span> <span class="title class_">String</span>(str) 进行包装</span><br><span class="line"><span class="number">7.</span> 调用<span class="title class_">String</span> -&gt; length属性</span><br><span class="line"><span class="number">8.</span> 输出length -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">9.</span> 包装对象销毁</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">str.<span class="property">len</span> = <span class="number">123</span>; <span class="comment">// new String() 没有引用，所以赋值后最终还会销毁包装对象的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">len</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JavaScript数据类型和结构,truthy,falsy,falsey</summary>
    
    
    
    <category term="JavaScript - 【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript-%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/tags/%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>4. 变量声明</title>
    <link href="https://lybinweb.github.io/posts/164dee6/index.html"/>
    <id>https://lybinweb.github.io/posts/164dee6/index.html</id>
    <published>2023-05-26T03:18:00.000Z</published>
    <updated>2023-05-26T03:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-变量声明"><a class="markdownIt-Anchor" href="#4-变量声明"></a> 4. 变量声明</h1><ul><li>Variable Declaration</li><li>JavaScript：ES3 var</li><li>JavaScript：ES6 let const<ul><li>ES6：面向对象推给JS开发者</li></ul></li></ul><h2 id="一-javascript-4种声明变量的方法"><a class="markdownIt-Anchor" href="#一-javascript-4种声明变量的方法"></a> 一、<strong>JavaScript 4种声明变量的方法</strong></h2><ol><li>var ES3 不推荐</li><li>implicit 暗示全局变量 ES3 不推荐</li><li>let ES6</li><li>const ES6</li></ol><h3 id="1-var"><a class="markdownIt-Anchor" href="#1-var"></a> 1、<strong>var</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a; // 初始化可选</span><br><span class="line">var b = 1; // 初始化：声明变量时，对一个变量对应的值的设置</span><br><span class="line"></span><br><span class="line">c; // c -&gt; 访问 -&gt; c is not defined</span><br><span class="line">d = 3; // 不用声明关键字 暗示全局变量</span><br></pre></td></tr></table></figure><h3 id="2-let"><a class="markdownIt-Anchor" href="#2-let"></a> 2、<strong>let</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a; // 声明变量，并且初始化</span><br><span class="line">let b = 1;</span><br></pre></td></tr></table></figure><h3 id="3-const"><a class="markdownIt-Anchor" href="#3-const"></a> 3、<strong>const</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a; // 语法错误 丢失了初始化器</span><br><span class="line"></span><br><span class="line">const b = 1; // 声明常量，并且初始化</span><br></pre></td></tr></table></figure><h2 id="二-变量初始化"><a class="markdownIt-Anchor" href="#二-变量初始化"></a> 二、<strong>变量初始化</strong></h2><ul><li><p>变量第一次被赋值的过程</p><ol><li>声明一个变量</li><li>将某一个值赋值给一个变量 （var let 可选，暗示 const 必选）</li><li>开发者手动进行赋值</li><li>系统默认进行赋值 undefined</li></ol></li><li><p>声明变量必定会有给该变量进行初始化值的过程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a; // undefined 是JavaScript系统种唯一的默认值</span><br><span class="line"></span><br><span class="line">let b; // undefined</span><br></pre></td></tr></table></figure></li></ul><h2 id="三-单一声明"><a class="markdownIt-Anchor" href="#三-单一声明"></a> 三、<strong>单一声明</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1,</span><br><span class="line">    b = 2,</span><br><span class="line">    c = 3;</span><br></pre></td></tr></table></figure><h2 id="四-分号书写规则"><a class="markdownIt-Anchor" href="#四-分号书写规则"></a> 四、<strong>分号书写规则</strong></h2><ul><li>JS引擎会分析代码自动加上必要的分号</li><li>ES3-5：推荐打分号（约定俗成的规范）</li><li>ES6：没有推荐</li><li>注意：<ul><li>要打都打，要不打都不打</li><li>立即执行函数建议在前面打分号</li><li>语句不打分号</li></ul></li></ul><h2 id="五-var"><a class="markdownIt-Anchor" href="#五-var"></a> 五、<strong>var</strong></h2><ul><li>全局作用域变量（globally-scoped Variable全局变量）</li><li>函数作用域变量（function-scoped Variable函数局部变量）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">var a; // undefined</span><br><span class="line">var b = 1; // var statement （var 语句）</span><br><span class="line"></span><br><span class="line">var b = 2; // var声明是可以重复的（BUG）</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  var a = 2; // 函数作用域变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-什么是作用域"><a class="markdownIt-Anchor" href="#1-什么是作用域"></a> 1、<strong>什么是作用域</strong></h3><ul><li>什么是作用域：限定变量可访问权限的范围</li></ul><h3 id="2-全局作用域"><a class="markdownIt-Anchor" href="#2-全局作用域"></a> 2、<strong>全局作用域</strong></h3><ul><li><p>全局作用域：基于<code>window</code>或者<code>globalThis</code>的可访问范围</p><ol><li>一个HTML的访问，会产生一个对应着该HTML的JavaScript全局作用域。任何脚本被该HTML引入，就共享一个全局作用域</li><li>全局作用域变量：在该全局作用域直接声明的变量。在全局作用域声明的变量，系统会在全局对象（window、globalThis）中创建对应的属性</li><li>之所以可以不用全局对象访问变量，是因为全局作用域属性对所有其他</li></ol></li><li><p>总结：在全局作用域直接用var声明的变量，是以全局对象属性的形式被创建的</p></li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">globalThis.<span class="property">a</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span>; <span class="comment">// 1</span></span><br><span class="line">a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="3-函数作用域"><a class="markdownIt-Anchor" href="#3-函数作用域"></a> 3、<strong>函数作用域</strong></h3><ul><li>函数作用域：function body（函数体）的访问范围<ol><li>函数内部的作用域叫函数作用域，也叫函数局部作用域</li><li>局部作用域内可访问全局作用域的变量</li><li>全局作用域无法访问函数作用域的变量</li><li>函数可以嵌套函数，作用域可以嵌套作用域</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  console.log(a);</span><br><span class="line"></span><br><span class="line">  var b = 2;</span><br><span class="line"></span><br><span class="line">  function test2 () &#123;</span><br><span class="line">    var c = 3;</span><br><span class="line">    console.log(b);</span><br><span class="line">    console.log(c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  test2();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(b); // Uncaught ReferenceError: b is not defined  产生了错误，这个错误未被捕获，所以程序停止</span><br><span class="line"></span><br><span class="line">// 尝试运行一段程序 看他有没有错误</span><br><span class="line">try &#123;</span><br><span class="line">  console.log(b);</span><br><span class="line">&#125; catch (e) &#123; // 捕获错误</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块级作用域：基于block的访问范围</li></ul><h3 id="4-变量提升"><a class="markdownIt-Anchor" href="#4-变量提升"></a> 4、<strong>变量提升</strong></h3><ul><li><p>Variable Hoisting</p><ol><li>代码在执行的最开始，会进行预编译操作</li><li>预编译的过程<ol><li>【预编译阶段】找到var -&gt; 变量a</li><li>【预编译阶段】放入预编译容器 { a }</li><li>【预编译阶段】初始化 { a: undefined }</li><li>【执行期阶段】打印a -&gt; undefined</li><li>【执行期阶段】a = 1 将1赋值给变量a</li></ol></li></ol></li><li><p>总结：尽量按照程序的逻辑顺序进行变量声明和访问；变量提升var声明的一个缺点（BUG）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(a); // undefined</span><br><span class="line">var a = 1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 2;</span><br><span class="line">var a = 1;</span><br><span class="line">console.log(a); // 1</span><br><span class="line"></span><br><span class="line">1. 预编译 找到var -&gt; a</span><br><span class="line">2. 预编译 &#123; a &#125;</span><br><span class="line">3. 预编译 &#123; a: undefined &#125;</span><br><span class="line">4. 执行期 &#123; a: 2 &#125;</span><br><span class="line">5. 执行期 &#123; a: 1 &#125;</span><br><span class="line">6. 执行期 打印 a -&gt; 1</span><br></pre></td></tr></table></figure><h3 id="5-暗示全局变量暗示implicit"><a class="markdownIt-Anchor" href="#5-暗示全局变量暗示implicit"></a> 5、<strong>暗示全局变量（暗示implicit）</strong></h3><ol><li>未用任何变量声明关键字段变量</li><li>暗示全局变量必须手动进行变量初始化</li><li>暗示全局变量默认为全局变量</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1; // 不报错 因为已经初始化</span><br><span class="line">b; // 但是你不初始化就会报错 访问变量b</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 1. 函数必须执行</span><br><span class="line">   * 2. 暗示全局变量 定义c作为全局对象的属性</span><br><span class="line">   */</span><br><span class="line">  c = 1;</span><br><span class="line">  console.log(c, &#x27;test&#x27;); // 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(c, &#x27;global.c&#x27;); // 1</span><br><span class="line">console.log(window.c, &#x27;window.c&#x27;); // 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function test () &#123;</span><br><span class="line">  // var a 局部变量</span><br><span class="line">  // b： 暗示全局变量</span><br><span class="line">  var a = b = 1;</span><br><span class="line"></span><br><span class="line">  // 单一声明</span><br><span class="line">  // var c 局部变量</span><br><span class="line">  // var d 局部变量</span><br><span class="line">  // 1 =&gt; c</span><br><span class="line">  // c =&gt; d</span><br><span class="line">  var c,</span><br><span class="line">      d = c = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">console.log(&#x27;global.a&#x27;, b); // 报错 需要try catch，就不会阻断代码执行了</span><br><span class="line">console.log(&#x27;global.b&#x27;, b); // 阻断执行</span><br></pre></td></tr></table></figure><h3 id="6-var最不合理的几点"><a class="markdownIt-Anchor" href="#6-var最不合理的几点"></a> 6、<strong>var最不合理的几点</strong></h3><ol><li>可以重复声明</li><li>变量提升 （声明之前可以访问）</li><li>暗示全局变量 （可以不用声明变量的关键字声明变量）</li></ol><h2 id="六-let"><a class="markdownIt-Anchor" href="#六-let"></a> 六、<strong>let</strong></h2><h3 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念"></a> 1、概念</h3><ul><li>ES6 block 块<ul><li>block-scoped 块级作用域</li><li>类似于函数作用域</li></ul></li><li>限制变量可访问范围的工具作用域：块</li><li>这个范围就是块作用域</li><li>在ES6中<ul><li>函数体</li><li>if</li><li>for</li><li>while</li><li>或直接用 {} 声明的块等包含的{}都是块作用域</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 证明ES5中没有块的概念</span><br><span class="line">/**</span><br><span class="line"> * 为什么ES5没有块的概念？</span><br><span class="line"> * ES5中用var声明变量需要在预编译中对变量进行初始化</span><br><span class="line"> * 这样就没办法以块作用域的概念限制外界访问a</span><br><span class="line"> * 所以在ES5中要实现块作用域概念，必须用函数限制</span><br><span class="line"> */</span><br><span class="line">if (true) &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // 1</span><br><span class="line"></span><br><span class="line">// ===============</span><br><span class="line"></span><br><span class="line">if (false) &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // undefined</span><br><span class="line"></span><br><span class="line">// ===============</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ES6中如何实现块作用域</span><br><span class="line"> *</span><br><span class="line"> * let在块中声明的变量是在代码执行期进行声明和初始化的</span><br><span class="line"> * 所以支持了块作用域访问的限制（用let，就创建了块作用域，是错误的说法。是因为用let在&#123;&#125;里声明变量，JS引擎会将&#123;&#125;解析成块作用域）</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  let a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // 报错 a is not defined</span><br></pre></td></tr></table></figure><h3 id="2-块作用域可以单独进行创建"><a class="markdownIt-Anchor" href="#2-块作用域可以单独进行创建"></a> 2、<strong>块作用域可以单独进行创建 {}</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(b);</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let a = 1;</span><br><span class="line">  var b = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(b);</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><ul><li>let声明：声明块作用域的局部变量</li></ul><h3 id="3-let声明变量的访问限制"><a class="markdownIt-Anchor" href="#3-let声明变量的访问限制"></a> 3、<strong>let声明变量的访问限制</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 不能在初始化之前访问变量a</span><br><span class="line"></span><br><span class="line">console.log(a); // 报错</span><br><span class="line">let a = 1; // 初始化的过程是在执行期 在这里初始化为undefined</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 【预编译】找let -&gt; 变量a</span><br><span class="line"> * 【预编译】存变量 &#123; a &#125; （不进行初始化）</span><br><span class="line"> * 【执行期】打印a =&gt; xxx</span><br><span class="line"> *</span><br><span class="line"> * 总结：let声明是在执行代码到达let这一行时开始初始化变量的</span><br><span class="line"> *</span><br><span class="line"> * 在let a;之前，这一段代码(console.log(a))，是暂时性死区 Temporal Dead Zone;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let a = a + 1; // 不可以 暂时性死区</span><br><span class="line"></span><br><span class="line">var a = a + 1; // 可以 这里已经赋值初始化了</span><br></pre></td></tr></table></figure><h3 id="4-块作用域与函数作用域"><a class="markdownIt-Anchor" href="#4-块作用域与函数作用域"></a> 4、<strong>块作用域与函数作用域</strong></h3><ol><li>var声明的变量，访问只能被限制在函数作用域范围内</li><li>let声明的变量，访问可以被限制在块作用域和函数作用域内</li></ol><h3 id="5-重复声明"><a class="markdownIt-Anchor" href="#5-重复声明"></a> 5、<strong>重复声明</strong></h3><ul><li>let声明不允许重复声明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line">let a = 2; // Uncaught SyntaxError</span><br></pre></td></tr></table></figure><h3 id="6-let跟var的冲突"><a class="markdownIt-Anchor" href="#6-let跟var的冲突"></a> 6、<strong>let跟var的冲突</strong></h3><ul><li>在同一作用域下，相同标识符不可以同时被var跟let声明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  var a = 2; // 重复声明</span><br><span class="line">  // 【预编译】&#123; a &#125; 放不进去，全局let已经声明a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七-const"><a class="markdownIt-Anchor" href="#七-const"></a> 七、<strong>const</strong></h2><ul><li>const -&gt; constant</li><li>con + stant</li><li>come 一起，全部</li><li>stant：stand 站立</li><li>constant -&gt; 状态不变</li><li>const：常量（常数变量）不可变的量<ul><li>const的特征与let几乎一致</li></ul></li></ul><h3 id="1-const与let不同点"><a class="markdownIt-Anchor" href="#1-const与let不同点"></a> 1、<strong>const与let不同点</strong></h3><ol><li>必须手动初始化：<code>const a = 1;</code></li><li>在初始化后，不可改变其值</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a; // 语法错误 丢失了初始化器</span><br><span class="line"></span><br><span class="line">const b = 1; // 声明常量，并且初始化</span><br></pre></td></tr></table></figure><h3 id="2-书写"><a class="markdownIt-Anchor" href="#2-书写"></a> 2、<strong>书写</strong></h3><ul><li>常量一般使用全大写，单词之前用下划线分隔</li></ul><ol><li>所有不能变更的值或者值不变的量都应该使用const</li><li>只有后续需要变更值的量使用let</li><li>var尽量不适用</li></ol>]]></content>
    
    
    <summary type="html">4. 变量声明</summary>
    
    
    
    <category term="JavaScript - 【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript-%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/tags/%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>vue2数据劫持</title>
    <link href="https://lybinweb.github.io/posts/aa078834/index.html"/>
    <id>https://lybinweb.github.io/posts/aa078834/index.html</id>
    <published>2023-05-25T08:57:00.000Z</published>
    <updated>2023-05-25T08:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue2数据劫持"><a class="markdownIt-Anchor" href="#vue2数据劫持"></a> Vue2数据劫持</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li><p>new Vue(options)</p></li><li><p>处理options.data，进行数据劫持</p></li><li><p>data执行后，才会返回一个数据对象（data也可以是个对象，但是不推荐这样做）</p></li><li><p>主程序入口 f Vue () {}</p></li><li><p>f _init () {} 挂载到了Vue原型上 作为初始化程序</p><ul><li>主要进行初始化很多事，选项相关的都需要初始化，比如data、computed、watch等</li></ul><ol><li><p>保存this到vm，后续用vm代替Vue实例化对象</p></li><li><p>在实例上挂载$options</p></li><li><p>初始化数据，将实例带入 -&gt; initState(vm)</p><ul><li>数据劫持：在赋值、获取数据时还要做别的事，如视图也要改变，数据变化的时候视图也要变更，那么就需要数据拦截</li><li>分门别类进行初始化数据，比如data、computed、watch等</li></ul><ol><li>处理data数据： initData(vm) 如果data存在，则进行初始化<ul><li>从options拿到data，判断data是对象或者是函数，从而取data数据（注意，如果是函数时，需要注意this指向）</li><li>保存data，将data挂载到vm上</li><li>对vm._data 做代理（当访问vm.title就代理到vm._data.title）</li><li>对data进行循环，代理每一项：proxyData(vm, ‘_data’, key)<ul><li>使用Object.defineProperty进行数据代理</li></ul></li><li>观察data（观察数据）：observe(vm._data)<ul><li>如果不是对象则不观察</li><li>否则则观察则进行拦截：return new Observer(data) 【多了一层observe，因为在第一层observe中我们要排除不观察的条件，比如data不是对象或者是null，我们就可以不进行观察】</li></ul></li></ul></li></ol></li></ol></li><li><p>f Observer (data) {}:</p></li></ol><ul><li>区分对象或者数组，因为Object.defineProperty是不对数组进行拦截的</li></ul><ol><li><p>data如果是数组</p><ul><li>对更改原数组的方法进行重写，这一系列方法都会对数据变更，内部可能增加、删除一些东西；操作数组后，更改原数组的这个过程当中，视图是有可能更改的，那么就必须要做视图更新，还有别的一系列操作。新增的这一项，是否需要观察他</li><li>将更改源数组的方法保存到配置中：ARR_METHODS</li><li>将Array.prototype所有的方法保存到新的引用：originArrMethods</li><li>arrMethods：重写数组方法希望他是一个新的对象，那么我们需要创建一个对象利用Object.create, 并且指定他的原型为数组原型originArrMethods</li><li>遍历保存的数组方法集合，在arrMethods中重写对应的数组方法<ul><li>数组参数是不定的，需要保存实参列表</li><li>执行原数组方法，才能达到更改数据，用apply，谁调用指向谁</li><li>当原数组方法执行完毕后，还需要干别的事：<ul><li>当数组方法是push、unshift、splice时，会在数组中新增项的</li><li>那么就需要保存新增项（可能是对象或数组），从而继续观察他：observeArr(newArr)<ul><li>遍历newArr，继续观察observe()</li></ul></li></ul></li></ul></li></ul><ol><li>设置data的原型为： arrMethods，那么操作data数据的数组方法，就用到了我们自己重写的数组方法，从而观察数据，更新视图</li><li>如果data是数组？递归观察data：observeArr(data)</li></ol></li><li><p>data如果是对象</p><ul><li>Observer原型方法：walk，观察对象<ul><li>拿出data的key、value，遍历每一项进行拦截操作：defineReactiveData(data, key, value)<ul><li>注意：这里的value还可能是对象获数组，那么需要递归观察：observe(value)</li><li>Object.defineProperty进行数据代理<ul><li>在set的时候，需要注意newValue可能是对象数组，那么需要递归观察：observe(newValue)</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="源码地址"><a class="markdownIt-Anchor" href="#源码地址"></a> 源码地址</h3><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/Vue/Vue2-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81">Vue2数据劫持</a></p>]]></content>
    
    
    <summary type="html">vue2数据劫持,数据劫持</summary>
    
    
    
    <category term="Vue" scheme="https://lybinweb.github.io/categories/Vue/"/>
    
    
    <category term="数据劫持" scheme="https://lybinweb.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/"/>
    
    <category term="Vue" scheme="https://lybinweb.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript图片压缩</title>
    <link href="https://lybinweb.github.io/posts/f4d49811/index.html"/>
    <id>https://lybinweb.github.io/posts/f4d49811/index.html</id>
    <published>2023-05-24T06:00:00.000Z</published>
    <updated>2023-08-10T03:12:37.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原生javascript图片压缩"><a class="markdownIt-Anchor" href="#原生javascript图片压缩"></a> 原生JavaScript图片压缩</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li>获取图片文件对象</li><li>利用FileReader读取图片文件然后转成base64格式或者转成blob格式</li><li>创建压缩图片<ol><li>创建canvas画布</li><li>创建图片对象，将原图片的src base64赋给该图片对象src</li><li>利用canvas画布将原图片绘制到画布中</li><li>生成压缩图片<ol><li>利用canvas对象方法toDataURL降低画布质量达到压缩效果</li><li>如果压缩后比压缩前大，那么递归压缩</li></ol></li></ol></li></ol><h3 id="案例代码实现"><a class="markdownIt-Anchor" href="#案例代码实现"></a> 案例代码实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* img 属于inline-block */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: initial;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.img-preview</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;imgFileSelector&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;请选择图片&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;originImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hide img-preview&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;compressedImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hide img-preview&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oImgFileSelector = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#imgFileSelector&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> oOriginImgPreview = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#originImgPreview&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> oCompressImgPreview = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#compressedImgPreview&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IMG_TYPES</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;image/jpeg&#x27;</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;image/png&#x27;</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;image/jpg&#x27;</span>: <span class="string">&#x27;image/jpg&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgFile = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> quality = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">let</span> compressedImgSrc = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bindEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  oImgFileSelector.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, handleFileSelectorChange, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleFileSelectorChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 选中的图片文件对象</span></span><br><span class="line">  imgFile = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!imgFile || !<span class="variable constant_">IMG_TYPES</span>[imgFile.<span class="property">type</span>]) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请选择正确格式的图片&#x27;</span>);</span><br><span class="line">    <span class="title function_">setImgFileEmpty</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setImgPreview</span>(imgFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setImgFileEmpty</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  oImgFileSelector.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  imgFile = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setPreviewVisible</span>(oOriginImgPreview, <span class="literal">false</span>);</span><br><span class="line">  <span class="title function_">setPreviewVisible</span>(oCompressImgPreview, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setImgPreview</span> = (<span class="params">imgFile</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (imgFile <span class="keyword">instanceof</span> <span class="title class_">File</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件</span></span><br><span class="line"><span class="comment">     * 方法1.转成base64格式</span></span><br><span class="line"><span class="comment">     * 方法2.转成blob格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> originImgSrc = reader.<span class="property">result</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">createCompressedImage</span>(&#123;</span><br><span class="line">        <span class="attr">imgSrc</span>: originImgSrc,</span><br><span class="line">        <span class="attr">type</span>: imgFile.<span class="property">type</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      oOriginImgPreview.<span class="property">src</span> = originImgSrc;</span><br><span class="line">      oCompressImgPreview.<span class="property">src</span> = compressedImgSrc;</span><br><span class="line">      <span class="title function_">setPreviewVisible</span>(oCompressImgPreview, <span class="literal">true</span>);</span><br><span class="line">      <span class="title function_">setPreviewVisible</span>(oOriginImgPreview, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(compressedImgSrc.<span class="property">length</span>, originImgSrc.<span class="property">length</span>, quality);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(imgFile);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建压缩图片方法 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createCompressedImage</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  imgSrc,</span></span><br><span class="line"><span class="params">  type</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 1. canvas画布</span></span><br><span class="line"><span class="comment">   * 2. IMG图片对象</span></span><br><span class="line"><span class="comment">   * 3. 将压缩的图片的base64交给IMG图片对象</span></span><br><span class="line"><span class="comment">   * 4. 在将图片画到canvas上</span></span><br><span class="line"><span class="comment">   * 5. 最终画完后拿到canvas对象，在对其质量整体进行缩小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> oImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oImg.<span class="property">src</span> = imgSrc;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    oImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> imgWidth = oImg.<span class="property">width</span>;</span><br><span class="line">      <span class="keyword">const</span> imgHeight = oImg.<span class="property">height</span>;</span><br><span class="line"></span><br><span class="line">      oCan.<span class="property">width</span> = imgWidth;</span><br><span class="line">      oCan.<span class="property">height</span> = imgHeight;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在canvas中绘制图片</span></span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(oImg, <span class="number">0</span>, <span class="number">0</span>, imgWidth, imgHeight);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 生成压缩图片 toBlob()也可以</span></span><br><span class="line">      <span class="title function_">doCompress</span>(oCan, imgSrc, type);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">resolve</span>(compressedImgSrc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 封装压缩图片函数 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doCompress</span> = (<span class="params">canvas, imgSrc, type</span>) =&gt; &#123;</span><br><span class="line">  compressedImgSrc = canvas.<span class="title function_">toDataURL</span>(type, quality / <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (compressedImgSrc.<span class="property">length</span> &gt;= imgSrc.<span class="property">length</span> &amp;&amp; quality &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    quality -= <span class="number">10</span>;</span><br><span class="line">    <span class="title function_">doCompress</span>(canvas, imgSrc, type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 设置图片显示与否 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setPreviewVisible</span> = (<span class="params">node, visible</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (visible) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">true</span>:</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">false</span>:</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原生JavaScript图片压缩</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="图片压缩" scheme="https://lybinweb.github.io/tags/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>3. 从MVC到MVP</title>
    <link href="https://lybinweb.github.io/posts/9cafadb8/index.html"/>
    <id>https://lybinweb.github.io/posts/9cafadb8/index.html</id>
    <published>2023-05-15T09:11:00.000Z</published>
    <updated>2023-05-15T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-从mvc到mvp"><a class="markdownIt-Anchor" href="#3-从mvc到mvp"></a> 3. 从MVC到MVP</h1><h2 id="mvp"><a class="markdownIt-Anchor" href="#mvp"></a> MVP</h2><blockquote><p>MVP：在视图呈现上分层</p></blockquote><ul><li>M：model 数据创建、数据操作方法集合（提供回调，在P中更新视图）</li><li>V：view 视图管理、视图函数（处理更新）</li><li>P：presenter 呈现管理</li></ul><p><a href="https://imgse.com/i/p9gHmsH"><img src="https://s1.ax1x.com/2023/05/15/p9gHmsH.png" alt="p9gHmsH.png" /></a></p><ul><li>从前端视图与数据关系的逻辑分层给予了明确指导</li><li>做到了视图呈现的逻辑与数据管理和视图之间的分离</li><li>但并没有对呈现逻辑做彻底的抽象，我们每写一个MVP的时候，都需要创建独立的呈现管理器</li></ul><h2 id="mvp设计思想实现todolist"><a class="markdownIt-Anchor" href="#mvp设计思想实现todolist"></a> MVP设计思想实现TodoList</h2><h3 id="indexhtml"><a class="markdownIt-Anchor" href="#indexhtml"></a> index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./presenter.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="views"><a class="markdownIt-Anchor" href="#views"></a> views</h3><h4 id="viewsformjs"><a class="markdownIt-Anchor" href="#viewsformjs"></a> views/Form.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodoForm</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> oTodoForm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oTodoForm.<span class="property">innerHTML</span> += <span class="title class_">TodoInput</span>();</span><br><span class="line">  oTodoForm.<span class="property">innerHTML</span> += <span class="title class_">AddButton</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodoInput</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;input </span></span><br><span class="line"><span class="string">        type=&quot;text&quot;</span></span><br><span class="line"><span class="string">        id=&quot;J_TodoInput&quot;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AddButton</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;button id=&quot;J_btn&quot;&gt;ADD&lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="viewstodolistjs"><a class="markdownIt-Anchor" href="#viewstodolistjs"></a> views/TodoList.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">TodoList</span> (todoData) &#123;</span><br><span class="line">  <span class="keyword">const</span> oList = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">  oList.<span class="property">id</span> = <span class="string">&#x27;J_TodoList&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  todoData.<span class="title function_">forEach</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">    oList.<span class="title function_">appendChild</span>(<span class="title class_">TodoItem</span>(todo));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">TodoItem</span> (todo) &#123;</span><br><span class="line">  <span class="keyword">const</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oLi.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123; todo.completed ? <span class="string">&#x27;checked&#x27;</span> : <span class="string">&#x27;&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="string">      data-id=&quot;<span class="subst">$&#123; todo.id &#125;</span>&quot;</span></span><br><span class="line"><span class="string">    /&gt;</span></span><br><span class="line"><span class="string">    &lt;span</span></span><br><span class="line"><span class="string">      style=&quot;text-decoration: <span class="subst">$&#123; todo.completed ? <span class="string">&#x27;line-through&#x27;</span> : <span class="string">&#x27;&#x27;</span> &#125;</span>&quot;</span></span><br><span class="line"><span class="string">    &gt;<span class="subst">$&#123; todo.content &#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;button data-id=&quot;<span class="subst">$&#123; todo.id &#125;</span>&quot;&gt;DELETE&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oLi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="viewsindexjs"><a class="markdownIt-Anchor" href="#viewsindexjs"></a> views/index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">TodoForm</span> <span class="keyword">from</span> <span class="string">&#x27;./Form&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoItem</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./TodoList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoForm</span>,</span><br><span class="line">  <span class="title class_">TodoItem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="modeljs"><a class="markdownIt-Anchor" href="#modeljs"></a> model.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">TodoModel</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoText</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTodoText (text) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoText</span> = text;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo (text, callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> todo = &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">      <span class="attr">content</span>: text,</span><br><span class="line">      <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">push</span>(todo);</span><br><span class="line">    <span class="title function_">doCallback</span>(callback, todo);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setTodoText</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleTodo (id, callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (todo.<span class="property">id</span> === id) &#123;</span><br><span class="line">        todo.<span class="property">completed</span> = !todo.<span class="property">completed</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> todo;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">doCallback</span>(callback, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo (id, callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== id);</span><br><span class="line">    <span class="title function_">doCallback</span>(callback, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> create () &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">TodoModel</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">TodoModel</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">TodoModel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">TodoModel</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doCallback</span> (callback, arg) &#123;</span><br><span class="line">  <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="presenterjs"><a class="markdownIt-Anchor" href="#presenterjs"></a> presenter.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TodoItem</span>,</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoForm</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./views&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoModel</span> <span class="keyword">from</span> <span class="string">&quot;./model&quot;</span>;</span><br><span class="line"></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oApp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> todoModel = <span class="title class_">TodoModel</span>.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> nodes = &#123;</span><br><span class="line">    <span class="attr">oTodoInput</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">oAddBtn</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">oList</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">    <span class="title function_">bindEvent</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">render</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> oFragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(<span class="title class_">TodoForm</span>());</span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(<span class="title class_">TodoList</span>(todoModel.<span class="property">todoData</span>));</span><br><span class="line">    oApp.<span class="title function_">appendChild</span>(oFragment);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">    nodes.<span class="property">oTodoInput</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_TodoInput&#x27;</span>);</span><br><span class="line">    nodes.<span class="property">oAddBtn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_AddBtn&#x27;</span>);</span><br><span class="line">    nodes.<span class="property">oList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_TodoList&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    nodes.<span class="property">oTodoInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, handleTodoInput, <span class="literal">false</span>);</span><br><span class="line">    nodes.<span class="property">oAddBtn</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleAddBtnClick, <span class="literal">false</span>);</span><br><span class="line">    nodes.<span class="property">oList</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleListClick, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleTodoInput</span> (e) &#123;</span><br><span class="line">    todoModel.<span class="title function_">setTodoText</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleAddBtnClick</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> text = todoModel.<span class="property">todoText</span>;</span><br><span class="line">    <span class="keyword">if</span> (!text.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">addTodo</span>(text, <span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">appendItem</span>(<span class="title class_">TodoItem</span>(todo));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleListClick</span> (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> tar = e.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">const</span> tagName = tar.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tagName) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;input&#x27;</span>:</span><br><span class="line">        <span class="title function_">handleCheckboxClick</span>(tar);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;button&#x27;</span>:</span><br><span class="line">        <span class="title function_">handleDeleteClick</span>(tar);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleCheckboxClick</span> (target) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = target.<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">toggleTodo</span>(id, <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">toggleItem</span>(target);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleDeleteClick</span> (target) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = target.<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">removeTodo</span>(id, <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">removeItem</span>(target);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">appendItem</span> (item) &#123;</span><br><span class="line">    nodes.<span class="property">oList</span>.<span class="title function_">appendChild</span>(item);</span><br><span class="line">    nodes.<span class="property">oTodoInput</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toggleItem</span> (target) &#123;</span><br><span class="line">    target.<span class="property">parentNode</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>).<span class="property">style</span>.<span class="property">textDecoration</span> =</span><br><span class="line">      target.<span class="property">checked</span> ? <span class="string">&#x27;line-through&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">removeItem</span> (target) &#123;</span><br><span class="line">    target.<span class="property">parentNode</span>.<span class="title function_">remove</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mvp源码地址"><a class="markdownIt-Anchor" href="#mvp源码地址"></a> MVP源码地址</h2><blockquote><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVP">MVP源码地址</a></p></blockquote>]]></content>
    
    
    <summary type="html">MVP,前端MVP,设计思想</summary>
    
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    <category term="MVP" scheme="https://lybinweb.github.io/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装及启动</title>
    <link href="https://lybinweb.github.io/posts/678f75b7/index.html"/>
    <id>https://lybinweb.github.io/posts/678f75b7/index.html</id>
    <published>2023-05-15T09:11:00.000Z</published>
    <updated>2023-05-15T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb安装及启动"><a class="markdownIt-Anchor" href="#mongodb安装及启动"></a> MongoDB安装及启动</h2><ol><li>下载 <code>mongodb.com/try/downloads/community</code></li><li>解压缩 <code>tar zxvf /Users/....mongodb...tgz</code></li><li>移动文件 <code>mv mongodb.. ~/mongodb</code></li><li>进入文件夹 <code>cd ~/mongodb</code></li><li>创建文件夹 <code>mkdir -p data/db</code></li><li>进入启动文件夹 <code>cd ~/mongodb/bin</code></li><li>执行启动程序 <code>sudo ./mongodb --dbpath /Users/.../mongodb/data/db</code></li></ol>]]></content>
    
    
    <summary type="html">MongoDB安装及启动</summary>
    
    
    
    <category term="数据库" scheme="https://lybinweb.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MongoDB" scheme="https://lybinweb.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>随手实现MVVM</title>
    <link href="https://lybinweb.github.io/posts/9bbd6280/index.html"/>
    <id>https://lybinweb.github.io/posts/9bbd6280/index.html</id>
    <published>2023-05-12T09:11:00.000Z</published>
    <updated>2023-05-12T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随手实现mvvm"><a class="markdownIt-Anchor" href="#随手实现mvvm"></a> 随手实现MVVM</h1><blockquote><p>MVVM模型只是一种设计的方案与思路，它并不是设计模式，设计模式是建立在逻辑层面，设计方案是建立在设计架构层面的。</p></blockquote><blockquote><p>Vue核心是视图库，只是一个视图渲染的工具，Vue是<code>渐进式框架</code>，比如<code>Vue-router</code>、<code>vuex</code>，vue的核心库只关注视图层。</p></blockquote><ul><li>M：Model 数据保存和事件处理层 普通的JavaScript对象</li><li>驱动VM：ViewModel<ul><li>view改数据，需要通过ViewModel；</li><li>Model的更改要驱动View视图的更新，也要通过ViewModel</li></ul></li><li>V：View 视图模板</li></ul><h2 id="随手实现mvvm-2"><a class="markdownIt-Anchor" href="#随手实现mvvm-2"></a> 随手实现MVVM</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li><code>useDOM(App(), #app)</code>: 创建一个应用，放到根节点中去<ul><li><code>render(template, state)</code>: 把响应式数据state渲染到模板template上</li><li><code>bindEvent()</code>: 绑定事件处理函数</li></ul></li><li><code>App()</code>: 返回template模板、state响应式数据、methods事件处理函数</li><li><code>useReactive(target)</code>: 创建响应式数据<ul><li>数据响应式处理，可以通过state.a来访问target.a</li><li>在更新的时候，视图可以帮我更新</li><li><code>createReactObject(target, baseHandler)</code>: 用来创建一个代理数据</li><li><code>mutaleHandler</code>: 返回getter跟setter函数集合【为了以后扩展，需要分开写】<ul><li><code>createGetter()</code>: 用来创建一个proxy.get，他有三个参数target/key/receiver，通过Reflect.get来拿到value，需要判断target[key]是否是对象，如果是则进行深度代理<ul><li>为什么要返回一个函数？因为在之前可能还要做很多很多事情，里边还要传递很多参数进来，需要用到createGetter|Setter作用域内部的一些变量、方法</li></ul></li><li><code>createSetter()</code>: 用来创建一个proxy.set，他有四个参数target/key/value/receiver<ul><li>需要判断target[key]是否存在：<code>Object.prototype.hasOwnproperty.call(target, key)</code><ul><li>不存在：则响应式新增</li><li>存在 &amp;&amp; 需要判断新老值不相等：则响应式修改 update</li></ul></li></ul></li></ul></li></ul></li><li><code>render()</code> 编译模板<ul><li><code>eventFormat(template)</code>: 处理template模板，将模板中的事件解析掉</li><li><code>stateFormat(template, state)</code>: 处理响应式数据，将模板中的响应式数据解析掉</li></ul></li><li><code>eventFormat(template)</code>:<ul><li>匹配出事件处理函数字符串，保存DOM的标识、事件处理函数名称、事件类型到<code>eventPool</code>中，用来绑定事件处理函数</li><li>替换template中的事件处理字符串为DOM标识，方便后续能找到该事件DOM元素</li><li><code>bindEvent()</code>绑定事件处理函数，当template已经渲染上去后就可以绑定了<ul><li>找出所有的DOM元素</li><li>通过eventPool中保存的DOM标识来匹配节点，从而绑定事件处理函数<ul><li>找到函数名：通过match来匹配<code>(</code>之前的</li><li>找到函数参数：通过match来匹配<code>()</code>里边的<ul><li>需要判断函数参数，他的类型有可能是带引号的字符串，有可能是Number类型，有可能是布尔值</li></ul></li><li>最后通过<code>methods[函数名称](函数参数)</code>来执行事件处理函数</li></ul></li></ul></li></ul></li><li><code>stateFormat(template, state)</code>: 处理视图部分，替换数据<ul><li>匹配出整个数据的DOM节点，替换state，打标识补丁，重新组装每个DOM，将DOM标识、state的key保存到<code>statePool</code>数组中</li><li>匹配出双大括号，替换整个双大括号为value值，需要注意的是双大括号里的值state可能是state.a.c 等情况，需要split分割为数组，分别处理，最后替换</li></ul></li><li><code>update()</code>: 在视图更新后（setter后）执行update<ul><li><code>update(statePool, key, value)</code><ul><li>找到所有标签，遍历statePool</li><li>如果statePool每一项的state[key]都跟key相等，那么就进行遍历所有标签</li><li>通过DOM标识来找到需要更新的节点，更新当前DOM.innerHTML为value</li></ul></li></ul></li></ol><h3 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h3><h4 id="srcappjs"><a class="markdownIt-Anchor" href="#srcappjs"></a> src/App.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDOM, useReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;../MVVM&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> state = <span class="title function_">useReactive</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xiaoyesensen&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">count</span> += num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">minus</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">count</span> -= num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeName</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;h1&gt;&#123;&#123; count &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&quot;add(2)&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&quot;minus(1)&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&quot;changeName(&#x27;小野森森&#x27;)&quot;&gt;Change Name&lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    state,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      add,</span><br><span class="line">      minus,</span><br><span class="line">      changeName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useDOM</span>(</span><br><span class="line">  <span class="title class_">App</span>(),</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="srcmvvm"><a class="markdownIt-Anchor" href="#srcmvvm"></a> src/MVVM</h4><h5 id="srcmvvmcompiler"><a class="markdownIt-Anchor" href="#srcmvvmcompiler"></a> src/MVVM/compiler</h5><h6 id="srcmvvmcompilereventjs"><a class="markdownIt-Anchor" href="#srcmvvmcompilereventjs"></a> src/MVVM/compiler/event.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; checkType, randomNum &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eventPool = []</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   mark: random</span></span><br><span class="line"><span class="comment"> *   handler: 事件处理函数字符串</span></span><br><span class="line"><span class="comment"> *   type: &#x27;click&#x27;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> reg_onClick = <span class="regexp">/onClick=\&quot;(.+?)\&quot;/g</span>,</span><br><span class="line">      reg_fnName = <span class="regexp">/^(.+?)\(/</span>,</span><br><span class="line">      reg_arg = <span class="regexp">/\((.*?)\)/</span>,</span><br><span class="line">      eventPool = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">eventFormat</span> (template) &#123;</span><br><span class="line">  <span class="keyword">return</span> template.<span class="title function_">replace</span>(reg_onClick, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _mark = <span class="title function_">randomNum</span>();</span><br><span class="line"></span><br><span class="line">    eventPool.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">mark</span>: _mark,</span><br><span class="line">      <span class="attr">handler</span>: key.<span class="title function_">trim</span>(),</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;click&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`data-mark=<span class="subst">$&#123;_mark&#125;</span>`</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">bindEvent</span> (methods) &#123;</span><br><span class="line">  <span class="keyword">const</span> allElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> oItem = <span class="literal">null</span>,</span><br><span class="line">      _mark = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  eventPool.<span class="title function_">forEach</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allElements.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">      oItem = allElements[i];</span><br><span class="line">      _mark = <span class="built_in">parseInt</span>(oItem.<span class="property">dataset</span>.<span class="property">mark</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">mark</span> === _mark) &#123;</span><br><span class="line">        oItem.<span class="title function_">addEventListener</span>(event.<span class="property">type</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> fnName = event.<span class="property">handler</span>.<span class="title function_">match</span>(reg_fnName)[<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">const</span> arg = <span class="title function_">checkType</span>(event.<span class="property">handler</span>.<span class="title function_">match</span>(reg_arg)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">          methods[fnName](arg);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="srcmvvmcompilerstatejs"><a class="markdownIt-Anchor" href="#srcmvvmcompilerstatejs"></a> src/MVVM/compiler/state.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; randomNum &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg_html = <span class="regexp">/\&lt;.+?\&gt;\&#123;\&#123;(.+?)\&#125;\&#125;\&lt;\/.+?\&gt;/g</span>,</span><br><span class="line">      reg_tag = <span class="regexp">/\&lt;(.+?)\&gt;/</span>,</span><br><span class="line">      reg_var = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还需要在更新函数中用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> statePool = [];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * statePool []</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   mark: _mark,</span></span><br><span class="line"><span class="comment"> *   state: value</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">stateFormat</span> (template, state) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  template = template.<span class="title function_">replace</span>(reg_html, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> matched = node.<span class="title function_">match</span>(reg_tag);</span><br><span class="line">    <span class="keyword">const</span> _mark = <span class="title function_">randomNum</span>();</span><br><span class="line"></span><br><span class="line">    _state.<span class="property">mark</span> = _mark;</span><br><span class="line"></span><br><span class="line">    statePool.<span class="title function_">push</span>(_state);</span><br><span class="line"></span><br><span class="line">    _state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;<span class="subst">$&#123;matched[<span class="number">1</span>]&#125;</span> data-mark=&quot;<span class="subst">$&#123;_mark&#125;</span>&quot;&gt;&#123;&#123;<span class="subst">$&#123;key&#125;</span>&#125;&#125;&lt;/<span class="subst">$&#123;matched[<span class="number">1</span>]&#125;</span>&gt;`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  template = template.<span class="title function_">replace</span>(reg_var, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _var = key.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> _varArr = _var.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; _varArr.<span class="property">length</span>) &#123;</span><br><span class="line">      _var = state[_varArr[i]];</span><br><span class="line">      i ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _state.<span class="property">state</span> = _varArr;</span><br><span class="line"></span><br><span class="line">    statePool[o].<span class="property">state</span> = _varArr;</span><br><span class="line"></span><br><span class="line">    o++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _var;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmreactive"><a class="markdownIt-Anchor" href="#srcmvvmreactive"></a> src/MVVM/reactive</h5><h6 id="srcmvvmreactiveindexjs"><a class="markdownIt-Anchor" href="#srcmvvmreactiveindexjs"></a> src/MVVM/reactive/index.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mutableHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./mutableHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useReactive</span> (target) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactObject</span>(target, mutableHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactObject</span> (target, baseHandler) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, baseHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="srcmvvmreactivemutablehandlerjs"><a class="markdownIt-Anchor" href="#srcmvvmreactivemutablehandlerjs"></a> src/MVVM/reactive/mutableHandler.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hasOwnProperty, isEqual, isObject &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useReactive &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; update &#125; <span class="keyword">from</span> <span class="string">&quot;../render&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; statePool &#125; <span class="keyword">from</span> <span class="string">&quot;../compiler/state&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = <span class="title function_">createGetter</span>(),</span><br><span class="line">      set = <span class="title function_">createSetter</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span> (target, key, receiver) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应式获取&#x27;</span>, res);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">      <span class="comment">// 深度代理</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">useReactive</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span> (target, key, value, receiver) &#123;</span><br><span class="line">    <span class="comment">// 判断key是否是自身属性</span></span><br><span class="line">    <span class="keyword">const</span> isKeyExist = <span class="title function_">hasOwnProperty</span>(target, key),</span><br><span class="line">          oldValue = target[key],</span><br><span class="line">          res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isKeyExist) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应式新增&#x27;</span>, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="title function_">isEqual</span>(value, oldValue)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应式修改&#x27;</span>, key, value);</span><br><span class="line">      <span class="comment">// 视图更新</span></span><br><span class="line">      <span class="comment">// Vue做法：有虚拟节点；先模板编译，形成ast树，优化，形成虚拟节点，对比新老节点是否有差异性，如果有在更新，没有则不更新</span></span><br><span class="line">      <span class="title function_">update</span>(statePool, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutableHandler = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  mutableHandler</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmshared"><a class="markdownIt-Anchor" href="#srcmvvmshared"></a> src/MVVM/shared</h5><h6 id="srcmvvmsharedutilsjs"><a class="markdownIt-Anchor" href="#srcmvvmsharedutilsjs"></a> src/MVVM/shared/utils.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg_check_str = <span class="regexp">/^[\&#x27;|\&quot;].*?[\&#x27;|\&quot;]$/</span>;</span><br><span class="line"><span class="keyword">const</span> reg_str = <span class="regexp">/[\&#x27;|\&quot;]/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span> (value) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value !== <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hasOwnProperty</span> (target, key) &#123;</span><br><span class="line">  <span class="comment">// target不一定是对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(target, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isEqual</span> (newValue, oldValue) &#123;</span><br><span class="line">  <span class="keyword">return</span> newValue === oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomNum</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">checkType</span> (str) &#123;</span><br><span class="line">  <span class="keyword">if</span> (reg_check_str.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(reg_str, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;false&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Number</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmindexjs"><a class="markdownIt-Anchor" href="#srcmvvmindexjs"></a> src/MVVM/index.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; useReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; useDOM &#125; <span class="keyword">from</span> <span class="string">&#x27;./render&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; eventFormat &#125; <span class="keyword">from</span> <span class="string">&#x27;./compiler/event&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; stateFormat &#125; <span class="keyword">from</span> <span class="string">&#x27;./compiler/state&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmrenderjs"><a class="markdownIt-Anchor" href="#srcmvvmrenderjs"></a> src/MVVM/render.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; eventFormat, stateFormat &#125; <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindEvent &#125; <span class="keyword">from</span> <span class="string">&quot;./compiler/event&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useDOM</span> (</span><br><span class="line">  &#123; template, state, methods &#125;,</span><br><span class="line">  rootDOM</span><br><span class="line">) &#123;</span><br><span class="line">  rootDOM.<span class="property">innerHTML</span> = <span class="title function_">render</span>(template, state);</span><br><span class="line">  <span class="title function_">bindEvent</span>(methods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span> (template, state) &#123;</span><br><span class="line"></span><br><span class="line">  template = <span class="title function_">eventFormat</span>(template);</span><br><span class="line">  template = <span class="title function_">stateFormat</span>(template, state);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">update</span> (statePool, key, value) &#123;</span><br><span class="line">  <span class="keyword">const</span> allElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> oItem = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  statePool.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">state</span>[item.<span class="property">state</span>.<span class="property">length</span> - <span class="number">1</span>] === key) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allElements.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        oItem = allElements[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> _mark = <span class="built_in">parseInt</span>(oItem.<span class="property">dataset</span>.<span class="property">mark</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">mark</span> === _mark) &#123;</span><br><span class="line">          oItem.<span class="property">innerHTML</span> = value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mvvm源码地址"><a class="markdownIt-Anchor" href="#mvvm源码地址"></a> MVVM源码地址</h2><blockquote><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVVM">MVVM源码地址</a></p></blockquote>]]></content>
    
    
    <summary type="html">MVVM,前端MVVM,设计思想</summary>
    
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    <category term="MVVM" scheme="https://lybinweb.github.io/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>2. 前端MVC</title>
    <link href="https://lybinweb.github.io/posts/afac6017/index.html"/>
    <id>https://lybinweb.github.io/posts/afac6017/index.html</id>
    <published>2023-05-11T09:11:00.000Z</published>
    <updated>2023-05-11T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-前端mvc"><a class="markdownIt-Anchor" href="#2-前端mvc"></a> 2. 前端MVC</h1><h2 id="前端mvc"><a class="markdownIt-Anchor" href="#前端mvc"></a> 前端MVC</h2><ul><li><p>前端渲染：</p><ul><li>HTML文件 -&gt; div#app -&gt; 从服务器下载</li><li>数据 -&gt; 异步请求API -&gt; 数据 -&gt; DOM操作 -&gt; DOM结构 -&gt; 渲染 -&gt; div#app</li></ul></li><li><p>前端MVC：</p><ul><li>V: 模板 -&gt; 函数返回字符串/模板文件</li><li>M: Service 请求服务 -&gt; 请求函数</li><li>C: 调用请求函数 -&gt; 数据 -&gt; 交给模板渲染</li></ul></li></ul><p><a href="https://imgse.com/i/p9gHiIx"><img src="https://s1.ax1x.com/2023/05/15/p9gHiIx.png" alt="p9gHiIx.png" /></a></p><blockquote><p>MVC本质上跟MVVM是没有任何关系的，从设计角度来看不是一个东西。<br />MVC：设计思想、架构方案<br />MVVM：构建应用程序以及使用应用的一种方式。 VM是架子、轮子，链接数据操作层面上的和View的模板层面上的工具；Model层更改数据来影响View层更新，View层的更新来同时更新我们Model层的数据。<br />M -&gt; MC的合集（MVC的MC）<br />V -&gt; 组件</p></blockquote><h2 id="mvc实现todolist"><a class="markdownIt-Anchor" href="#mvc实现todolist"></a> MVC实现TodoList</h2><ul><li><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVC">源码地址</a></li></ul><h2 id="原生dom实现前端mvc"><a class="markdownIt-Anchor" href="#原生dom实现前端mvc"></a> 原生DOM实现前端MVC</h2><ul><li><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVC-FrontEnd">源码地址</a></li></ul><h2 id="vue3实现前端mvc"><a class="markdownIt-Anchor" href="#vue3实现前端mvc"></a> Vue3实现前端MVC</h2><ul><li><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVC-FrontEnd-Vue3">源码地址</a></li></ul><h2 id="mvc总结"><a class="markdownIt-Anchor" href="#mvc总结"></a> MVC总结</h2><ul><li>C：逻辑管理 数据格式化、视图渲染、事件处理（向M请求数据）</li><li>V：视图管理 视图函数（给C层提供）</li><li>M：数据管理 （返回数据给C）</li></ul><blockquote><p>对于前端MVC来说，借鉴的只是在项目设计上的分层思想与方法</p></blockquote>]]></content>
    
    
    <summary type="html">前端MVC</summary>
    
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="MVC" scheme="https://lybinweb.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>前后端MVC对比</title>
    <link href="https://lybinweb.github.io/posts/1cdcbed4/index.html"/>
    <id>https://lybinweb.github.io/posts/1cdcbed4/index.html</id>
    <published>2023-05-09T09:11:00.000Z</published>
    <updated>2023-05-09T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-前后端mvc对比"><a class="markdownIt-Anchor" href="#2-前后端mvc对比"></a> 2. 前后端MVC对比</h1><blockquote><p>前言：Vue没有完全遵循MVVM模型</p></blockquote><h2 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h2><h3 id="后端mvc"><a class="markdownIt-Anchor" href="#后端mvc"></a> 后端MVC</h3><ul><li>M: 模型层 -&gt; model 数据模型 -&gt; 操作数据库（对数据进行增删改查）</li><li>V: 视图层 -&gt; view 显示视图或视图模板</li><li>C: 控制器层 -&gt; controller 逻辑层 数据和视图关联挂载和基本的逻辑操作<ul><li>前端渲染： API层 前端请求的API对应的是控制器中的方法<ul><li>前端 -&gt; 异步请求URL -&gt; 调用控制器中的一个方法 -&gt; 调用Model层的方法 -&gt; 操作数据库 -&gt; 获取数据 -&gt; 返回给控制器方法 -&gt; 响应回前端</li></ul></li><li>服务端渲染：视图需要数据，去找controller对应的方法，调用Model的方法，获取数据，返回给controller对应的方法，render到view中</li></ul></li></ul><h3 id="前端mvc"><a class="markdownIt-Anchor" href="#前端mvc"></a> 前端MVC</h3><ul><li>M: Model 管理视图所需数据、数据与视图的关联</li><li>V: View HTML模板、渲染视图</li><li>C: Controller 管理事件逻辑</li></ul><blockquote><p>Controller --触发–&gt; Model --改变–&gt; View<br />Vier --触发–&gt; Controller --触发–&gt; Model</p><p>MVC就是MVVM的雏形</p></blockquote><ul><li>总结：<ul><li>MVC的弱点：驱动是不明显的、驱动被MVC分离成三部分</li><li>MVVM：<ul><li>M: data</li><li>V: view</li><li>VM: ViewModel 解决了驱动不集中、不内聚，更加解决了视图与模型之间完全隔离开来的这种关系</li></ul></li></ul></li></ul><blockquote><p>vue关注视图渲染<br />Vue ref 可以直接操作 DOM -&gt; 没有遵循MVVM，因为M是强制跟V隔离的<br />Vue的ViewModel：收集依赖、模板编译、数据劫持</p></blockquote><ul><li>所以Vue没有严格意义上遵循MVVM模型，其实是MVW。</li><li>Vue是<code>渐进式框架</code>，比如<code>Vue-router</code>、<code>vuex</code>，vue的核心库只关注视图层；</li></ul><h4 id="基于mvc模型实现计算器案例"><a class="markdownIt-Anchor" href="#基于mvc模型实现计算器案例"></a> 基于MVC模型实现计算器案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span> () &#123;</span><br><span class="line">    model.<span class="title function_">init</span>();</span><br><span class="line">    view.<span class="title function_">render</span>();</span><br><span class="line">    controller.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> model = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">s</span>: <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> _this.<span class="property">data</span>) &#123;</span><br><span class="line">        (<span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(_this, k, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> _this.<span class="property">data</span>[k];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">              _this.<span class="property">data</span>[key] = newValue;</span><br><span class="line">              <span class="comment">// update view</span></span><br><span class="line">              view.<span class="title function_">render</span>(&#123; [k]: newValue &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)(k);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> view = &#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-a&quot;&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-s&quot;&gt;&#123;&#123; s &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-b&quot;&gt;&#123;&#123; b &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;=&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-r&quot;&gt;&#123;&#123; r &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; class=&quot;cal-input a&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; class=&quot;cal-input b&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;*&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;/&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">mutedData</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mutedData) &#123;</span><br><span class="line">        <span class="comment">// 如果 变化的data 不存在，那么直接渲染解析template，替换掉</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">template</span>.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> model[key.<span class="title function_">trim</span>()];</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        container.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">template</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">el</span>).<span class="title function_">appendChild</span>(container);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> mutedData) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;cal-&#x27;</span> + k).<span class="property">textContent</span> = mutedData[k];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> controller = &#123;</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> oCalInputs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;cal-input&#x27;</span>),</span><br><span class="line">          oCalBtns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;cal-btn&#x27;</span>),</span><br><span class="line">          inputItem,</span><br><span class="line">          btnItem;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalInputs.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        inputItem = oCalInputs[i];</span><br><span class="line"></span><br><span class="line">        inputItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleInput</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalBtns.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        btnItem = oCalBtns[i];</span><br><span class="line"></span><br><span class="line">        btnItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleBtn</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleInput</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> tar = e.<span class="property">target</span>,</span><br><span class="line">          value = <span class="title class_">Number</span>(tar.<span class="property">value</span>),</span><br><span class="line">          field = tar.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      model[field] = value;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算结果</span></span><br><span class="line">      <span class="comment">// model.r = eval(&#x27;model.a&#x27; + model.s + &#x27;model.b&#x27;);</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">with</span> (model) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleBtn</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> type = e.<span class="property">target</span>.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">      model.<span class="property">s</span> = type;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">with</span> (model) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前后端MVC对比</summary>
    
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="MVC" scheme="https://lybinweb.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>1. 请求资源与访问资源、服务端渲染与JS动态渲染、混编语言与EJS混编模式、抽离MVC层</title>
    <link href="https://lybinweb.github.io/posts/1ef7553a/index.html"/>
    <id>https://lybinweb.github.io/posts/1ef7553a/index.html</id>
    <published>2023-05-08T09:11:00.000Z</published>
    <updated>2023-05-08T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-请求资源与访问资源-服务端渲染与js动态渲染-混编语言与ejs混编模式-抽离mvc层"><a class="markdownIt-Anchor" href="#1-请求资源与访问资源-服务端渲染与js动态渲染-混编语言与ejs混编模式-抽离mvc层"></a> 1. 请求资源与访问资源、服务端渲染与JS动态渲染、混编语言与EJS混编模式、抽离MVC层</h1><h2 id="请求资源与访问资源"><a class="markdownIt-Anchor" href="#请求资源与访问资源"></a> 请求资源与访问资源</h2><h3 id="请求资源"><a class="markdownIt-Anchor" href="#请求资源"></a> 请求资源</h3><ol><li><p>异步请求：</p><ul><li>数据：字符串、数字、JSON、XML</li><li>文件：视频、音频、文本文件、HTML/CSS/JS</li></ul></li><li><p>请求：</p><ul><li>有资源的前提，从服务器上下载资源</li><li>有地址的前提，用API/URL资源定位</li><li>通过一个资源定位，到服务器找到某一个特定的资源</li></ul></li><li><p>响应：</p><ul><li>服务器允许你请求</li><li>确认有资源定位对应的资源</li><li>将这个资源返回给请求方（浏览器、服务器）</li></ul><blockquote><p>比如微信登录，你是没有办法直接在前端发起一个请求去访问人家腾讯的服务器，因为所有的登录过程、登录验证他都在腾讯的服务器上面，你没有办法直接发。我们客户端点击登录然后先请求我们自己的服务器，不管你跨越还是不跨域我们可以协商，自己的服务器把资源准备好，一次性发送给腾讯，因为后端是不存在跨域的，跨域是浏览器行为。所以你从后端发起请求到腾讯服务器，验证成功后返回数据到我们的服务器，我们自己的服务器在把信息整理好，再返回给客户端提示，这个过程就是响应</p></blockquote></li><li><p>资源：</p><ul><li>页面的html是存放在服务器上的</li><li>请求服务器响应这个资源HTML -&gt; 将这个HTML响应给客户端 -&gt; 下载这个文件/加载并解析文件的过程</li><li>HTML编码通过浏览器解析<ul><li>link -&gt; 异步下载CSS文件 -&gt; 解析CSS规则 -&gt; 组装CSSOM树</li><li>body -&gt; 解析HTML -&gt; 组装DOM树</li><li>script -&gt; 要阻塞HTML的解析 -&gt; 下载JS文件 -&gt; 解析JS编码 -&gt; 执行</li></ul></li></ul></li><li><p>WEB项目运行环境的问题</p><ul><li>服务器：web文件夹 -&gt; <a href="http://www.xxx.com/test">www.xxx.com/test</a> -&gt; 访问index.html时对应web文件夹下的index.html</li><li>静态文件夹：有条件的允许你访问 HTML/CSS/JS/开放文件夹 -&gt; 浏览器环境运行<ul><li>没有映射域名的，这些文件夹就在服务器环境运行，这就是服务器的运行环境</li></ul></li><li>前端：将资源从服务器下载然后在浏览器中运行</li><li>后端：将资源拿出来直接在服务器环境里运行</li></ul></li></ol><h2 id="服务端渲染与js动态渲染"><a class="markdownIt-Anchor" href="#服务端渲染与js动态渲染"></a> 服务端渲染与JS动态渲染</h2><h3 id="服务端渲染"><a class="markdownIt-Anchor" href="#服务端渲染"></a> 服务端渲染</h3><blockquote><p>服务端渲染：服务器把html拼接好返回给你</p></blockquote><ul><li>目标：浏览器访问<code>localhost:8080/static.html</code>响应服务器的<code>public/static.html</code>文件</li></ul><ol><li>安装express、ejs：<code>yarn add express ejs</code></li><li>使用nodemon监听根app.js</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：访问静态文件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listen 8080&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h2 id="缺陷这样返回html文件那么里边使用的数据都是写死的如果数据是动态传入的怎么做"><a class="markdownIt-Anchor" href="#缺陷这样返回html文件那么里边使用的数据都是写死的如果数据是动态传入的怎么做"></a> 缺陷：这样返回html文件，那么里边使用的数据都是写死的，如果数据是动态传入的，怎么做？</h2></li><li><p>后端路由：通过url来执行你的函数</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/html_text&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;This is TITLE&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在这里可以返回一个HTML字符串</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">      &lt;html&gt;</span></span><br><span class="line"><span class="string">      &lt;head&gt;</span></span><br><span class="line"><span class="string">          &lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;/head&gt;</span></span><br><span class="line"><span class="string">      &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;<span class="subst">$&#123; title &#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">            list.map(item =&gt; (</span></span></span><br><span class="line"><span class="subst"><span class="string">              &lt;li&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">                &lt;p&gt;$&#123; item.id &#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">                &lt;p&gt;$&#123; item.name &#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">              &lt;/li&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">            )).join(<span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">          &#125;</span>     </span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/body&gt;</span></span><br><span class="line"><span class="string">      &lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="js动态渲染"><a class="markdownIt-Anchor" href="#js动态渲染"></a> JS动态渲染</h3><ul><li>浏览器访问<code>localhost:8080/dom.html</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/dom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dom.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="string">&#x27;This is TITLE&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oApp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="title function_">render</span>();</span><br><span class="line">    oApp.<span class="title function_">appendChild</span>(node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">render</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> oFrag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">const</span> oTitle = <span class="title function_">createTitle</span>(title);</span><br><span class="line">    <span class="keyword">const</span> oList = <span class="title function_">createList</span>(list);</span><br><span class="line"></span><br><span class="line">    oFrag.<span class="title function_">appendChild</span>(oTitle);</span><br><span class="line">    oFrag.<span class="title function_">appendChild</span>(oList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oFrag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createTitle</span> (title) &#123;</span><br><span class="line">    <span class="keyword">const</span> oTitle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">    oTitle.<span class="property">textContent</span> = title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oTitle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createList</span> (list) &#123;</span><br><span class="line">    <span class="keyword">const</span> oList = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> oFrag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">      oLi.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;p&gt;<span class="subst">$&#123; item.id &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;<span class="subst">$&#123; item.name &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line"></span><br><span class="line">      oFrag.<span class="title function_">appendChild</span>(oLi);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    oList.<span class="title function_">appendChild</span>(oFrag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oList;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="混编语言与ejs混编模式"><a class="markdownIt-Anchor" href="#混编语言与ejs混编模式"></a> 混编语言与EJS混编模式</h2><h3 id="混编语言模式"><a class="markdownIt-Anchor" href="#混编语言模式"></a> 混编语言模式</h3><ul><li><p>HTML跟PHP混编：访问<code>localhost:8080/index.php</code>，就能看到你返回的页面，但是右键查看源代码是没有php相关代码的</p></li><li><p>混编模式：</p><ul><li>访问<code>localhost:8080/index.php</code>，是请求的后端的文件</li><li>请求 -&gt; URL -&gt; 服务器会映射这个资源 -&gt; php解释器会去解释php文件源码 -&gt; 执行输出结果给HTML -&gt; 响应回客户端</li></ul></li></ul><blockquote><p>.js 是浏览器默认是脚本，他不可以作为一个页面返回，因为后端代码是不可以让前端看到的，设计安全问题，所以我们只能返回字符串</p></blockquote><blockquote><p>浏览器要的是一段字符串，不在乎什么后缀，什么后缀是需要在后端配置的<br />txt、pdf是浏览器有自己的解释器的</p></blockquote><blockquote><p>Vue/React 在服务器上运行SSR的程序，他还要执行每一个组件还得拼接HTML字符串</p></blockquote><h3 id="ejs模板写混编"><a class="markdownIt-Anchor" href="#ejs模板写混编"></a> EJS模板写混编</h3><ul><li><p>访问`localhost:8080/html.ejs</p></li><li><p>让express认识ejs模板需要设置：<code>app.set('view engine', 'ejs')</code></p></li><li><p><code>views/html.ejs</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">const title = &#x27;This is EJS TITLE&#x27;;</span><br><span class="line">const list = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: 1,</span><br><span class="line">        name: &#x27;zhangsan&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: 2,</span><br><span class="line">        name: &#x27;lisi&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">];  </span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;% list.map(item =&gt; &#123; %&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">              &lt;p&gt;ID: &lt;%= item.id %&gt;&lt;/p&gt;</span><br><span class="line">              &lt;p&gt;Name: &lt;%= item.name %&gt;&lt;/p&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">      &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/html.ejs&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 他会找views下面的html.ejs文件</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="拆分ejs"><a class="markdownIt-Anchor" href="#拆分ejs"></a> 拆分ejs</h4><ul><li>views/top.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure><ul><li>views/bottom.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>listItem.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;p&gt;ID: &lt;%= item.id %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Name: &lt;%= item.name %&gt;&lt;/p&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><ul><li>views/html.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- include(top) %&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;% list.map(item =&gt; &#123; %&gt;</span><br><span class="line">          &lt;%- include(&#x27;listItem&#x27;, &#123;</span><br><span class="line">            item</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">      &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;%- include(bottom) %&gt;</span><br></pre></td></tr></table></figure><ul><li>app.js</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/html.ejs&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;This is EJS TITLE&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 他会找views下面的html.ejs文件</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;html&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    list</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="抽离mvc层案例"><a class="markdownIt-Anchor" href="#抽离mvc层案例"></a> 抽离MVC层（案例）</h2><ul><li>访问<code>http://localhost:8080</code> 解析index.ejs，返回完整的页面html</li><li>访问<code>http://localhost:8080/detail/'id'</code> 解析detail.ejs，返回对应的detail页面</li></ul><h3 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h3><ul><li>models 对数据的增删改查<ul><li>index.js</li></ul></li><li>controllers 接收请求并响应资源（处理数据逻辑）<ul><li>index.js</li></ul></li><li>data 模拟数据库<ul><li>data.json</li></ul></li><li>router 路由<ul><li>index.js</li></ul></li><li>view 页面<ul><li>index.ejs</li><li>detail.ejs</li></ul></li><li>app.js</li></ul><h3 id="appjs"><a class="markdownIt-Anchor" href="#appjs"></a> app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;../router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"><span class="comment">// 中间件：访问静态文件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listen 8080&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="modelsindexjs"><a class="markdownIt-Anchor" href="#modelsindexjs"></a> models/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  readFileSync</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  resolve</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getListData</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">    <span class="title function_">readFileSync</span>(</span><br><span class="line">      <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../data/data.json&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> title = data.<span class="property">titles</span>.<span class="property">index</span>;</span><br><span class="line">  <span class="keyword">const</span> list = data.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> (&#123; id, name &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title,</span><br><span class="line">    list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDetailData</span> (id) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">    <span class="title function_">readFileSync</span>(</span><br><span class="line">      <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../data/data.json&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> title = data.<span class="property">titles</span>.<span class="property">index</span>;</span><br><span class="line">  <span class="keyword">const</span> student = data.<span class="property">list</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title,</span><br><span class="line">    student</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  getListData,</span><br><span class="line">  getDetailData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controllersindexjs"><a class="markdownIt-Anchor" href="#controllersindexjs"></a> controllers/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; getListData, getDetailData &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../models&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">indexView</span> (req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, list &#125; = <span class="title function_">getListData</span>();</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    list</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">detailView</span> (req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, student &#125; = <span class="title function_">getDetailData</span>(id);</span><br><span class="line">  </span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;detail&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    student</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  indexView,</span><br><span class="line">  detailView</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="routerindexjs"><a class="markdownIt-Anchor" href="#routerindexjs"></a> router/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Router</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; indexView, detailView &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, indexView);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/detail&#x27;</span>, detailView);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><blockquote><p>localhost:8080/index.ejs -&gt; Router 执行函数 -&gt; Controllers indexView(data) -&gt; models getListData 返回listData{title,list} -&gt; 给到EJS模板 ejs引擎注入数据 -&gt; 响应注入数据后的完整的HTML -&gt; HTML字符串，浏览器解析并渲染DOM</p></blockquote><ol><li>Controllers：将输入给到View层，ejs将数据注入，响应完整的HTML。第一管的是逻辑语句操作数据，执行操作数据的函数，并且响应HTML</li><li>Models：增删改查数据</li></ol><h2 id="什么是mvc"><a class="markdownIt-Anchor" href="#什么是mvc"></a> 什么是MVC</h2><ul><li>MVC不是设计模式，他是跟架构相关的，你的项目如何设计分层，设计思想、方案</li></ul><ol><li>View 视图层 封装HTML并且提供动态嵌入数据的功能</li><li>Controller 控制器层</li></ol><ul><li>调用模型层对数据库的操作，并获取响应数据</li><li>将数据传递给EJS引擎，并返回完整HTML</li><li>将数据直接响应回客户端或者将HTML响应给客户端</li></ul><ol start="3"><li>Model 模型层 数据模型的操作、数据模型的定义<ul><li>根据控制器层的需求，对数据库内的数据进行增删改查操作</li><li>返回控制器需要的数据</li></ul></li></ol><blockquote><p>服务端渲染：SEO优化、搜索引擎优化<br />搜索引擎会定时爬取HTML源码</p><p>Node中间层：<br />API：Java<br />jsp -&gt; API -&gt; 数据注入JSP -&gt; 响应回前端<br />模板JSP -&gt; 数据 -&gt; JSP属于Java脚本工具<br />Node中间层：<br />客户端URL -&gt; 请求node -&gt; 访问Controller -&gt; 请求java API -&gt; data 返回 -&gt; controller -&gt; data -&gt;ejs -&gt; html -&gt; controller -&gt; 响应给客户端<br />node处理view层</p><p>客户端 -&gt;　node -&gt; 数据端 -&gt; Java API -&gt; view -&gt; 客户端</p></blockquote>]]></content>
    
    
    <summary type="html">请求资源与访问资源,服务端渲染,JS动态渲染,混编语言,EJS混编模式</summary>
    
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="请求资源与访问资源" scheme="https://lybinweb.github.io/tags/%E8%AF%B7%E6%B1%82%E8%B5%84%E6%BA%90%E4%B8%8E%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90/"/>
    
    <category term="服务端渲染" scheme="https://lybinweb.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    
    <category term="JS动态渲染" scheme="https://lybinweb.github.io/tags/JS%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93/"/>
    
    <category term="混编语言" scheme="https://lybinweb.github.io/tags/%E6%B7%B7%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="EJS混编模式" scheme="https://lybinweb.github.io/tags/EJS%E6%B7%B7%E7%BC%96%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue选项式API跟派发器的结合</title>
    <link href="https://lybinweb.github.io/posts/7be91250/index.html"/>
    <id>https://lybinweb.github.io/posts/7be91250/index.html</id>
    <published>2023-04-28T07:50:00.000Z</published>
    <updated>2023-04-28T07:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue选项式api配合派发器实现计算器案例"><a class="markdownIt-Anchor" href="#vue选项式api配合派发器实现计算器案例"></a> vue选项式API配合派发器实现计算器案例</h1><ul><li>针对vue2组件化模式升级为派发器模式</li></ul><ol><li>派发器改造组件逻辑部分</li><li>根据需求更改数据</li><li>type对应一个事件、事件找到响应的逻辑、逻辑通过事件类型type触发派发器、触发事件的改变</li><li>vuex、redux：做了store中央状态管理，页面组件公用的状态</li><li>type 你的组件主要做了什么任务，称为类型</li><li>reducer 实现主要的任务</li><li>dispatch 根据type触发不同的reducer子任务</li></ol><h2 id="计算器组件"><a class="markdownIt-Anchor" href="#计算器组件"></a> 计算器组件</h2><ul><li>result 0</li><li>input input</li><li>button * 4</li></ul><h3 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h3><ul><li>src<ul><li>components<ul><li>calculator 计算器组件<ul><li>CalButton.vue</li><li>CalInput.vue</li><li>CalResult.vue</li><li>index.vue</li></ul></li></ul></li><li>libs<ul><li>utils.js</li></ul></li><li>actions type类型<ul><li>calculator.js</li></ul></li><li>reducers 实现每种type的逻辑<ul><li>calculator.js</li></ul></li><li>dispatchers 根据type触发对应的reducer<ul><li>calculator.js</li></ul></li><li>App.vue</li><li>main.js</li></ul></li></ul><h3 id="componentscalculator"><a class="markdownIt-Anchor" href="#componentscalculator"></a> components/calculator</h3><h4 id="calbuttonvue"><a class="markdownIt-Anchor" href="#calbuttonvue"></a> CalButton.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:class</span>=<span class="string">&quot;&#123; current: method === curMethod &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:method</span>=<span class="string">&quot;method&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click</span>=<span class="string">&quot;changeMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span> &#123;&#123; innerText &#125;&#125; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;CalButton&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">innerText</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">method</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">curMethod</span>: <span class="title class_">String</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    changeMethod () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;dispatch&#x27;</span>, <span class="string">&#x27;CHANGE_METHOD&#x27;</span>, <span class="variable language_">this</span>.<span class="property">method</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.current</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="calinputvue"><a class="markdownIt-Anchor" href="#calinputvue"></a> CalInput.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">input</span>=<span class="string">&quot;setNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;CalInput&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">field</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    setNumber (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> val = <span class="title class_">Number</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;dispatch&#x27;</span>, <span class="string">&#x27;SET_NUMBER&#x27;</span>, <span class="variable language_">this</span>.<span class="property">field</span>, val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="calresultvue"><a class="markdownIt-Anchor" href="#calresultvue"></a> CalResult.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; result &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;CalResult&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">result</span>: <span class="title class_">Number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="indexvue"><a class="markdownIt-Anchor" href="#indexvue"></a> index.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">CalResult</span> <span class="attr">:result</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">CalResult</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">field</span>=<span class="string">&quot;firstNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalInput</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">field</span>=<span class="string">&quot;secondNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalInput</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;+&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;plus&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;-&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;minus&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;*&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;mul&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;div&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">CalInput</span> <span class="keyword">from</span> <span class="string">&quot;./CalInput.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">CalButton</span> <span class="keyword">from</span> <span class="string">&quot;./CalButton.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">CalResult</span> <span class="keyword">from</span> <span class="string">&quot;./CalResult.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> calculatorDispatch <span class="keyword">from</span> <span class="string">&quot;../../dispatchers/calculator&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">CalInput</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">CalButton</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">CalResult</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">firstNumber</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">secondNumber</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">result</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">curMethod</span>: <span class="string">&#x27;plus&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    dispatch (...args) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(args)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">calculatorDispatch</span>(<span class="variable language_">this</span>)(...args);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="actionscalculatorjs"><a class="markdownIt-Anchor" href="#actionscalculatorjs"></a> actions/calculator.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SET_NUMBER</span> = <span class="string">&#x27;SET_NUMBER&#x27;</span>,</span><br><span class="line">      <span class="variable constant_">CHANGE_METHOD</span> = <span class="string">&#x27;CHANGE_METHOD&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="variable constant_">SET_NUMBER</span>,</span><br><span class="line">  <span class="variable constant_">CHANGE_METHOD</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reducerscalculatorjs"><a class="markdownIt-Anchor" href="#reducerscalculatorjs"></a> reducers/calculator.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; compute &#125; <span class="keyword">from</span> <span class="string">&quot;../libs/utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculatorReducer</span> (data) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setNumber</span> (field, value) &#123;</span><br><span class="line">    data[field] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compute</span>(</span><br><span class="line">      data.<span class="property">curMethod</span>,</span><br><span class="line">      data.<span class="property">firstNumber</span>,</span><br><span class="line">      data.<span class="property">secondNumber</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeMethod</span> (method) &#123;</span><br><span class="line">    data.<span class="property">curMethod</span> = method;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compute</span>(</span><br><span class="line">      data.<span class="property">curMethod</span>,</span><br><span class="line">      data.<span class="property">firstNumber</span>,</span><br><span class="line">      data.<span class="property">secondNumber</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setNumber,</span><br><span class="line">    changeMethod</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> calculatorReducer;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dispatcherscalculatorjs"><a class="markdownIt-Anchor" href="#dispatcherscalculatorjs"></a> dispatchers/calculator.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SET_NUMBER</span>, <span class="variable constant_">CHANGE_METHOD</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../actions/calculator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&quot;../reducers/calculator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    setNumber,</span><br><span class="line">    changeMethod</span><br><span class="line">  &#125; = <span class="title function_">reducer</span>(ctx.<span class="property">$data</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">type, ...args</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="attr">SET_NUMBER</span>:</span><br><span class="line">        ctx.<span class="property">result</span> = <span class="title function_">setNumber</span>(...args);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="attr">CHANGE_METHOD</span>:</span><br><span class="line">        ctx.<span class="property">result</span> = <span class="title function_">changeMethod</span>(...args);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue选项式API跟派发器的结合、派发器实现计算器案例</summary>
    
    
    
    <category term="Vue" scheme="https://lybinweb.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://lybinweb.github.io/tags/Vue/"/>
    
    <category term="派发器" scheme="https://lybinweb.github.io/tags/%E6%B4%BE%E5%8F%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>渲染函数与h函数</title>
    <link href="https://lybinweb.github.io/posts/a0b85258/index.html"/>
    <id>https://lybinweb.github.io/posts/a0b85258/index.html</id>
    <published>2023-04-28T07:50:00.000Z</published>
    <updated>2023-04-28T07:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渲染函数与h函数使用"><a class="markdownIt-Anchor" href="#渲染函数与h函数使用"></a> 渲染函数与h函数使用</h1><h2 id="渲染函数"><a class="markdownIt-Anchor" href="#渲染函数"></a> 渲染函数</h2><ul><li>渲染函数也称render函数：把虚拟DOM转换为真实DOM</li></ul><ol><li>组价先提取模板（字符串）、属性、数据，然后编译模板</li></ol><ul><li>因为模板中有html自身属性，也有非html自身属性</li><li>所以要变成AST树，他是个自定义的语法树<ul><li>将AST树优化，将浏览器不认识的属性把他形成一种逻辑（v-model…）并且去掉，最后形成html结构</li></ul></li><li>编译成虚拟DOM，他是真实DOM的一种描述<ul><li>比如你修改span的内容是123，修改后的值还是123，那么就没必要更新DOM（需要获取DOM节点，然后更新DOM节点）</li><li>描述虚拟DOM：就是一个对DOM节点描述的对象；比如这个对象里会保存span标签，value值；在修改span后，他会判断这个对象里的值是否变化，如果变化了在进行更新这个对象（更新虚拟节点）</li><li>更新：如果是一个嵌套节点，外层节点没有修改，内层节点修改了，那么会进行逐层对比，直到不一样的地方打一个补丁，span由123变成了234，进行更新</li></ul></li><li>形成渲染函数</li><li>走真实DOM</li></ul><h2 id="h函数"><a class="markdownIt-Anchor" href="#h函数"></a> h函数</h2><ul><li>vue2中render里的第一个参数回调是h函数，可以随便起名<ul><li>h函数：createNodeDescription 创建节点描述<ul><li>返回VNode 虚拟节点（返回对真实DOM的描述）</li><li>多个虚拟节点就会组成虚拟DOM树</li><li>虚拟DOM树就是对真实DOM树的描述</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>h函数的参数：</p><ul><li>component 组件</li><li>节点的描述（是你对节点的描述）</li></ul></li><li><p>vue3中render函数就没有h函数参数了，他的h函数是从vue中导入进来的，不可以改名</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="comment">//  h(App) 返回一个对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">App</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用h函数描述开发层面的html结构"><a class="markdownIt-Anchor" href="#用h函数描述开发层面的html结构"></a> 用h函数描述开发层面的HTML结构</h2><ul><li>h函数<ul><li>参数：<ul><li>第一个参数：节点标签；比如 ‘div’</li><li>第二个参数：对象，对节点的属性的描述；比如：{ class: ‘app’ }</li><li>第三个参数：<ul><li>可以是子节点: 多个节点的话是数组，单个子节点的话可以直接写h函数</li><li>可以文本节点，即value值: this.title</li></ul></li></ul></li><li>返回值：返回虚拟节点</li></ul></li></ul><blockquote><p>注意：h函数里边写的不是虚拟节点，他是我们开发层面对HTML结构的一种描述，h函数执行完成后会返回虚拟节点，然后用render函数渲染虚拟节点为真实DOM</p></blockquote><blockquote><p>开发的时候，不使用template，可以用h函数替代</p></blockquote><h2 id="h函数用法"><a class="markdownIt-Anchor" href="#h函数用法"></a> h函数用法</h2><h3 id="单个child"><a class="markdownIt-Anchor" href="#单个child"></a> 单个child</h3><ol><li>没有props，默认第二个参数是children</li><li>如果没有props，{}或null占用</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, [</span><br><span class="line">      <span class="string">&#x27;this is title&#x27;</span>,</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    ]);</span><br><span class="line">    <span class="comment">// return h(&#x27;h1&#x27;, null, &#x27;this is title&#x27;);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多个child不要用一个h函数返回的虚拟节点"><a class="markdownIt-Anchor" href="#多个child不要用一个h函数返回的虚拟节点"></a> 多个child不要用一个h函数返回的虚拟节点</h3><ul><li>不可以这样渲染，虽然他不报错，使用了同一个虚拟节点，但是在更新的时候会出错</li><li>不要使用一个h函数返回出来的虚拟节点来做子元素渲染，因为每个虚拟节点会有一个编号，以后操作的时候会出错</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> vNode = <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">      vNode, vNode</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>建议这样做：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> vNode = <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, <span class="literal">null</span>, <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">6</span> &#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="title function_">h</span>(</span><br><span class="line">          <span class="string">&#x27;h&#x27;</span> + (index + <span class="number">1</span>),</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          <span class="string">`this is h<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>`</span>)</span><br><span class="line">      )</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="h函数挂载根组件"><a class="markdownIt-Anchor" href="#h函数挂载根组件"></a> h函数挂载根组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">App</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="resolvecomponent方法"><a class="markdownIt-Anchor" href="#resolvecomponent方法"></a> resolveComponent方法</h3><ul><li>resolveComponent<ul><li>参数是组件名称</li><li>全局注册的组件</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  h,</span><br><span class="line">  resolveComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title function_">resolveComponent</span>(<span class="string">&#x27;App&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>注意：局部注册的App是等价的<ul><li><code>return h(App); === return h(resolveComponent('App'));</code></li></ul></li></ul><h3 id="v-if-v-show使用"><a class="markdownIt-Anchor" href="#v-if-v-show使用"></a> v-if v-show使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isOpen</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;this is title&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;close~~~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;img&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">src</span>: <span class="string">&#x27;./sf.png&#x27;</span>,</span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">display</span>: <span class="variable language_">this</span>.<span class="property">isOpen</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="v-for"><a class="markdownIt-Anchor" href="#v-for"></a> v-for</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">listData</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> titles = [<span class="string">&#x27;编号&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">            <span class="string">&#x27;table&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">border</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">              <span class="attr">width</span>: <span class="number">500</span></span><br><span class="line">            &#125;,</span><br><span class="line">            [</span><br><span class="line">              <span class="title function_">h</span>(</span><br><span class="line">                      <span class="string">&#x27;tr&#x27;</span>,</span><br><span class="line">                      <span class="literal">null</span>,</span><br><span class="line">                      titles.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;th&#x27;</span>, <span class="literal">null</span>, item))</span><br><span class="line">              ),</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">listData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;tr&#x27;</span>, <span class="literal">null</span>, <span class="title class_">Object</span>.<span class="title function_">keys</span>(item).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;td&#x27;</span>, <span class="literal">null</span>, item[key]);</span><br><span class="line">                &#125;))</span><br><span class="line">              &#125;)</span><br><span class="line">            ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="v-model-v-on"><a class="markdownIt-Anchor" href="#v-model-v-on"></a> v-model v-on</h3><ul><li>子组件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; h &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;VModel&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    username: String,</span><br><span class="line">    password: String</span><br><span class="line">  &#125;,</span><br><span class="line">  emits: [</span><br><span class="line">    &#x27;update:username&#x27;,</span><br><span class="line">    &#x27;update:password&#x27;,</span><br><span class="line">    &#x27;submit&#x27;</span><br><span class="line">  ],</span><br><span class="line">  render () &#123;</span><br><span class="line">    return h(&#x27;div&#x27;, null, [</span><br><span class="line">      h(&#x27;input&#x27;, &#123;</span><br><span class="line">        type: &#x27;text&#x27;,</span><br><span class="line">        value: this.username,</span><br><span class="line">        placeholder: &#x27;Username&#x27;,</span><br><span class="line">        onInput: $event =&gt; this.$emit(&#x27;update:username&#x27;, $event.target.value)</span><br><span class="line">      &#125;),</span><br><span class="line">      h(&#x27;input&#x27;, &#123;</span><br><span class="line">        type: &#x27;password&#x27;,</span><br><span class="line">        value: this.password,</span><br><span class="line">        placeholder: &#x27;Password&#x27;,</span><br><span class="line">        onInput: $event =&gt; this.$emit(&#x27;update:password&#x27;, $event.target.value)</span><br><span class="line">      &#125;),</span><br><span class="line">      h(&#x27;button&#x27;, &#123;</span><br><span class="line">        onClick: () =&gt; this.$emit(&#x27;submit&#x27;)</span><br><span class="line">      &#125;, &#x27;Submit&#x27;),</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>main中渲染</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  h,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VModel</span> <span class="keyword">from</span> <span class="string">&quot;./components/h/vModel.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">VModel</span>, &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span>,</span><br><span class="line">      <span class="string">&#x27;onUpdate:username&#x27;</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">username</span> = value,</span><br><span class="line">      <span class="string">&#x27;onUpdate:password&#x27;</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">password</span> = value,</span><br><span class="line">      <span class="string">&#x27;onSubmit&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>, <span class="variable language_">this</span>.<span class="property">password</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="v-slot"><a class="markdownIt-Anchor" href="#v-slot"></a> v-slot</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VSlot组件</span></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="title function_">default</span>()),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">class</span>: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="title function_">author</span>()),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">class</span>: <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="title function_">content</span>(&#123;</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;this is content&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染VSlot组件</span></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">VSlot</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;this is vSlot title&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;iCan&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="literal">null</span>, props.<span class="property">content</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态组件-dynamiccomponent"><a class="markdownIt-Anchor" href="#动态组件-dynamiccomponent"></a> 动态组件 DynamicComponent</h3><ul><li>Comp1组件</li><li>Comp2组件</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  h,</span><br><span class="line">  resolveDynamicComponent, <span class="comment">// 动态组件</span></span><br><span class="line">  defineAsyncComponent, <span class="comment">// 异步组件</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comp1</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./components/h/Comp1.vue&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comp2</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./components/h/Comp2.vue&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">currentComponentName</span>: <span class="string">&#x27;Comp1&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    currentComponent () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">currentComponentName</span> === <span class="string">&#x27;Comp1&#x27;</span></span><br><span class="line">              ? <span class="title class_">Comp1</span> : <span class="title class_">Comp2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> dComponent = <span class="title function_">resolveDynamicComponent</span>(<span class="variable language_">this</span>.<span class="property">currentComponent</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return h(dComponent); // 直接渲染dComponent</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">      <span class="title function_">h</span>(dComponent),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">onClick</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">currentComponentName</span> = <span class="variable language_">this</span>.<span class="property">currentComponentName</span> === <span class="string">&#x27;Comp1&#x27;</span> ? <span class="string">&#x27;Comp2&#x27;</span> : <span class="string">&#x27;Comp1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="string">&#x27;Switch Component&#x27;</span>)</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义指令-custom-directive"><a class="markdownIt-Anchor" href="#自定义指令-custom-directive"></a> 自定义指令 custom Directive</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  resolveDirective,</span><br><span class="line">  withDirectives</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;div v-pin:top.animate=&quot;200&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个自定义指令</span></span><br><span class="line"><span class="keyword">const</span> pin = <span class="title function_">resolveDirective</span>(<span class="string">&#x27;pin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">withDirectives</span>(<span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>), [</span><br><span class="line">  [pin, <span class="number">200</span>, <span class="string">&#x27;top&#x27;</span>, &#123; <span class="attr">animate</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">渲染函数与h函数</summary>
    
    
    
    <category term="Vue" scheme="https://lybinweb.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://lybinweb.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
