<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ICAN BLOG</title>
  <icon>https://www.gravatar.com/avatar/3b55730ce8227c56748646d6b16e5144</icon>
  <subtitle>思考、总结、分享</subtitle>
  <link href="https://lybinweb.github.io/atom.xml" rel="self"/>
  
  <link href="https://lybinweb.github.io/"/>
  <updated>2023-08-30T08:14:00.000Z</updated>
  <id>https://lybinweb.github.io/</id>
  
  <author>
    <name>ICAN</name>
    <email>1327899779@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go字符串长度、比较与转义符、格式化输出、strings包下的方法</title>
    <link href="https://lybinweb.github.io/posts/529dbad5/index.html"/>
    <id>https://lybinweb.github.io/posts/529dbad5/index.html</id>
    <published>2023-08-30T08:14:00.000Z</published>
    <updated>2023-08-30T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串长度-比较与转义符-格式化输出-strings包下的方法"><a class="markdownIt-Anchor" href="#字符串长度-比较与转义符-格式化输出-strings包下的方法"></a> 字符串长度、比较与转义符、格式化输出、strings包下的方法</h1><h2 id="字符串长度-比较与转义符"><a class="markdownIt-Anchor" href="#字符串长度-比较与转义符"></a> 字符串长度、比较与转义符</h2><h3 id="len"><a class="markdownIt-Anchor" href="#len"></a> len()</h3><ul><li><code>len()</code>: 内置方法 获取字符串长度<ol><li>英文字母不论大小写，每个字母都占1个字节</li><li>每个中文字都占3个字节</li><li>字符串是由字符组成的 <code>[I, \s, l, o, v, e, \s, y, o, u]</code>；这些字母或空格都可以看成一个 byte或rune</li><li>中文的情况下要用rune转切片</li></ol></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="string">&quot;I love you&quot;</span></span><br><span class="line">length := <span class="built_in">len</span>(a) <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">a := <span class="string">&quot;我爱你&quot;</span></span><br><span class="line">length := <span class="built_in">len</span>(a) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================</span></span><br><span class="line">a := <span class="string">&quot;I love you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []代表的是切片，把a字符串转换成每个元素为byte类型切片</span></span><br><span class="line"><span class="comment">// 每个元素都是一个ASCII码</span></span><br><span class="line">aBytes := []<span class="type">byte</span>(a) <span class="comment">// [73 ..........] 11个元素</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(aBytes)) <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================</span></span><br><span class="line">a := <span class="string">&quot;我爱你&quot;</span></span><br><span class="line"><span class="comment">// byte =&gt; uint8 =&gt; 0~255</span></span><br><span class="line">aBytes := []<span class="type">byte</span>(a) <span class="comment">// [230 ........] 9个元素</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(aBytes)) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rune切片</span></span><br><span class="line">aRunes := []<span class="type">rune</span>(a) <span class="comment">// [25150 ..] 3个元素</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(aRunes)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="转义符"><a class="markdownIt-Anchor" href="#转义符"></a> 转义符</h3><ul><li><code>\</code>: 将符号意义转换为普通文本字符的特性</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">title1 := <span class="string">&quot;他说: &quot;</span>我最喜欢《悲惨世界》中的冉阿让。<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// 需要用到转义符</span></span><br><span class="line">title2 := <span class="string">&quot;他说: \&quot;我最喜欢《悲惨世界》中的冉阿让。\&quot;&quot;</span></span><br><span class="line"><span class="comment">// 可以用反引号</span></span><br><span class="line">title3 := <span class="string">`他说: &quot;我最喜欢《悲惨世界》中的冉阿让。&quot;`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>\\</code>: 将转义符转义</li><li><code>\r</code>: 回车</li><li><code>\n</code>: 换行</li><li><code>\r\n</code>: 搭配一起用，换行</li><li><code>\t</code>: Tab键，制表符</li></ul><h3 id="字符串的比较"><a class="markdownIt-Anchor" href="#字符串的比较"></a> 字符串的比较</h3><ul><li><p>相等：<code>==</code></p></li><li><p>不等：<code>!=</code></p></li><li><p>条件：是字符串是否顺序与每个字母都相等</p></li><li><p>比较大小时：字符串依次进行ASCII码对比</p></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b := <span class="string">&quot;World&quot;</span></span><br><span class="line"></span><br><span class="line">a == b</span><br><span class="line">a &gt; b</span><br><span class="line">a &lt; b</span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a class="markdownIt-Anchor" href="#格式化输出"></a> 格式化输出</h2><h3 id="println-print"><a class="markdownIt-Anchor" href="#println-print"></a> Println, Print</h3><ul><li><code>Println</code> =&gt; print line<ul><li>P =&gt; 包外使用的方法</li><li>fmt =&gt; Println =&gt; 包外使用</li><li>有回车换行 <code>\r\n</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认有回车换行</span></span><br><span class="line">fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有回车换行</span></span><br><span class="line">fmt.Print(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">fmt.Print(<span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="printf-sprintf"><a class="markdownIt-Anchor" href="#printf-sprintf"></a> Printf, Sprintf</h3><ul><li><p><code>Printf</code> =&gt; print format</p></li><li><p><code>Sprintf</code> =&gt; 将格式化的字符串返回</p></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := <span class="string">&quot;Lyb&quot;</span></span><br><span class="line">age := <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能：Print &gt; Printf</span></span><br><span class="line">fmt.Print(<span class="string">&quot;My name is&quot;</span> + name + <span class="string">&quot;, I am&quot;</span> + strconv.Itoa(age) + <span class="string">&quot;years old.\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;My name is %s, I am %d years old.\r\n&quot;</span>, name, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res := fmt.Sprintf(<span class="string">&quot;My name is %s, I am %d years old.\r\n&quot;</span>, name, age)</span><br><span class="line"></span><br><span class="line"><span class="comment">// %T 打印类型</span></span><br><span class="line"><span class="comment">// %v </span></span><br><span class="line">str := <span class="string">&quot;abc&quot;</span></span><br><span class="line">strRunes := []<span class="type">rune</span>(str)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v&quot;</span>, strRunes) <span class="comment">// []int32&#123;97, 98, 99&#125;</span></span><br></pre></td></tr></table></figure><h3 id="stringsbuilder"><a class="markdownIt-Anchor" href="#stringsbuilder"></a> strings.Builder</h3><blockquote><p>性能最高的</p></blockquote><ul><li><code>strings</code> =&gt; 字符串方法包<ul><li>Builder =&gt; WriteString()</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringBuilder <span class="type">string</span>.Builder</span><br><span class="line"></span><br><span class="line">stringBuilder.WriteString(<span class="string">&quot;My name is&quot;</span>)</span><br><span class="line">stringBuilder.WriteString(name)</span><br><span class="line">stringBuilder.WriteString(<span class="string">&quot;, I am&quot;</span>)</span><br><span class="line">stringBuilder.WriteString(strconv.Itoa(age))</span><br><span class="line">stringBuilder.WriteString(<span class="string">&quot; years old.\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">res := stringBuilder.String()</span><br><span class="line">fmt.Println(res)</span><br></pre></td></tr></table></figure><h4 id="字符串的一些方法"><a class="markdownIt-Anchor" href="#字符串的一些方法"></a> 字符串的一些方法</h4><blockquote><p>strings是一个包</p></blockquote><ul><li><code>strings.Contains()</code>包含、检查（检查字符串中是否包含子字符串内容）<ul><li>参数：<ol><li>字符串</li><li>子字符串</li></ol></li><li>返回值：bool</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;我正在学习Go&quot;</span></span><br><span class="line">res := strings.Contains(str, <span class="string">&quot;Go&quot;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><p><code>strings.Count(&quot;我正在学习Go&quot;, &quot;Go&quot;)</code>检查字符串中出现子字符串的次数</p></li><li><p>参数：</p><ol><li>字符串</li><li>子字符串</li></ol></li><li><p>返回值：int</p></li><li><p><code>strings.Split()</code> 分割字符串组成切片 []</p><ul><li>参数：<ol><li>字符串</li><li>用什么进行分割的</li></ol></li><li>返回值：切片</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;GGGG-AAAA-BBBB&quot;</span></span><br><span class="line">res := strings.Split(str, <span class="string">&quot;-&quot;</span>)</span><br><span class="line">fmt.Println(res) <span class="comment">// [GGGG AAAA BBBB]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>strings.Index()</code> 子字符串在字符串中的位数<ul><li>参数：<ol><li>字符串</li><li>子字符串</li></ol></li><li>返回值：int</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">`&quot;This is Golang.&quot;`</span></span><br><span class="line">res := strings.Index(str, <span class="string">&quot;is&quot;</span>)</span><br><span class="line">fmt.Println(res) <span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>strings.Replace()</code> 替换字符串中的某个子字符串<ul><li>参数：<ol><li>字符串</li><li>需要替换的字符串</li><li>新字符串</li><li>替换几个(-1是全部替换)</li></ol></li><li>返回值：string</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;Go developer, Go engineer&quot;</span></span><br><span class="line">res := strings.Replace(str, <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="number">1</span>)</span><br><span class="line">fmt.Println(res) <span class="comment">// Java developer, Go engineer</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>strings.Trim()</code> 去除字符串前后指定的字符<ul><li>参数：<ol><li>字符串</li><li>指定要去掉前后的什么字符</li></ol></li><li>返回值：string</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;@Go developer, Go engineer&quot;</span></span><br><span class="line">res := strings.Trim(str, <span class="string">&quot;@&quot;</span>)</span><br><span class="line">fmt.Println(res) <span class="comment">// Go developer, Go engineer</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>strings.ToLower()</code> 将所有字符串转为小写</p><ul><li>参数：str</li><li>返回值：string</li></ul></li><li><p><code>strings.ToUpper()</code> 将所有字符串转为大写</p><ul><li>参数：str</li><li>返回值：string</li></ul></li><li><p><code>strings.HasPrefix()</code> 是否有某个前缀字符串</p><ul><li>参数：<ol><li>str</li><li>前缀字符串</li></ol></li><li>返回值：string</li></ul></li><li><p><code>strings.HasSuffix()</code> 是否有某个后缀字符串</p><ul><li>参数：<ol><li>str</li><li>前缀字符串</li></ol></li><li>返回值：string</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Go字符串长度、比较与转义符、格式化输出、strings包下的方法</summary>
    
    
    
    <category term="Go" scheme="https://lybinweb.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://lybinweb.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go算术运算</title>
    <link href="https://lybinweb.github.io/posts/c75f8f57/index.html"/>
    <id>https://lybinweb.github.io/posts/c75f8f57/index.html</id>
    <published>2023-08-29T08:14:00.000Z</published>
    <updated>2023-08-29T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算术运算"><a class="markdownIt-Anchor" href="#算术运算"></a> 算术运算</h2><ol><li><p><code>+</code> 加法算术运算、字符串拼接、正号</p></li><li><p><code>-</code> 减法、负号</p></li><li><p><code>*</code> 乘法</p></li><li><p><code>/</code> 除法</p></li><li><p><code>%</code> 取余</p></li><li><p><code>++</code> 自增</p></li><li><p><code>--</code> 自减</p></li><li><p>在go中算术运算是需要类型匹配的，不存在隐式类型转换</p></li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">100</span></span><br><span class="line">b := <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">res := a + b <span class="comment">// 无效的运算</span></span><br><span class="line">res := <span class="type">float64</span>(a) + b <span class="comment">// 强制类型转换后可以运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊：这样是可以的</span></span><br><span class="line">fmt.Println(<span class="number">100</span> + <span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line">a := <span class="literal">true</span></span><br><span class="line">b := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">res := a + b <span class="comment">// 无效的运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line">a := <span class="string">&quot;abc&quot;</span></span><br><span class="line">b := <span class="number">1</span></span><br><span class="line"></span><br><span class="line">res := a + b <span class="comment">// 无效的运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line">a := <span class="string">&quot;abc&quot;</span></span><br><span class="line">b := <span class="string">&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line">res := a + b <span class="comment">// 可以，字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">b := -a</span><br><span class="line"></span><br><span class="line">res := a + b <span class="comment">// 可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line">a := <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">byte</span> = <span class="string">&#x27;d&#x27;</span> <span class="comment">// uint8类型</span></span><br><span class="line"></span><br><span class="line">res := a + b <span class="comment">// 无效的运算，类型不匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span> <span class="comment">// uint8类型</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">byte</span> = <span class="string">&#x27;b&#x27;</span> <span class="comment">// uint8类型</span></span><br><span class="line"></span><br><span class="line">res := a + b <span class="comment">// 195 可以 (a-&gt;97 + b-&gt;98)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>除法会丢失小数部分</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span></span><br><span class="line"></span><br><span class="line">res := a / b <span class="comment">// 1 会丢失0.5，res的结果是int类型</span></span><br></pre></td></tr></table></figure><ol start="3"><li>字符串是不可以运算的</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="string">&quot;abc&quot;</span></span><br><span class="line">b := <span class="string">&quot;bcd&quot;</span></span><br><span class="line"></span><br><span class="line">res := a - b <span class="comment">// 无效的语法</span></span><br></pre></td></tr></table></figure><ol start="4"><li>byte类型可以运算</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// uint8类型 =&gt; 0~255 =&gt; 256</span></span><br><span class="line"><span class="comment">// 97 - 97 =&gt; -1 =&gt; 256 - 1 =&gt; 255</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">type</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">type</span> = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">res := a - b <span class="comment">// 255</span></span><br></pre></td></tr></table></figure><ol start="5"><li>除以0是不行的</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// runtime error 运行时错误</span></span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">b := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a / b) <span class="comment">// 编译时错误</span></span><br></pre></td></tr></table></figure><ol start="6"><li>除以0.0是可以的</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不断的向正无穷靠近</span></span><br><span class="line"></span><br><span class="line">a := <span class="number">1.0</span></span><br><span class="line">b := <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a / b) <span class="comment">// +Inf 正无穷</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line">a := <span class="number">-1.0</span></span><br><span class="line">b := <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a / b) <span class="comment">// -Inf 负无穷</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"></span><br><span class="line">a := <span class="number">0.0</span></span><br><span class="line">b := <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NaN是一个标识符</span></span><br><span class="line"><span class="comment">// 输出NaN：Math.NaN() -&gt; NaN</span></span><br><span class="line">fmt.Println(a / b) <span class="comment">// NaN 非数</span></span><br></pre></td></tr></table></figure><ul><li>总结：<ul><li>不合理的运算在Go中都是不可以的（字符串减法，布尔值运算）</li><li>参与运算的类型不统一，不能进行运算</li><li>byte、rune类型运算按照原类型进行（uint8、int32）</li><li>字符串之间的加法由字符串拼接</li><li>数值类型不统一，需要用类型转换进行算术运算</li><li>与字符串相加的其他类型需要将其他类型转换成字符串再拼接</li></ul></li></ul><h2 id="自增-自减"><a class="markdownIt-Anchor" href="#自增-自减"></a> 自增、自减</h2><ol><li>Go中 <code>++</code> <code>--</code> 不是表达式；不能参与运算或赋值</li><li><code>++</code> <code>--</code>是语句（statement），只能单独出现</li><li><code>++</code> <code>--</code>不能出现在变量前</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line">b := a ++ <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line">a ++ <span class="comment">// 相当于 a = a + 1</span></span><br><span class="line">b := a <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算"><a class="markdownIt-Anchor" href="#赋值运算"></a> 赋值运算</h2><ol><li><code>=</code> 赋值符号</li><li><code>a = a + 1</code> 二元运算</li><li><code>a += 1</code> 一元运算</li><li>统称求和赋值</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = a - <span class="number">1</span> =&gt; a -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = a + <span class="number">1</span> =&gt; a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = a * <span class="number">1</span> =&gt; a *= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = a / <span class="number">1</span> =&gt; a /= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = a % <span class="number">1</span> =&gt; a %= <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="关系运算"><a class="markdownIt-Anchor" href="#关系运算"></a> 关系运算</h2><ul><li>所有的关系运算都会返回：true或false</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;</span></span><br><span class="line"><span class="comment">&lt;</span></span><br><span class="line"><span class="comment">&gt;=</span></span><br><span class="line"><span class="comment">&lt;=</span></span><br><span class="line"><span class="comment">!= 不能</span></span><br><span class="line"><span class="comment">== 相等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逻辑运算"><a class="markdownIt-Anchor" href="#逻辑运算"></a> 逻辑运算</h2><ul><li>所有的关系运算都会返回：true或false<ul><li>或运算 <code>||</code>：一真为真，都假为假</li><li>与运算 <code>&amp;&amp;</code>：都真为真，一假为假</li><li>非运算 <code>!</code>：取反</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Go算术运算</summary>
    
    
    
    <category term="Go" scheme="https://lybinweb.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://lybinweb.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go类型转换</title>
    <link href="https://lybinweb.github.io/posts/c68fb73f/index.html"/>
    <id>https://lybinweb.github.io/posts/c68fb73f/index.html</id>
    <published>2023-08-28T08:14:00.000Z</published>
    <updated>2023-08-28T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数值类型转换"><a class="markdownIt-Anchor" href="#数值类型转换"></a> 数值类型转换</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// int8强制类型转换为uint8</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int8</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">uint8</span> = <span class="type">uint8</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int8</span> = <span class="number">-123</span></span><br><span class="line"><span class="comment">// 256 - 123 =&gt; 133</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">uint8</span> = <span class="type">uint8</span>(a) <span class="comment">// b =&gt; 133</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int32</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">int64</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int64</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">int32</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3.1415</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">float32</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">int32</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================</span></span><br><span class="line"><span class="comment">// 自定义金额类型</span></span><br><span class="line"><span class="comment">// 自定义类型不能用作默认类型</span></span><br><span class="line"><span class="keyword">type</span> typeAmount <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100.0000</span></span><br><span class="line"><span class="keyword">var</span> b = typeAmount(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================</span></span><br><span class="line"><span class="keyword">type</span> typeAmount <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> amount typeAmount = <span class="number">100.23424</span></span><br><span class="line"><span class="keyword">var</span> newAmount = <span class="number">100.23</span></span><br><span class="line">num := <span class="type">float64</span>(amount) - newAmount</span><br><span class="line">num := amount - typeAmount(newAmount)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================</span></span><br><span class="line"><span class="comment">// 获取类型 </span></span><br><span class="line"><span class="comment">// reflect.TypeOf()</span></span><br><span class="line"><span class="comment">// reflect.ValueOf(true).Kind()</span></span><br><span class="line"></span><br><span class="line">reflect.TypeOf(<span class="literal">true</span>) <span class="comment">// bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串与其他类型的转换"><a class="markdownIt-Anchor" href="#字符串与其他类型的转换"></a> 字符串与其他类型的转换</h2><h3 id="string类型转换为int类型"><a class="markdownIt-Anchor" href="#string类型转换为int类型"></a> string类型转换为int类型</h3><ul><li><p>strconv包：字符串转换包</p></li><li><p>nil：标识符，相当于空值</p></li><li><p>strconv.Atoi()方法：string转换为int的方法</p><ul><li>参数：字符串</li><li>返回值：<ol><li>int类型的值</li><li>error</li></ol></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">a, err := strconv.Atoi(str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(a) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>strconv.ParseInt()：string转int<ul><li>参数：<ol><li>string值</li><li>进制</li><li>位数 32|64</li></ol></li><li>返回值：输出十进制<ol><li>int值</li><li>error</li></ol></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把1000看做2进制 进行 10进制解析</span></span><br><span class="line">f, err := strconv.ParseInt(<span class="string">&quot;1000&quot;</span>, <span class="number">2</span>, <span class="number">64</span>)</span><br></pre></td></tr></table></figure><h3 id="int类型转换为string类型"><a class="markdownIt-Anchor" href="#int类型转换为string类型"></a> int类型转换为string类型</h3><ul><li>strconv.Itoa()<ul><li>参数：数字</li><li>返回值：字符串</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> str := strconv.Itoa(a) <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure><h3 id="string转float"><a class="markdownIt-Anchor" href="#string转float"></a> string转float</h3><ul><li>strconv.ParseFloat<ul><li>参数：<ol><li>字符串</li><li>32或者64</li></ol></li><li>返回值：<ol><li>转成的float值</li><li>error</li></ol></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换用32位，返回值是64位的float类型值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123.34343&quot;</span></span><br><span class="line"><span class="keyword">var</span> f, err = strconv.ParseFloat(a, <span class="number">32</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="string转bool"><a class="markdownIt-Anchor" href="#string转bool"></a> string转bool</h3><ul><li>strconv.ParseBool()<ul><li>参数：string</li><li>返回值：<ol><li>bool值</li><li>error</li></ol></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">b1 := strconv.ParseBool(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">b2 := strconv.ParseBool(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">b3 := strconv.ParseBool(<span class="string">&quot;1&quot;</span>) <span class="comment">// true</span></span><br><span class="line">b4 := strconv.ParseBool(<span class="string">&quot;0&quot;</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">b4 := strconv.ParseBool(<span class="string">&quot;123&quot;</span>) <span class="comment">// 报错</span></span><br><span class="line">b4 := strconv.ParseBool(<span class="string">&quot;abc&quot;</span>) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="bool转string"><a class="markdownIt-Anchor" href="#bool转string"></a> bool转string</h3><ul><li>strconv.FormatBool()<ul><li>参数：bool值</li><li>返回值：string</li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">aStr := strconv.FormatBool(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="float类型转换string类型"><a class="markdownIt-Anchor" href="#float类型转换string类型"></a> float类型转换string类型</h3><ul><li>FormatFloat<ol><li>float64</li><li>fmt</li><li>精度 最小位数的精度（1 -&gt; 小数点后一位）</li><li>32/64</li></ol></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">bStr := strconv.FormatFloat(<span class="number">3.1415926</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">1</span>, <span class="number">64</span>) <span class="comment">// 3.1</span></span><br><span class="line">bStr := strconv.FormatFloat(<span class="number">3.1415926</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">2</span>, <span class="number">64</span>) <span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure><h3 id="int类型转换string类型"><a class="markdownIt-Anchor" href="#int类型转换string类型"></a> int类型转换string类型</h3><ul><li>FormatInt<ul><li>参数<ol><li>把他看成10进制进行转换</li><li>要转换成的进制</li></ol></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把100作为10进制进行2进制转换并转换字符串输出</span></span><br><span class="line">cStr := strconv.FormatInt(<span class="number">100</span>, <span class="number">2</span>) <span class="comment">// 1100100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go类型转换</summary>
    
    
    
    <category term="Go" scheme="https://lybinweb.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://lybinweb.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go基本类型</title>
    <link href="https://lybinweb.github.io/posts/b85d8db0/index.html"/>
    <id>https://lybinweb.github.io/posts/b85d8db0/index.html</id>
    <published>2023-08-27T08:14:00.000Z</published>
    <updated>2023-08-27T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数值类型"><a class="markdownIt-Anchor" href="#数值类型"></a> 数值类型</h2><ul><li>数值类型<ul><li>整型</li><li>浮点型</li><li>复数</li><li>指针</li></ul></li></ul><table><thead><tr><th>类型名</th><th>字节数</th><th>二进制存储位数</th><th>取值范围</th></tr></thead><tbody><tr><td>整型</td><td></td><td></td><td></td></tr><tr><td>int</td><td>4(32位)/8(64位)</td><td>32/64</td><td>-2<sup>31~2</sup>31-1/-2<sup>63~2</sup>63-1</td></tr><tr><td>int8(byte)</td><td>1</td><td>8</td><td>-2<sup>7~2</sup>7-1(-128~127)</td></tr><tr><td>int16(short)</td><td>2</td><td>16</td><td>-2<sup>15~2</sup>15-1(-32768~32767)</td></tr><tr><td>int32(int)</td><td>4</td><td>32</td><td>-2<sup>31~2</sup>31-1(-2147483648~2147483647)</td></tr><tr><td>int32(long)</td><td>8</td><td>64</td><td>-2<sup>63~2</sup>63-1</td></tr><tr><td>浮点型</td><td></td><td></td><td></td></tr><tr><td>float32(float)</td><td>4</td><td>32</td><td>-3.4E+38~-1.4E-45(负数的取值范围)  1.4E-45~3.4E+38(正数的取值范围)</td></tr><tr><td>float64(double)</td><td>8</td><td>64</td><td>-1.7E+308~-4.9E-324(负数的取值范围)  4.9E-324~1.7E+308(正数的取值范围)</td></tr></tbody></table><ul><li><p>复数：</p><ul><li>complex64 两个float32（一个表示32位实部，一个表示32位虚部）</li><li>complex128 两个float64（一个表示64位实部，一个表示64位虚部）</li></ul></li><li><p>有符号的整数类型（可表示正负数）：int, int8, int16, int32, int64</p></li><li><p>无符号的整数类型（从0开始的取值范围）：uint, uint8, uint16, uint32, uint64, uintptr(4/8个字节，用来存储指针的，无符号整型)</p></li><li><p>区别：</p><ol><li>取值范围不同</li><li>int内存占用略大于uint</li><li>使用场景不同</li></ol></li><li><p>complex：一般用于科学计算</p></li><li><p>整型默认类型：int(32/64)</p></li><li><p>浮点型默认类型：float64</p></li><li><p>理解为数值类型：</p><ul><li>type byte = uint8 =&gt; 可以表示ASCII码的一个字符 <code>a =&gt; 97</code></li><li>type rune = int32 =&gt; 可以表示Unicode码的一个字符 <code>'中' =&gt; 20...</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a <span class="type">int</span> = <span class="number">1</span></span><br><span class="line">b <span class="type">int8</span> = <span class="number">127</span></span><br><span class="line">c <span class="type">int16</span> = <span class="number">32767</span></span><br><span class="line">d <span class="type">int32</span> = <span class="number">2147483647</span></span><br><span class="line">e <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line">f <span class="type">float64</span> = <span class="number">3.1415926</span></span><br><span class="line">g <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">h <span class="type">byte</span> = <span class="number">97</span></span><br><span class="line">i <span class="type">uint8</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">k <span class="type">rune</span> = <span class="string">&#x27;中&#x27;</span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布尔类型"><a class="markdownIt-Anchor" href="#布尔类型"></a> 布尔类型</h2><ul><li>布尔类型：是与非、真与假、对与错、成立与不成立<ul><li>1 &gt; 2 <code>false</code></li><li>1 &lt; 2 <code>true</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">bool</span> <span class="comment">// 类型不可以省略，因为他没有初始化</span></span><br><span class="line">a = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span> <span class="comment">// 需要用常量声明, 因为true是不变的量，推断b为bool类型</span></span><br><span class="line"><span class="keyword">const</span> b1 = <span class="literal">true</span> <span class="comment">// 类型可以省略</span></span><br><span class="line"></span><br><span class="line">c := <span class="literal">false</span> <span class="comment">// 需要用常量声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="byte类型"><a class="markdownIt-Anchor" href="#byte类型"></a> byte类型</h2><ul><li><p>byte类型：（本质就是字符）</p><ol><li>byte类型是用来存放字符编码的类型 <code>uint8 0~255</code></li><li>字符一定用单引号</li><li>字符存储本质上是字符编码的存储</li><li>ASCII码本质上就是一个字符对应一个整数的字符与数字之间的交换<code>a =&gt; 97, b =&gt; 98 ...</code></li><li>byte字符的存储就是对字符对应的ASCII码进行存储</li><li>byte（别名）：<code>type byte = uint8</code></li></ol></li><li><p>ASCII：American Standard Code for Information Interchange 美国信息交换标准代码</p></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">type</span></span><br><span class="line">a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">fmt.Println(a) <span class="comment">// 97</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>, a) <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b <span class="type">byte</span> = <span class="string">&#x27;b&#x27;</span> <span class="comment">// 必须声明类型，不能用&#x27;b&#x27;来推断变量b是byte类型；否则b的类型会更大</span></span><br><span class="line">fmt.Println(b) <span class="comment">// 98</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;c&#x27;</span> <span class="comment">// 类型推断出c是int32类型</span></span><br><span class="line">fmt.Println(c) <span class="comment">// 99</span></span><br><span class="line"></span><br><span class="line">d := <span class="string">&#x27;d&#x27;</span></span><br><span class="line">fmt.Println(d) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bb <span class="type">byte</span> = b + <span class="number">1</span> <span class="comment">// 可以运算的，因为b的类型也是byte</span></span><br><span class="line">fmt.Println(bb) <span class="comment">// 99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rune类型"><a class="markdownIt-Anchor" href="#rune类型"></a> rune类型</h2><ul><li>rune类型<ol><li>rune类型是int32的别名，用来存放字符串编码的类型</li><li>存储更多字符的编码，可以存储包含所有unicode码对应的字符（unicode的存在本质上就是对ASCII码的扩展）</li><li>rune存储的是字符对应的编码</li></ol></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ch1 = <span class="string">&#x27;哈&#x27;</span> <span class="comment">// 右边可以推断出左边来</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>, ch1) <span class="comment">// 哈</span></span><br><span class="line">fmt.Println(bb) <span class="comment">// 21704</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ch2 <span class="type">rune</span> = <span class="number">21704</span> <span class="comment">// 不可以推断出ch2是rune类型，如果指定的话会推断ch2为int类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Go中没有char类型，他把所有的字符看成一个码，他对应上ASCII码或者unicode码</p></blockquote><h2 id="string类型"><a class="markdownIt-Anchor" href="#string类型"></a> string类型</h2><ul><li>string类型<ol><li>存储字符集合的类型</li><li>值要用双引号</li><li>一个中文字占3个字节</li></ol></li></ul><pre class="highlight"><code class="go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span> = <span class="hljs-string">"我爱你"</span> <span class="hljs-comment">// 没必要写string了，他可以推断出来</span><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">"我爱你"</span> <span class="hljs-comment">// 推荐这样写</span>str3 := <span class="hljs-string">"我爱你"</span><span class="hljs-comment">// 字符串拼接用 + 号</span><span class="hljs-comment">// 获取字符串长度方法：len()</span><span class="hljs-built_in">len</span> := <span class="hljs-built_in">len</span>(str3)&#125;</code></pre>]]></content>
    
    
    <summary type="html">Go基本类型</summary>
    
    
    
    <category term="Go" scheme="https://lybinweb.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://lybinweb.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go数据类型概念、内存存储的基本认识</title>
    <link href="https://lybinweb.github.io/posts/f6985258/index.html"/>
    <id>https://lybinweb.github.io/posts/f6985258/index.html</id>
    <published>2023-08-26T08:14:00.000Z</published>
    <updated>2023-08-26T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型概念"><a class="markdownIt-Anchor" href="#数据类型概念"></a> 数据类型概念</h2><ul><li>Go是典型的强类型语言</li></ul><ol><li>强类型语言（静态语言）<ul><li>类型是在编译阶段确认，并且不能随意更改</li></ul></li><li>若类型语言（动态语言）<ul><li>运行时进行类型推断，并且可以进行类型转换</li></ul></li></ol><h3 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型"></a> 基本数据类型</h3><ol><li>布尔型 <code>bool</code> -&gt; <code>true false</code></li><li>数值型<ul><li>整型</li><li>浮点型</li></ul></li><li>字符串型 <code>string</code></li></ol><h3 id="派生数据类型"><a class="markdownIt-Anchor" href="#派生数据类型"></a> 派生数据类型</h3><ol><li>指针</li><li>数组 <code>Array</code></li><li>结构体 <code>struct</code></li><li>通道 <code>channel</code></li><li>切片 <code>slice</code></li><li>接口 <code>interface</code></li><li><code>Map</code></li><li>函数 <code>func</code></li></ol><h2 id="数据类型的分类"><a class="markdownIt-Anchor" href="#数据类型的分类"></a> 数据类型的分类</h2><ul><li>值类型：布尔类型、数值类型、字符串类型、数组类型、结构体类型</li><li>引用类型：指针、通道、切片、接口、Map、函数</li></ul><h2 id="内存存储的基本认识"><a class="markdownIt-Anchor" href="#内存存储的基本认识"></a> 内存存储的基本认识</h2><h3 id="值类型"><a class="markdownIt-Anchor" href="#值类型"></a> 值类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// x的值跟y的值 并不是指向同一个内存空间</span></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">int</span> = x</span><br><span class="line"></span><br><span class="line">标识符  地址   内存空间</span><br><span class="line">x    <span class="number">0x0001</span>    <span class="number">1</span></span><br><span class="line">y    <span class="number">0x0002</span>    <span class="number">1</span> =&gt; x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 声明x变量</span><br><span class="line"><span class="number">2.</span> 将<span class="number">1</span>赋值给x</span><br><span class="line"><span class="number">3.</span> 声明y变量</span><br><span class="line"><span class="number">4.</span> 将x存储到值<span class="number">1</span>拷贝一份</span><br><span class="line"><span class="number">5.</span> 将拷贝的<span class="number">1</span>赋值给变量y</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>这样的存储操作的值 -&gt; 值类型</li><li>值类型一般由内存中的栈内存进行空间分配</li><li>值类型的值是固定内存空间大小</li></ol><h3 id="引用类型"><a class="markdownIt-Anchor" href="#引用类型"></a> 引用类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = x</span><br><span class="line">y.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">x = ? [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = ? [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">标识符内存地址栈内存空间  内存地址  堆内存</span><br><span class="line">x      <span class="number">0x0001</span><span class="number">0x1001</span>----&gt;  <span class="number">0x1001</span>    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y      <span class="number">0x0002</span><span class="number">0x1001</span>  ----&gt;  </span><br><span class="line"></span><br><span class="line">a      <span class="number">0x0003</span><span class="number">1</span></span><br><span class="line">b      <span class="number">0x0004</span>     <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> x对应的栈内存空间为堆内存空间的一个地址（指针）</span><br><span class="line"><span class="number">2.</span> 通过这个地址来访问堆内存对应地址的空间</span><br><span class="line"><span class="number">3.</span> 从空间中取出值</span><br><span class="line"><span class="number">4.</span> 引用类型引用的是堆内存对应空间的地址</span><br><span class="line"><span class="number">5.</span> 如果多个变量引用了同一个地址，那么他们共享值</span><br><span class="line"><span class="number">6.</span> 引用类型一般对于内存空间的分配是动态的</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="type">int</span> = &amp;x <span class="comment">// 声明一个指针拿到x变量的地址</span></span><br><span class="line"></span><br><span class="line">*ptr = <span class="number">100</span> <span class="comment">// 修改x变量地址的值为100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go数据类型概念、内存存储的基本认识</summary>
    
    
    
    <category term="Go" scheme="https://lybinweb.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://lybinweb.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go标识符、Go变量</title>
    <link href="https://lybinweb.github.io/posts/3cc91e35/index.html"/>
    <id>https://lybinweb.github.io/posts/3cc91e35/index.html</id>
    <published>2023-08-25T08:14:00.000Z</published>
    <updated>2023-08-25T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h2><ul><li>Identifiers 标识符</li><li>Go程序员自己可以决定命名的内容全部是标识符（变量、常量、函数、结构体、接口）</li></ul><h3 id="标识符命名方式"><a class="markdownIt-Anchor" href="#标识符命名方式"></a> 标识符命名方式</h3><ul><li><p>camelCase：驼峰命名法 - helloWorld</p></li><li><p>pascalCase：帕斯卡命名法 - HelloWorld</p></li><li><p>snake_case：蛇形命名法 - hello_world/HELLO_WORLD</p></li><li><p>kebab_case：中横线命名法 - hello-world</p></li><li><p>space case：空格命名法 - hello world 【编程中不用】</p></li><li><p>Go语言中使用标识符的元素：（除开下划线以外的所有符号都不可使用）</p><ol><li>大写字母</li><li>小写字母</li><li>数字</li><li>下划线</li></ol></li><li><p>规则：</p><ol><li>不能以数字开头</li><li>不能带有下划线以外的符号</li><li>不允许有空格</li><li>严格区分大小写</li><li>语义要清晰明了、简洁</li><li>关键字与预定义标识符不能作为标识符（import package …）</li></ol></li><li><p>Go中的命名规范</p><ul><li>项目名 my-project<ol><li>中横线隔开</li><li>全部小写字母</li></ol></li><li>包名 calculator<ol><li>包名与目录名（文件夹名）保持一致</li><li>全部小写</li><li>不能使用下划线</li><li>包名不能用标准库的名称（os、fmt …）</li></ol></li><li>模块名 user_info.go<ol><li>全部小写</li><li>单词用下划线隔开</li></ol></li><li>常量 HTTP_PORT<ol><li>全部大写</li><li>用下划线隔开</li></ol></li><li>结构体：遵循变量的命名规则</li><li>接口名：er后缀、遵循变量的命名规则</li><li>函数名和普通变量：（严格区分大小写）<ol><li>任何需要在包外暴露被使用的标识符都必须要以大写字母开头（fmt.Println(“hello world”)） public</li><li>任何不需要在包外暴露被使用的标识符都必须以小写字母开头（user.getName()） privated</li></ol></li></ul></li></ul><h2 id="go变量"><a class="markdownIt-Anchor" href="#go变量"></a> Go变量</h2><ul><li>变量：方便计算机语言编程时，从内存中取值和向内存中存值的工具</li></ul><h3 id="变量的声明"><a class="markdownIt-Anchor" href="#变量的声明"></a> 变量的声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关键字 变量标识符 变量类型 赋值符号 值</span></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>变量声明可以不初始化 <code>var x int</code></li><li>变量初始化可以在变量声明之后进行 <code>x = 1</code></li><li>变量赋值或初始化不是使用变量</li><li>值必须与变量声明时给出的类型保持一致</li></ol><ul><li><p>注意点：</p><ol><li>先声明后使用</li><li>变量声明后必须使用</li><li>同一作用域下不能重复声明一个变量</li><li>多个变量可以使用单一声明法 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">string</span> = <span class="string">&quot;111&quot;</span></span><br><span class="line"><span class="keyword">var</span> z <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单一声明</span></span><br><span class="line"><span class="keyword">var</span> x, y, z <span class="type">int</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">z = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单一声明 类型推断</span></span><br><span class="line"><span class="keyword">var</span> x, y, z = <span class="number">1</span>, <span class="string">&quot;acb&quot;</span>, <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>多个变量可以批量声明 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">x <span class="type">int</span> = <span class="number">1</span></span><br><span class="line">y <span class="type">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line">z <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a <span class="type">int</span> </span><br><span class="line">b <span class="type">string</span></span><br><span class="line">c <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">&quot;111&quot;</span></span><br><span class="line">c = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>可以使用类型推断 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从右到左推断</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>可以使用短变量语法（只能使用在函数内部，不能使用在函数外部） <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 短变量 :=</span></span><br><span class="line"><span class="comment">// 声明int类型的x变量，然后将x = 1</span></span><br><span class="line">x := <span class="number">1</span></span><br><span class="line">y := <span class="string">&quot;abc&quot;</span></span><br><span class="line">z := <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>短变量可以批量声明赋值 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x, y, z := <span class="number">1</span>, <span class="string">&quot;abc&quot;</span>, <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var x, y, z = 1, &quot;acb&quot;, true</span></span><br></pre></td></tr></table></figure></li><li>可以使用匿名变量 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下划线声明的变量就是 匿名变量</span></span><br><span class="line"><span class="comment">// 作用：Go变量声明后必须使用，但是匿名变量声明后就可以不使用</span></span><br><span class="line">x, _, z := getXYZ()</span><br><span class="line"></span><br><span class="line">fmt.Println(x, z)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getXYZ</span> <span class="params">()</span></span> (<span class="type">int</span>, <span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>, <span class="string">&quot;abc&quot;</span>, <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>注意：Go语言的函数外部是不能使用赋值语句，只能出现声明语句</p></li></ul><h3 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h3><ol><li>沿用了数学中常数的基本特性</li><li>常量是被开发者定义的量</li><li>常量在初始化后，是不可以被修改的</li><li>常量不可以在同一作用域下重复声明</li></ol><ul><li><p>作用：代替值的重复使用，且限制其值的改变</p></li><li><p>原理：常量在编译时确定其值，运行时不可变其值</p></li><li><p>关键字：const</p></li><li><p><code>const PI float32 = 3.14</code></p></li><li><p>注意点：</p><ol><li>常量在声明时必须初始化</li><li>常量没有严格要求声明后必须使用，但会警告，不影响编译</li><li>常量值不可修改</li><li>常量也可以使用类型推断 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型推断</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></li><li>常量可以批量声明（批量声明常量的时候，第一个常量必须要初始化，后续的常量可以不初始化） <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量声明</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">name = <span class="string">&quot;lyb&quot;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续常量在编译时，自动赋值第一个常量的值</span></span><br><span class="line"><span class="comment">// 后续没有初始化值的常量，在编译时会使用最后一个赋值的常量值作为常量值</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>常量可以单一声明（多重声明） <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name, age = <span class="string">&quot;lyb&quot;</span>, <span class="number">20</span></span><br></pre></td></tr></table></figure></li><li>iota 不是英文单词缩写<ul><li>英文单词的意思：微小的量</li><li>iota在编译时可以修改常量值，默认起始值为0，常量每声明一个，iota迭代一次（+1）</li><li>运用iota相当于使用常量迭代器来初始化常量值</li></ul> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">效果：</span></span><br><span class="line"><span class="comment">a = 0</span></span><br><span class="line"><span class="comment">b = 1</span></span><br><span class="line"><span class="comment">c = 2</span></span><br><span class="line"><span class="comment">d = 3</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="literal">iota</span></span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">效果：</span></span><br><span class="line"><span class="comment">a = 0 </span></span><br><span class="line"><span class="comment">b = 0</span></span><br><span class="line"><span class="comment">c = 2</span></span><br><span class="line"><span class="comment">d = 3</span></span><br><span class="line"><span class="comment">e = 4</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b </span><br><span class="line">c = <span class="literal">iota</span></span><br><span class="line">d </span><br><span class="line">e</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">匿名常量也同样会迭代</span></span><br><span class="line"><span class="comment">a = 0</span></span><br><span class="line"><span class="comment">_ = 1</span></span><br><span class="line"><span class="comment">b = 2</span></span><br><span class="line"><span class="comment">_ = 3</span></span><br><span class="line"><span class="comment">c = 4</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="literal">iota</span></span><br><span class="line">_</span><br><span class="line">b</span><br><span class="line">_</span><br><span class="line">c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例子</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">type</span> Weekday <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">SUN Weekday = <span class="literal">iota</span></span><br><span class="line">MON</span><br><span class="line">TUE</span><br><span class="line">WED </span><br><span class="line">THU</span><br><span class="line">FRI </span><br><span class="line">SAT</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
    <summary type="html">Go标识符、Go变量</summary>
    
    
    
    <category term="Go" scheme="https://lybinweb.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://lybinweb.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>认识Go</title>
    <link href="https://lybinweb.github.io/posts/2a2f5d02/index.html"/>
    <id>https://lybinweb.github.io/posts/2a2f5d02/index.html</id>
    <published>2023-08-24T08:14:00.000Z</published>
    <updated>2023-08-24T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识go"><a class="markdownIt-Anchor" href="#认识go"></a> 认识Go</h2><ul><li><p>Go</p><ul><li><p>Golang：Google开源的 静态强类型、编译型语言</p></li><li><p>2007年开始设计 2009.11正式发布</p></li><li><p>2005年：AMD双核处理器的诞生</p><ul><li>优势：并发携程设计</li><li>目的：替代C++</li><li>理念：推崇C语言的编码简洁与Python的小巧易用</li></ul></li><li><p>特点</p><ul><li>语法简洁，开发高效</li><li>性能高、部署简单</li><li>并发编程高效 Goroutine</li><li>编译速度快</li></ul></li></ul></li><li><p><code>go.dev</code> go官网</p></li><li><p>Go 不需要打分号</p></li><li><p>Go官方不推荐在一个文件夹下有多个main、一个文件内不允许有多个main声明</p></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> build test.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">go</span> run test</span><br></pre></td></tr></table></figure><h2 id="常用命令与组织代码"><a class="markdownIt-Anchor" href="#常用命令与组织代码"></a> 常用命令与组织代码</h2><ul><li><code>go build main.go</code><ul><li>编译并生成可执行文件</li><li>命令行目录在哪个文件夹下，可执行文件就生成在哪个文件夹下</li></ul></li><li><code>go run main.go</code><ul><li>运行go程序</li><li>无论有没有可执行文件，都会先编译二进制再运行程序</li></ul></li><li><code>go mod init test2</code><ul><li>初始化项目：创建<code>go.mod</code>文件（包管理工具）</li></ul></li><li><code>go get</code><ul><li>下载并安装包与其依赖项</li><li>例如：go get <a href="http://github.com/go-redis/redis">github.com/go-redis/redis</a></li></ul></li><li><code>go install</code><ul><li>编译与安装包</li></ul></li><li><code>go clean</code><ul><li>删除源码包和关联源码包里编译生成的文件</li></ul></li><li><code>go doc</code><ul><li>查看文档</li></ul></li><li><code>go env</code><ul><li>查看Go环境变量</li></ul></li><li><code>go fmt</code><ul><li>格式化文档</li></ul></li><li><code>go version</code><ul><li>查看Go当前版本</li></ul></li><li><code>go tool</code><ul><li>查看Go工具</li></ul></li></ul><ol><li><p>创建项目</p></li><li><p>初始化项目：go mod init test</p></li><li><p>创建包：新建文件夹</p></li><li><p>创建模块：新建logic.go文件</p></li><li><p>在根目录底下创建main.go文件</p></li><li><p>一个文件中只允许有一个main</p></li><li><p>一个文件夹下同级目录不推荐有多个main方法</p></li><li><p>当运行go文件时，main方法会自动被调用</p></li><li><p>一个包内部调用，不需要包名引导；不同包之间调用方法，需要有包名引导</p></li></ol><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><ol><li>func -&gt; function函数的声明</li><li>Plus -&gt; 函数名称（需要公共调用的方法需要大驼峰）</li><li>类型定义 -&gt; Go语言中类型定义放在变量后面</li><li>a与b都是函数参数，在调用时传实参</li><li>返回值类型定义 -&gt; 参数括号后面</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Plus</span> <span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">认识Go</summary>
    
    
    
    <category term="Go" scheme="https://lybinweb.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://lybinweb.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>线性柱状图开发</title>
    <link href="https://lybinweb.github.io/posts/4d604634/index.html"/>
    <id>https://lybinweb.github.io/posts/4d604634/index.html</id>
    <published>2023-08-04T08:40:00.000Z</published>
    <updated>2023-08-04T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性柱状图开发"><a class="markdownIt-Anchor" href="#线性柱状图开发"></a> 线性柱状图开发</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">3px</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> <span class="selector-class">.round</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#85C35E</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#85C35E</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> <span class="selector-class">.round</span><span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: transform .<span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;can&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">axis1</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;降水量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unit</span>: <span class="string">&quot;ml&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: [<span class="number">6</span>, <span class="number">32</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">68.7</span>, <span class="number">100.7</span>, <span class="number">125.6</span>, <span class="number">112.2</span>, <span class="number">78.7</span>, <span class="number">48.8</span>, <span class="number">36.0</span>, <span class="number">19.3</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">max</span>: <span class="number">250</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">axis2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;温度&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unit</span>: <span class="string">&#x27;°C&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">max</span>: <span class="number">25</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="number">6.0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">10.2</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">10.3</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">11.5</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">10.3</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">13.2</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">14.3</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">16.4</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">18.0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">16.5</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">12.0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="number">5.2</span></span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">bottom</span>: [</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;1月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;2月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;3月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;4月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;5月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;6月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;7月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;8月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;9月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;10月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;11月&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;12月&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oRound = oContainer.<span class="title function_">querySelector</span>(<span class="string">&#x27;.round&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> circleData = [];</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canPaddingX = <span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canPaddingY = <span class="number">70</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> axisXGap = <span class="number">40</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> bottomTextGap = <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> totalHeight = <span class="number">5</span> * axisXGap;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> lineCount = <span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> axisXWidth = axisXGap * <span class="number">2</span> + (data.<span class="property">bottom</span>.<span class="property">length</span> - <span class="number">1</span>) * bottomTextGap;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canWidth = axisXWidth + canPaddingX * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canHeight = axisXGap * <span class="number">5</span> + canPaddingY * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    oContainer.<span class="property">style</span>.<span class="property">width</span> = canWidth + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    oContainer.<span class="property">style</span>.<span class="property">height</span> = canHeight + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> xGap = canPaddingY;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> leftNumber = data.<span class="property">axis2</span>.<span class="property">max</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> rightNumber = data.<span class="property">axis1</span>.<span class="property">max</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> textGap = bottomTextGap;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      adaptDpr (oCan, canWidth, canHeight);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bindEvent</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">setDefaultStyle</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawAxisField</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawAxisLines</span>(drawBottomText);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawCircles</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawCircleConnectors</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">drawRects</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleCanvasMouseOver, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handleCanvasMouseOver</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> x = e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> y = e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> circlePos = <span class="title function_">checkInPath</span>(x, y);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (circlePos.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">style</span>.<span class="property">left</span> = circlePos[<span class="number">0</span>] - <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">style</span>.<span class="property">top</span> = circlePos[<span class="number">1</span>] - <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        oRound.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setDefaultStyle</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">lineCap</span> = <span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">lineJoin</span> = <span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">font</span> = <span class="string">&#x27;14px Arial&#x27;</span>; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawAxisField</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> textPosX = xGap - <span class="number">30</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#333&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(data.<span class="property">axis2</span>.<span class="property">name</span>, canPaddingY, textPosX);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(data.<span class="property">axis1</span>.<span class="property">name</span>, axisXWidth + canPaddingX - <span class="number">20</span>, textPosX);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawAxisLines</span> (callback) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lineCount; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> isFinalLine = i === lineCount - <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawAxisLine</span>(isFinalLine);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (isFinalLine) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">bottom</span>.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">callback</span>(i);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircles</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">axis2</span>.<span class="property">data</span>.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        drawCircle (i);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircleConnectors</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; circleData.<span class="property">length</span> - <span class="number">1</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawCircleConnector</span>(i);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawRects</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">axis1</span>.<span class="property">data</span>.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawRect</span>(i);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawBottomText</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> text = data.<span class="property">bottom</span>[index];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> bottomTextWidth = ctx.<span class="title function_">measureText</span>(text).<span class="property">width</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> startX = canPaddingX + axisXGap + index * textGap; </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(startX, xGap - axisXGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">lineTo</span>(startX, xGap - axisXGap + <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(text, startX - bottomTextWidth / <span class="number">2</span>, xGap - axisXGap + <span class="number">30</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawAxisLine</span> (isFinalLine) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> leftText = leftNumber + <span class="string">&#x27; &#x27;</span> + data.<span class="property">axis2</span>.<span class="property">unit</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> rightText = rightNumber + <span class="string">&#x27; &#x27;</span> + data.<span class="property">axis1</span>.<span class="property">unit</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;middle&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">strokeStyle</span> = isFinalLine ? <span class="string">&#x27;#333&#x27;</span> : <span class="string">&#x27;#ccc&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#333&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(canPaddingX, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">lineTo</span>(axisXWidth + canPaddingX, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">textAlign</span> = <span class="string">&#x27;end&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(leftText, canPaddingX - <span class="number">10</span>, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">textAlign</span> = <span class="string">&#x27;start&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillText</span>(rightText, axisXWidth + canPaddingX + <span class="number">10</span>, xGap);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      leftNumber -= <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">      rightNumber -= <span class="number">50</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      xGap += axisXGap;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircle</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x, y ] = <span class="title function_">cToPx</span>(index);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      circleData.<span class="title function_">push</span>([ x, y ]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#85C35E&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">arc</span>(x - <span class="number">2</span>, y - <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawCircleConnector</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x1, y1 ] = circleData[index];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x2, y2 ] = circleData[index + <span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#85C35E&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(x1, y1 - <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">lineTo</span>(x2, y2 - <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">drawRect</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> [ x, y ] = <span class="title function_">mlToPx</span>(index);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#5A6FC0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(x - <span class="number">20</span>, y, <span class="number">40</span>, canPaddingY + totalHeight - y);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">cToPx</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> x = canPaddingX + axisXGap + index * bottomTextGap;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> y = totalHeight - data.<span class="property">axis2</span>.<span class="property">data</span>[index] * totalHeight / data.<span class="property">axis2</span>.<span class="property">max</span> + canPaddingY;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> [x, y];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">mlToPx</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> x = canPaddingX + axisXGap + index * bottomTextGap;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> y = totalHeight - data.<span class="property">axis1</span>.<span class="property">data</span>[index] * totalHeight / data.<span class="property">axis1</span>.<span class="property">max</span> + canPaddingY;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> [x, y];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">adaptDpr</span> (canvas, width, height) &#123;</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">width</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(width * dpr);</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">height</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(height * dpr);</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">style</span>.<span class="property">width</span> = width + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      oCan.<span class="property">style</span>.<span class="property">height</span> = height + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">scale</span>(dpr, dpr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkInPath</span> (x, y) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; circleData.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> [ rx, ry ] = circleData[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> _x = rx + oContainer.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> _y = ry + oContainer.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">          x &gt;= _x - <span class="number">3</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          x &lt;= _x + <span class="number">3</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          y &gt;= _y - <span class="number">3</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          y &lt;= _y + <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">        ) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> [ rx, ry ];</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> [];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">线性柱状图开发</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>line相关属性方法</title>
    <link href="https://lybinweb.github.io/posts/ec706036/index.html"/>
    <id>https://lybinweb.github.io/posts/ec706036/index.html</id>
    <published>2023-08-03T08:40:00.000Z</published>
    <updated>2023-08-03T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="line相关属性方法"><a class="markdownIt-Anchor" href="#line相关属性方法"></a> line相关属性方法</h1><h2 id="ctxbeginpath方法"><a class="markdownIt-Anchor" href="#ctxbeginpath方法"></a> ctx.beginPath方法</h2><ul><li>beginPath(): 开启一个新的绘制路径<ol><li>如果需要单独设置样式的绘制路径就要使用beginPath</li><li>画一条连接的线不需要使用beginPath，不然就不是一个路径画出来的线段</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果没有beginPath的话，两条线的颜色都是blue</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h2 id="ctxlinewidth属性"><a class="markdownIt-Anchor" href="#ctxlinewidth属性"></a> ctx.lineWidth属性</h2><ul><li>lineWidth: 线段的宽度<ul><li>默认值：1.0</li><li>无效值：0、负数、infinity、null</li></ul></li></ul><h2 id="ctxlinecap属性"><a class="markdownIt-Anchor" href="#ctxlinecap属性"></a> ctx.lineCap属性</h2><ul><li>lineCap: 线段末端的形状<ul><li>参数：<ul><li>默认值：<code>butt</code>（方形）</li><li><code>square</code>：方形（两端增加线段的长度）<ul><li>高度：线段的宽度</li><li>宽度：线段宽度的一半</li></ul></li><li><code>round</code>：圆形<ul><li>增加线段的长度</li><li>半径：线段宽度的一半</li></ul></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">500</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">800</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">800</span>, <span class="number">500</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">lineCap</span> = <span class="string">&#x27;round&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">30</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">800</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="封装drawline函数"><a class="markdownIt-Anchor" href="#封装drawline函数"></a> 封装drawLine函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drawLine</span> (&#123;</span><br><span class="line">  beginPath, <span class="comment">// boolean 默认为true</span></span><br><span class="line">  width, <span class="comment">// number</span></span><br><span class="line">  color, <span class="comment">// string</span></span><br><span class="line">  cap, <span class="comment">// string</span></span><br><span class="line">  join, <span class="comment">// string</span></span><br><span class="line">  miterLimit, <span class="comment">// number</span></span><br><span class="line">  moveTo, <span class="comment">// []</span></span><br><span class="line">  lineTo, <span class="comment">// []</span></span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> lineCapList = [<span class="string">&#x27;butt&#x27;</span>, <span class="string">&#x27;square&#x27;</span>, <span class="string">&#x27;round&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> lineJoinList = [<span class="string">&#x27;miter&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;bevel&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  beginPath = beginPath === <span class="literal">undefined</span> ? !beginPath : beginPath;</span><br><span class="line"></span><br><span class="line">  width &amp;&amp; (ctx.<span class="property">lineWidth</span> = width);</span><br><span class="line">  color &amp;&amp; (ctx.<span class="property">strokeStyle</span> = color);</span><br><span class="line">  miterLimit &amp;&amp; (ctx.<span class="property">miterLimit</span> = miterLimit);</span><br><span class="line">  lineCapList.<span class="title function_">includes</span>(cap) &amp;&amp; (ctx.<span class="property">lineCap</span> = cap);</span><br><span class="line">  lineJoinList.<span class="title function_">includes</span>(join) &amp;&amp; (ctx.<span class="property">lineJoin</span> = join);</span><br><span class="line"></span><br><span class="line">  beginPath &amp;&amp; ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  <span class="title class_">Array</span>.<span class="title function_">isArray</span>(moveTo) &amp;&amp; moveTo.<span class="property">length</span> === <span class="number">2</span> &amp;&amp; ctx.<span class="title function_">moveTo</span>(...moveTo);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lineTo) &#123;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">isArray</span>(lineTo) &amp;&amp; lineTo.<span class="property">length</span> === <span class="number">2</span> &amp;&amp; ctx.<span class="title function_">lineTo</span>(...lineTo);</span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ctxlinejoin属性"><a class="markdownIt-Anchor" href="#ctxlinejoin属性"></a> ctx.lineJoin属性</h2><ul><li>lineJoin: 连续绘制的两条线段之间填充的形状<ul><li>前提：必须是连续绘制的线段（同一路径下多条线段绘制）</li><li>参数：<ul><li>默认值：<code>miter</code>（斜接，线段转弯时为尖角）</li><li><code>round</code>：扇形（线段转弯时为扇形）</li><li><code>bevel</code>：斜面（线段转弯时为三角形）</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">lineJoin</span> = <span class="string">&#x27;round&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="ctxmiterlimit"><a class="markdownIt-Anchor" href="#ctxmiterlimit"></a> ctx.miterLimit</h2><ul><li>miterLimit: 斜接面限制比例<ul><li>边角的角度越小，斜接角度就越长</li><li>为了避免斜接长度过长，可以使用miterLimit限制</li><li>斜接长度超过miterLimit时，边角会以lineJoin的square或者round来显示</li><li>参数：<ul><li>默认值：10.0</li></ul></li></ul></li></ul><h2 id="ctxsetlinedash方法"><a class="markdownIt-Anchor" href="#ctxsetlinedash方法"></a> ctx.setLineDash()方法</h2><ul><li>setLineDash方法：设置虚线数据<ul><li>参数：<ul><li>Array: [1, 2, 3, 4]<br />线 空 线 空</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">setLineDash</span>([ <span class="number">10</span>, <span class="number">20</span> ]);</span><br></pre></td></tr></table></figure><h2 id="ctxgetlinedash方法"><a class="markdownIt-Anchor" href="#ctxgetlinedash方法"></a> ctx.getLineDash()方法</h2><ul><li>getLineDash方法：获取虚线数据</li></ul><h2 id="ctxlinedashoffset属性"><a class="markdownIt-Anchor" href="#ctxlinedashoffset属性"></a> ctx.lineDashOffset属性</h2><ul><li>lineDashOffset: 虚线的偏移量</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 蚂蚁线</span></span><br><span class="line"><span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span> () &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line">  ctx.<span class="title function_">setLineDash</span>([<span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line">  ctx.<span class="property">lineDashOffset</span> = -offset;</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">march</span> () &#123;</span><br><span class="line">  offset ++;</span><br><span class="line">  <span class="keyword">if</span> (offset &gt; <span class="number">16</span>) &#123;</span><br><span class="line">    offset = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">draw</span>();</span><br><span class="line">  <span class="built_in">setTimeout</span>(march, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">march</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">line相关属性方法</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>像素、绘制原理、清晰度问题</title>
    <link href="https://lybinweb.github.io/posts/9dd20eee/index.html"/>
    <id>https://lybinweb.github.io/posts/9dd20eee/index.html</id>
    <published>2023-08-03T08:40:00.000Z</published>
    <updated>2023-08-03T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="像素-绘制原理-清晰度问题"><a class="markdownIt-Anchor" href="#像素-绘制原理-清晰度问题"></a> 像素、绘制原理、清晰度问题</h1><h2 id="像素"><a class="markdownIt-Anchor" href="#像素"></a> 像素</h2><ul><li>设备物理像素：分辨率 1920*1080</li><li>像素：物理屏幕上一个一个的格子<ul><li>1pt*1pt：表示设备显示像素的物理格子的大小</li></ul></li><li>设备独立像素：定义UI布局时需要用到的虚拟的像素单位</li></ul><blockquote><p>devicePixelRatio：设备物理像素 / 设备独立像素 =&gt; 2<br />浏览器宿主 =&gt; devicePixelRatio =&gt; 算出设备独立像素 =&gt; 2pt =&gt; 1px =&gt; 2pt*2pt</p></blockquote><h2 id="绘制原理"><a class="markdownIt-Anchor" href="#绘制原理"></a> 绘制原理</h2><ul><li>Canvas是由设置、绘制、渲染三部分组成的</li><li>浏览器样式渲染跟Canvas的关系只在渲染阶段</li></ul><blockquote><p><code>设置+绘制</code>的阶段跟<code>渲染</code>的阶段是由差异的</p></blockquote><ul><li><code>window.devicePixelRatio</code>: 设备物理像素 / 设备独立像素</li></ul><h2 id="解决canvas绘制不清晰的问题"><a class="markdownIt-Anchor" href="#解决canvas绘制不清晰的问题"></a> 解决canvas绘制不清晰的问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> canvas: canvasDOM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> width: clientWidth</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> height: clientHeight</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adaptDpr</span> (canvas, width, height) &#123;</span><br><span class="line">  <span class="keyword">const</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>;</span><br><span class="line">  </span><br><span class="line">  canvas.<span class="property">width</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(width * dpr);</span><br><span class="line">  canvas.<span class="property">height</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(height * dpr);</span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">width</span> = width + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">height</span> = height + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  ctx.<span class="title function_">scale</span>(dpr, dpr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">像素、绘制原理、清晰度问题</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>什么是canvas、canvas绘制矩形</title>
    <link href="https://lybinweb.github.io/posts/e22c6d05/index.html"/>
    <id>https://lybinweb.github.io/posts/e22c6d05/index.html</id>
    <published>2023-07-21T08:14:00.000Z</published>
    <updated>2023-07-21T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是canvas-canvas绘制矩形"><a class="markdownIt-Anchor" href="#什么是canvas-canvas绘制矩形"></a> 什么是canvas、canvas绘制矩形</h1><h2 id="一-什么是canvas"><a class="markdownIt-Anchor" href="#一-什么是canvas"></a> 一、什么是canvas</h2><ul><li><p>浏览器需要在canvas画布元素上进行图形化绘制</p><ol><li>canvas标签是HTML5版本新增标签</li><li>配合canvas标签元素，HTML5技术 JavaScript API(Canvas API)来绘制图形</li></ol></li><li><p>canvas标签属性</p><ol><li>id -&gt; JavaScript要获取到canvas画布对象，并通过该DOM对象来创建图形的上下文（绘制的方法和属性）</li><li>width -&gt; canvas独有的属性，给当前画布对象设置宽（画布宽度），而不是给canvas元素设置宽（默认值：300px）</li><li>height -&gt; 画布高度（默认值：150px）</li></ol></li></ul><blockquote><p>注意：画布的大小决定了Canvas API绘制图形的边界</p></blockquote><ol><li>使用canvas元素的宽高属性定义画布大小（推荐）</li><li>使用CSS定义画布的宽高属性（不推荐，因为会导致绘制的内容变形）</li><li>canvas会存在兼容性问题：<code>&lt;canvas&gt;您使用的浏览器不支持canvas元素&lt;/canvas&gt;</code></li><li>canvas画布最大面积</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;can&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布的元素（一般canvas用id来做，因为画布是唯一的）</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(oCan); <span class="comment">// HTMLCanvasElement对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(oCan)); <span class="comment">// [object HTMLCanvasElement]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用当前画布对象，创建一个绘制图形的上下文（方法与属性集合）</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="comment">// 如果无法创建上下文，则返回null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ctx); <span class="comment">// CanvasRenderingContext2D对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ocangetcontext"><a class="markdownIt-Anchor" href="#ocangetcontext"></a> oCan.getContext()</h3><ul><li><code>getContext(contentType, contextAttributes)</code>：创建canvas上下文<ul><li>参数：contentType（string）<ol><li><code>2d</code> -&gt; 创建2d渲染的上下文 -&gt; 绘制接口：<code>CanvasRenderingContext2D</code> -&gt; 所有的属性和方法</li><li><code>webgl/webgl2</code> -&gt; 创建3d渲染上下文 -&gt; 绘制接口：<code>WebGL(2)RenderingContext</code><ul><li>注意：webgl2是webgl的升级版本（增加了更多的API和配置）</li></ul></li><li><code>bitmaprenderer</code> -&gt; 创建ImageBitMap替换canvas的上下文（位图，着眼于像素渲染到一种位图） -&gt; 绘制接口：<code>ImageBigMapRenderingContext</code></li></ol></li><li>参数：contextAttributes（Object）<ol><li><code>alpha</code>: true<ul><li>设置false：canvas背景不透明，加速渲染透明的图像或图形</li></ul></li></ol></li></ul></li></ul><h2 id="二-绘制矩形-rect"><a class="markdownIt-Anchor" href="#二-绘制矩形-rect"></a> 二、绘制矩形 rect</h2><ul><li><p>Canvas 2d坐标系：px</p><ul><li>x轴：元素的left偏移量</li><li>y轴：元素的top偏移量</li></ul></li><li><p>stroke 描边，画线、空心</p></li><li><p>fill：填充，实心</p></li><li><p>绘制矩形：</p><ul><li>默认颜色：黑色 #000</li><li>参数列表：<ol><li>横坐标 x</li><li>纵坐标 y</li><li>矩形宽度 width</li><li>矩形高度 height</li></ol></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">angle角度相关</span></span><br><span class="line"><span class="comment">  rectangle矩形</span></span><br><span class="line"><span class="comment">    rect正，直的</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  triangle三角形 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">uni一个，单独（变成一个的）</span></span><br><span class="line"><span class="comment">  uniform制服，统一的，一致的</span></span><br><span class="line"><span class="comment">  union联盟</span></span><br><span class="line"><span class="comment">  unit一个单位，个位数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bicycle两轮车</span></span><br><span class="line"><span class="comment">tri</span></span><br><span class="line"><span class="comment">  three</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bio生物，生命</span></span><br><span class="line"><span class="comment">ology学科</span></span><br><span class="line"><span class="comment">biology生物</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存客户端元素</span></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置画布的宽高</span></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 设置描边颜色</span></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制描边矩形 rectangle矩形 triangle三角形 angle角度相关</span></span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">120</span>);</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">400</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制填充矩形</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">120</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">400</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除画布</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// clearRect 清除一个特定矩形范围内的内容</span></span><br><span class="line">  <span class="comment">// 通过把像素点的颜色设置为透明，来达到清除一个矩形区域的内容的目的</span></span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-canvasrenderingcontext2dstrokerect"><a class="markdownIt-Anchor" href="#1-canvasrenderingcontext2dstrokerect"></a> 1、CanvasRenderingContext2D.strokeRect()</h3><ul><li>绘制描边矩形</li></ul><h3 id="2-canvasrenderingcontext2dfillrect"><a class="markdownIt-Anchor" href="#2-canvasrenderingcontext2dfillrect"></a> 2、CanvasRenderingContext2D.fillRect()</h3><ul><li>绘制填充矩形</li></ul><h3 id="3-canvasrenderingcontext2dclearrect"><a class="markdownIt-Anchor" href="#3-canvasrenderingcontext2dclearrect"></a> 3、CanvasRenderingContext2D.clearRect()</h3><ul><li>清除矩形范围内的绘制</li></ul><h2 id="三-拖动鼠标创建矩形"><a class="markdownIt-Anchor" href="#三-拖动鼠标创建矩形"></a> 三、拖动鼠标创建矩形</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存客户端元素</span></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置画布的宽高</span></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rectInfo = <span class="literal">null</span>; <span class="comment">// [x, y, w, h]</span></span><br><span class="line"><span class="keyword">const</span> rectWrapper = []; <span class="comment">// [ [x, y, w, h], [x, y, w, h], ... ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;fill&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">  oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, handleCanvasMouseDown, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCanvasMouseDown</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">  rectInfo = [e.<span class="property">clientX</span>, e.<span class="property">clientY</span>];</span><br><span class="line"></span><br><span class="line">  oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleCanvasMouseMove, <span class="literal">false</span>);</span><br><span class="line">  oCan.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, handleCanvasMouseUp, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCanvasMouseMove</span> (e) &#123;</span><br><span class="line">  <span class="title function_">createRect</span>(rectInfo[<span class="number">0</span>], rectInfo[<span class="number">1</span>], e.<span class="property">clientX</span>, e.<span class="property">clientY</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCanvasMouseUp</span> () &#123;</span><br><span class="line">  <span class="title function_">saveRect</span>();</span><br><span class="line">  oCan.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleCanvasMouseMove);</span><br><span class="line">  oCan.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, handleCanvasMouseUp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRect</span> (x1, y1, x2, y2) &#123;</span><br><span class="line">  <span class="keyword">const</span> w = <span class="title class_">Math</span>.<span class="title function_">abs</span>(x2 - x1);</span><br><span class="line">  <span class="keyword">const</span> h = <span class="title class_">Math</span>.<span class="title function_">abs</span>(y2 - y1);</span><br><span class="line">  rectInfo = [x1, y1, w, h];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;stroke&#x27;</span>:</span><br><span class="line">      <span class="title function_">strokeRects</span>();</span><br><span class="line">      <span class="title function_">strokeRect</span>(...rectInfo);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;fill&#x27;</span>:</span><br><span class="line">      <span class="title function_">fillRects</span>();</span><br><span class="line">      <span class="title function_">fillRect</span>(...rectInfo);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearRect</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strokeRect</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fillRect</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">fillRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strokeRects</span> () &#123;</span><br><span class="line">  rectWrapper.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[ x, y, w, h]</span>) =&gt;</span> <span class="title function_">strokeRect</span>(x, y, w, h));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fillRects</span> () &#123;</span><br><span class="line">  rectWrapper.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[ x, y, w, h]</span>) =&gt;</span> <span class="title function_">fillRect</span>(x, y, w, h));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveRect</span> () &#123;</span><br><span class="line">  rectWrapper.<span class="title function_">push</span>(rectInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">什么是canvas,canvas绘制矩形</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>虚拟列表</title>
    <link href="https://lybinweb.github.io/posts/300a8ca5/index.html"/>
    <id>https://lybinweb.github.io/posts/300a8ca5/index.html</id>
    <published>2023-07-20T06:55:00.000Z</published>
    <updated>2023-07-20T06:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟列表"><a class="markdownIt-Anchor" href="#虚拟列表"></a> 虚拟列表</h1><h2 id="什么是虚拟列表"><a class="markdownIt-Anchor" href="#什么是虚拟列表"></a> 什么是虚拟列表</h2><ul><li>概念：虚拟列表是一种优化长列表显示的技术。当列表数据量过大的时候，传统的做法是将每一项数据都会渲染到浏览器页面上，这样会导致页面加载过慢、卡顿、占用内存较高、影响用户体验的现象。而虚拟列表的做法是页面DOM列表的长度是固定的，动态的改变每一项，从而达到视觉上就是长列表的技术。</li></ul><h2 id="虚拟列表的注意事项跟实现思路"><a class="markdownIt-Anchor" href="#虚拟列表的注意事项跟实现思路"></a> 虚拟列表的注意事项跟实现思路</h2><ul><li><p>虚拟列表思路：</p><ol><li>列表在上下滚动的时候，通过给列表容器增加padding-top达到列表滚动的条件。列表第一项滚动离开可视区域列表外那一刻，增加上padding，并且列表所有项索引+1了，来更新列表，他的核心是通过增加或减少padding-top且增加padding-bottom来实现的</li><li>startIndex = scrollTop / itemHeight</li></ol></li><li><p>虚拟列表需要考虑的问题：</p><ol><li>每一次虚拟列表在更新的时候，每一项的视图可能都不一样</li><li>在快速滑动的时候，白屏怎么处理</li><li>在滑动的时候，会卡顿，不是性能导致的，是因为渲染不及时又进行了滚动导致的</li><li>滑动到底部的时候，你要预留的空间是通过微调来调出来的，不同的场景下微调的距离是不同的，是看你的列表的规划而定的</li></ol></li><li><p>虚拟列表的核心：<strong>有限的DOM中去做无限的DOM渲染、结构渲染</strong></p></li><li><p>实现虚拟列表需要弄清楚的前置条件：</p><ol><li>列表数据dataSource（可能通过请求一次又一次动态获取）</li><li>可视区域列表数据currentData</li><li>列表项的高度ITEM_HEIGTH（定值）</li><li>可视区域列表最大容纳列表项个数MAX_ITEM_COUNT</li><li>可视区域列表的开始索引startIndex（核心）</li><li>可视区域列表的结束索引endIndex</li><li>可视区域列表的上下padding</li></ol></li><li><p>优化：</p><ol><li>滚动的时候节流，唯一方法：利用requestAnimationFrame动画帧来做</li><li>滚动白屏优化：列表渲染两屏，滚动到第二屏的时候才增加上padding</li></ol></li></ul><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><ul><li>目录结构<ul><li>index.html</li><li>app.js</li><li>config.js</li><li>utils.js</li><li>reactive.js</li><li>render.js</li></ul></li></ul><h3 id="indexhtml"><a class="markdownIt-Anchor" href="#indexhtml"></a> index.html</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vite App&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .scroll-wrapper &#123;</span><br><span class="line">        height: 100vh;</span><br><span class="line">        overflow-y: auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .list-item &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border-bottom: 1px solid #000;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;scroll-wrapper&quot; id=&quot;J_scrollWrapper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;list-wrapper&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script type=&quot;module&quot; src=&quot;./app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="appjs"><a class="markdownIt-Anchor" href="#appjs"></a> app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="variable constant_">ITEM_HEIGHT</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, setCurrentData, setDataSource &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;./render&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;setAnimationFrame&#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oScroller = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_scrollWrapper&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> oList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list-wrapper&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> $state = <span class="title function_">reactive</span>(oList);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">initData</span>(<span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="title function_">render</span>($state.<span class="property">currentData</span>, $state.<span class="property">paddingSet</span>, oList);</span><br><span class="line">    <span class="title function_">bindEvent</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initData</span> (init, count) &#123;</span><br><span class="line">    <span class="title function_">setDataSource</span>(init, count);</span><br><span class="line">    <span class="title function_">setCurrentData</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">    oScroller.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleScroll</span> () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * - 需要考虑到时间问题跟上一次是否渲染完毕了，再去走下一步的程序：节流</span></span><br><span class="line"><span class="comment">     * - requestAnimationFrame：告诉浏览器你需要执行一个动画，并且要求浏览器在下一次重绘之前调用指定的回调函数更新动画执行。该方法接收一个回调函数作为参数，该回调函数会在下一次浏览器重绘之前执行</span></span><br><span class="line"><span class="comment">     * - 人能接受的最低帧数：30帧 =&gt; 1s设置3次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      $state.<span class="property">startIndex</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">scrollTop</span> / <span class="variable constant_">ITEM_HEIGHT</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="configjs"><a class="markdownIt-Anchor" href="#configjs"></a> config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ITEM_HEIGHT</span> = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MAX_ITEM_COUNT</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_scrollWrapper&#x27;</span>).<span class="property">offsetHeight</span> / <span class="variable constant_">ITEM_HEIGHT</span>) + <span class="number">1</span>; <span class="comment">//</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">TIME_PRE_FPS</span> = <span class="number">1000</span> / <span class="number">30</span>; <span class="comment">// 1s更新的帧数次数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="utilsjs"><a class="markdownIt-Anchor" href="#utilsjs"></a> utils.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">TIME_PRE_FPS</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 模拟获取数据 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getData</span> (init, count) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = init; i &lt;= count; i ++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setAnimationFrame</span> (callback) &#123;</span><br><span class="line">  <span class="keyword">let</span> beginTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> <span class="title function_">cb</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> endTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (endTime - beginTime &gt;= <span class="variable constant_">TIME_PRE_FPS</span>) &#123;</span><br><span class="line">      beginTime = endTime;</span><br><span class="line">      <span class="title function_">requestAnimationFrame</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reactivejs"><a class="markdownIt-Anchor" href="#reactivejs"></a> reactive.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ITEM_HEIGHT</span>, <span class="variable constant_">MAX_ITEM_COUNT</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getData &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; update, updatePaddingSet &#125; <span class="keyword">from</span> <span class="string">&quot;./render&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">dataSource</span>: [],</span><br><span class="line">  <span class="attr">currentData</span>: [],</span><br><span class="line">  <span class="attr">startIndex</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">endIndex</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">paddingSet</span>: &#123;</span><br><span class="line">    <span class="attr">paddingTop</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">paddingBottom</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span> (oList) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>($state, &#123;</span><br><span class="line">    <span class="attr">dataSource</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">dataSource</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        data.<span class="property">dataSource</span> = newValue;</span><br><span class="line">        <span class="comment">// set currentData</span></span><br><span class="line">        <span class="title function_">setCurrentData</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">currentData</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">currentData</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        data.<span class="property">currentData</span> = newValue;</span><br><span class="line">        <span class="comment">// update view</span></span><br><span class="line">        <span class="title function_">update</span>($state.<span class="property">currentData</span>, oList);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">startIndex</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">startIndex</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($state.<span class="property">startIndex</span> !== newValue) &#123;</span><br><span class="line">          data.<span class="property">startIndex</span> = newValue;</span><br><span class="line">          <span class="comment">// set currentData</span></span><br><span class="line">          <span class="title function_">setCurrentData</span>();</span><br><span class="line">          <span class="comment">// set dataSource (endIndex &gt;= dataSource.length - 1)</span></span><br><span class="line">          $state.<span class="property">endIndex</span> &gt;= $state.<span class="property">dataSource</span>.<span class="property">length</span> - <span class="number">1</span> &amp;&amp; <span class="title function_">setDataSource</span>($state.<span class="property">dataSource</span>.<span class="property">length</span> + <span class="number">1</span>, $state.<span class="property">dataSource</span>.<span class="property">length</span> * <span class="number">2</span>);</span><br><span class="line">          <span class="comment">// set padding</span></span><br><span class="line">          <span class="title function_">setPaddingSet</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">endIndex</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">setEndIndex</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">paddingSet</span>: &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">paddingSet</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        data.<span class="property">paddingSet</span> = newValue;</span><br><span class="line">        <span class="comment">// update view padding</span></span><br><span class="line">        <span class="title function_">updatePaddingSet</span>($state.<span class="property">paddingSet</span>, oList);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setEndIndex</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> endIndex = $state.<span class="property">startIndex</span> + <span class="variable constant_">MAX_ITEM_COUNT</span> * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $state.<span class="property">dataSource</span>[endIndex] ? endIndex : $state.<span class="property">dataSource</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setDataSource</span> (init, count) &#123;</span><br><span class="line">  $state.<span class="property">dataSource</span> = [</span><br><span class="line">    ...$state.<span class="property">dataSource</span>,</span><br><span class="line">    ...<span class="title function_">getData</span>(init, count)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setCurrentData</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> startIndex = <span class="title function_">resetStartIndex</span>();</span><br><span class="line">  $state.<span class="property">currentData</span> = $state.<span class="property">dataSource</span>.<span class="title function_">slice</span>(startIndex, $state.<span class="property">endIndex</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setPaddingSet</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> startIndex = <span class="title function_">resetStartIndex</span>();</span><br><span class="line">  $state.<span class="property">paddingSet</span> = &#123;</span><br><span class="line">    <span class="attr">paddingTop</span>: startIndex * <span class="variable constant_">ITEM_HEIGHT</span>,</span><br><span class="line">    <span class="attr">paddingBottom</span>: ($state.<span class="property">dataSource</span>.<span class="property">length</span> - $state.<span class="property">endIndex</span>) * <span class="variable constant_">ITEM_HEIGHT</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetStartIndex</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> $state.<span class="property">startIndex</span> &lt;= <span class="variable constant_">MAX_ITEM_COUNT</span> ? <span class="number">0</span> : $state.<span class="property">startIndex</span> - <span class="variable constant_">MAX_ITEM_COUNT</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="renderjs"><a class="markdownIt-Anchor" href="#renderjs"></a> render.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span> (currentData, paddingSet, list) &#123;</span><br><span class="line">  <span class="keyword">const</span> oFragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">  currentData.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    oItem.<span class="property">className</span> = <span class="string">&#x27;list-item&#x27;</span>;</span><br><span class="line">    oItem.<span class="property">innerText</span> = item;</span><br><span class="line"></span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(oItem);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  list.<span class="title function_">appendChild</span>(oFragment);</span><br><span class="line">  <span class="title function_">updatePaddingSet</span>(paddingSet, list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">update</span> (currentData, list) &#123;</span><br><span class="line">  <span class="keyword">const</span> oItems = list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.list-item&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oItems.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    item.<span class="property">innerText</span> = currentData[index];</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updatePaddingSet</span> (paddingSet, list) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> paddingSet) &#123;</span><br><span class="line">    list.<span class="property">style</span>[key] = paddingSet[key] + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">虚拟列表</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="虚拟列表" scheme="https://lybinweb.github.io/tags/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>绘制文本 Text相关属性、方法</title>
    <link href="https://lybinweb.github.io/posts/e36d962f/index.html"/>
    <id>https://lybinweb.github.io/posts/e36d962f/index.html</id>
    <published>2023-07-14T08:14:00.000Z</published>
    <updated>2023-08-03T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制文本-text相关属性-方法"><a class="markdownIt-Anchor" href="#绘制文本-text相关属性-方法"></a> 绘制文本 Text相关属性、方法</h1><h2 id="filltext方法"><a class="markdownIt-Anchor" href="#filltext方法"></a> fillText()方法</h2><ul><li>fillText：填充文本（实心）<ul><li>参数：<ol><li>文本（必填）</li><li>横坐标（必填）</li><li>纵坐标（必填）</li><li>文本最大宽度（可选） 最大文本绘制宽度【变形、挤压、压扁】</li></ol></li></ul></li></ul><h2 id="font属性"><a class="markdownIt-Anchor" href="#font属性"></a> font属性</h2><ul><li>font：设置文本样式、尺寸、字体（按顺序、同步设置）<ul><li>参数：<ol><li>样式（可选）</li><li>尺寸（可选）</li><li>字体（可选）</li></ol></li><li>默认值：<code>10px sans-serif</code></li></ul></li></ul><h2 id="stroketext方法"><a class="markdownIt-Anchor" href="#stroketext方法"></a> strokeText()方法</h2><ul><li>strokeText：描边文本（空心）<ul><li>参数：<ol><li>文本（必填）</li><li>横坐标（必填）</li><li>纵坐标（必填）</li><li>文本最大宽度（可选）</li></ol></li></ul></li></ul><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;bold 50px serif&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"><span class="comment">// 填充文本</span></span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I love you!&#x27;</span>, <span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;bold 50px serif&#x27;</span>;</span><br><span class="line"><span class="comment">// 线的颜色</span></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"><span class="comment">// 描边文本</span></span><br><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&#x27;I love you!&#x27;</span>, <span class="number">1000</span>, <span class="number">300</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="textalign属性"><a class="markdownIt-Anchor" href="#textalign属性"></a> textAlign属性</h2><ul><li>textAlign：将文本的左或右边对齐y轴<ul><li>参数：<code>start|left|end|right</code><ul><li><code>start|left 等效</code></li><li><code>end|right 等效</code></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">500</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&#x27;left&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I love you!!!&#x27;</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&#x27;right&#x27;</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&#x27;I love you!!!&#x27;</span>, <span class="number">100</span>, <span class="number">250</span>);</span><br></pre></td></tr></table></figure><h2 id="textbaseline属性"><a class="markdownIt-Anchor" href="#textbaseline属性"></a> textBaseline属性</h2><ul><li>textBaseline：文本基线<ul><li>参数<ol><li><code>top</code>：文本顶部对齐x轴</li><li><code>hanging</code>：文本顶部对齐x轴（距离更近一些）</li><li><code>middle</code>：文本垂直居中x轴（文本贯穿x轴）</li><li><code>alphabetic</code>：文本底部对齐x轴（以英文字母为基准的对齐）</li><li><code>idiographic</code>：以表意文字为基准的对齐（中文字体稍微往下走一点，文本底部对齐x轴）</li><li><code>bottom</code>：文本底部对齐x轴（中文字体底部也对齐x轴）</li></ol></li><li>默认值：<code>alphabetic</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;top|hanging&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="direction属性"><a class="markdownIt-Anchor" href="#direction属性"></a> direction属性</h2><blockquote><p>兼容性比较差，实验性属性</p></blockquote><ul><li>direction：<ul><li>参数：<ol><li><code>ltr</code>：left to right</li><li><code>rtl</code>：right to left</li></ol></li><li>注意：跟start、end有关系</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">direction</span> = <span class="string">&#x27;rtl&#x27;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&#x27;start&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I love you!!!&#x27;</span>, <span class="number">500</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="measuretext方法"><a class="markdownIt-Anchor" href="#measuretext方法"></a> measureText方法</h2><ul><li>measureText：测量文本的尺寸位置的信息对象<ul><li>参数：要测量的文本<ul><li>返回值<br />TextMetrics {<br />actualBoundingBoxAscent, 基线距离文本顶点的距离<br />actualBoundingBoxDescent, 基线距离下边的边缘的距离<br />actualBoundingBoxLeft, 基线起点距离Y轴左侧偏移的距离<br />actualBoundingBoxRight, 基线起点距离Y轴右侧偏移的距离<br />fontBoundingBoxAscent,<br />fontBoundingBoxDescent,<br />width<br />}</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;I&#x27;</span>, <span class="number">500</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">const</span> info = ctx.<span class="title function_">measureText</span>(<span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">width</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">info:</span></span><br><span class="line"><span class="comment">TextMetrics &#123;</span></span><br><span class="line"><span class="comment">  actualBoundingBoxAscent, 基线距离文本顶点的距离</span></span><br><span class="line"><span class="comment">  actualBoundingBoxDescent, 基线距离下边的边缘的距离</span></span><br><span class="line"><span class="comment">  actualBoundingBoxLeft, 基线起点距离Y轴左侧偏移的距离</span></span><br><span class="line"><span class="comment">  actualBoundingBoxRight, 基线起点距离Y轴右侧偏移的距离</span></span><br><span class="line"><span class="comment">  fontBoundingBoxAscent, </span></span><br><span class="line"><span class="comment">  fontBoundingBoxDescent,</span></span><br><span class="line"><span class="comment">  width </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="canvas文本输入框案例"><a class="markdownIt-Anchor" href="#canvas文本输入框案例"></a> Canvas文本输入框案例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取画布对象</span></span><br><span class="line"><span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 获取绘制2d的渲染上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">// CanvasRenderingContext2D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> documentElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line">oCan.<span class="property">width</span> = documentElement.<span class="property">clientWidth</span>;</span><br><span class="line">oCan.<span class="property">height</span> = documentElement.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;30px serif&#x27;</span>;</span><br><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;top&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textArr = [];</span><br><span class="line"><span class="keyword">const</span> widthArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> lineHeight = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">drawInputBox</span>(<span class="number">200</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">  <span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, handleKeyDown, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleKeyDown</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 当前状态是大写还是小写</span></span><br><span class="line">  <span class="keyword">const</span> capslock = e.<span class="title function_">getModifierState</span>(<span class="string">&#x27;CapsLock&#x27;</span>);</span><br><span class="line">  <span class="comment">// 按键字母转为小写</span></span><br><span class="line">  <span class="keyword">const</span> key = !capslock ? e.<span class="property">key</span>.<span class="title function_">toLowerCase</span>() : e.<span class="property">key</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&#x27;capslock&#x27;</span> || key === <span class="string">&#x27;CAPSLOCK&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">shiftKey</span>, <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e.<span class="property">keyCode</span>))</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">shiftKey</span> &amp;&amp; <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e.<span class="property">keyCode</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;shift&#x27;</span> || key === <span class="string">&#x27;SHIFT&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="title function_">addChar</span>(key.<span class="title function_">toUpperCase</span>());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (key.<span class="title function_">toLowerCase</span>()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;alt&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;meta&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;backspace&#x27;</span>:</span><br><span class="line">      <span class="title function_">removeChar</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;enter&#x27;</span>:</span><br><span class="line">      index ++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="title function_">addChar</span>(key);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeChar</span> () &#123;</span><br><span class="line">  <span class="keyword">if</span> (textArr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> charArr = textArr[textArr.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!charArr.<span class="property">length</span>) &#123; <span class="comment">// 长度为0</span></span><br><span class="line">      textArr.<span class="title function_">pop</span>();</span><br><span class="line">      widthArr.<span class="title function_">pop</span>();</span><br><span class="line">      index --;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> lastChar = charArr.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">const</span> charWidth = ctx.<span class="title function_">measureText</span>(lastChar).<span class="property">width</span>;</span><br><span class="line">    widthArr[index] -= charWidth;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">drawText</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawText</span> () &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, oCan.<span class="property">width</span>, oCan.<span class="property">height</span>);</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(<span class="number">200</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">50</span> + index * lineHeight);</span><br><span class="line"></span><br><span class="line">  textArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">charArr, index</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="title function_">strokeText</span>(charArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>), <span class="number">210</span>, <span class="number">110</span> + index * lineHeight);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addChar</span> (key) &#123;</span><br><span class="line">  <span class="keyword">const</span> keyWidth = ctx.<span class="title function_">measureText</span>(key).<span class="property">width</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (textArr[index]) &#123;</span><br><span class="line">    textArr[index].<span class="title function_">push</span>(key);</span><br><span class="line">    widthArr[index] += keyWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    textArr[index] = [key];</span><br><span class="line">    widthArr[index] = keyWidth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (widthArr[index] &gt;= <span class="number">275</span>) &#123;</span><br><span class="line">    index ++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">drawText</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawInputBox</span> (x, y, w, h) &#123;</span><br><span class="line">  ctx.<span class="title function_">strokeRect</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">绘制文本 Text相关属性、方法</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://lybinweb.github.io/tags/Canvas/"/>
    
    <category term="场景化开发" scheme="https://lybinweb.github.io/tags/%E5%9C%BA%E6%99%AF%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>基础知识复习</title>
    <link href="https://lybinweb.github.io/posts/ad732e86/index.html"/>
    <id>https://lybinweb.github.io/posts/ad732e86/index.html</id>
    <published>2023-06-25T03:20:00.000Z</published>
    <updated>2023-06-25T03:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ts基础内容复习"><a class="markdownIt-Anchor" href="#ts基础内容复习"></a> TS基础内容复习</h1><ul><li>JS -&gt; 浏览器 | Node 可以直接执行</li><li>TS -&gt; 可以用Deno直接执行，其原理是Deno是Rust语言写的，将TS转换为JS，然后用V8执行</li></ul><blockquote><p>TS -&gt; 类型擦除 -&gt; ES6(NodeJS 12+/chrome 100上运行) -&gt; 编译(babel) -&gt; ES5(NodeJS10-/IE11-) -&gt; 打包 -&gt; 单文件 -&gt; 浏览器下载</p></blockquote><h2 id="如何擦除类型"><a class="markdownIt-Anchor" href="#如何擦除类型"></a> 如何擦除类型</h2><ul><li>快：不检查TS语法<ul><li>esbuild 【go语言开发】<ul><li><code>npm i -g esbuild</code> 安装</li><li><code>esbuild 1.ts &gt; 1.js</code> 将1.ts的TS擦除调保存到1.js文件中</li></ul></li><li>swc【rust语言开发】<ul><li><code>swc 1.ts -o 1.js</code></li></ul></li></ul></li><li>慢：做语法检查<ul><li>tsc<ul><li><code>npm i -g typescript</code><ul><li><code>tsc 1.ts</code></li></ul></li></ul></li><li>babel<ul><li><code>npm i @babel/core @babel/cli @babel/preset-typescript</code></li><li><code>babel --presets @babel/preset-typescript 1.ts</code></li></ul></li></ul></li></ul><h2 id="运行typescript"><a class="markdownIt-Anchor" href="#运行typescript"></a> 运行TypeScript</h2><ol><li>TypeScript Playground 官方出版</li><li>第三方<ul><li><code>playcode.io</code> 前端最快编辑器 收费</li><li><code>stackblitz.com</code> 有单独的Vite</li><li><code>codesandbox.io</code></li></ul></li><li>本地运行<ul><li>vite 开启服务运行TS代码<ul><li><code>npm create vite@latest</code>|<code>yarn create vite</code>|<code>pnpm create vite</code></li></ul></li><li>ts-node 直接执行TS代码<ul><li><code>npm i -g TypeScript</code></li><li><code>npm i -g ts-node</code></li></ul></li><li>swc-node</li><li>esm-loader</li><li>esno</li></ul></li></ol><h2 id="数据与类型"><a class="markdownIt-Anchor" href="#数据与类型"></a> 数据与类型</h2><ul><li>数据类型：<ul><li>JS：number string boolean null undefined symbol</li><li>TS：JS + void never enum unknown any type interface</li></ul></li></ul><h3 id="type描述原始值"><a class="markdownIt-Anchor" href="#type描述原始值"></a> type描述原始值</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="built_in">boolean</span> = <span class="literal">true</span> | <span class="literal">false</span>; <span class="comment">// |读做并</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Object</span> = &#123;&#125; | <span class="title class_">Array</span> | <span class="title class_">Function</span> | <span class="title class_">String</span> | <span class="title class_">Number</span> | <span class="title class_">Boolean</span> | <span class="title class_">RegExp</span>;</span><br></pre></td></tr></table></figure><ul><li><p>TS中不手动用Number、String、Boolean，只用小写的number、string、boolean</p></li><li><p>TS中不用大写Object</p></li></ul><h3 id="用type描述普通对象"><a class="markdownIt-Anchor" href="#用type描述普通对象"></a> 用type描述普通对象</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 索引签名 -&gt; 键的类型必须为string、number、symbol</span></span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record泛型 -&gt; 表示key为string、value为number的对象</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="描述array"><a class="markdownIt-Anchor" href="#描述array"></a> 描述Array</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span>[];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">number</span>[];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">B1</span> = <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度为3的字符串数组 三元组</span></span><br><span class="line"><span class="keyword">type</span> C = [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">C1</span>: C = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二元组</span></span><br><span class="line"><span class="keyword">type</span> D = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">D1</span>: D = [<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> E = [<span class="built_in">string</span>[], <span class="built_in">number</span>[]];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">E1</span>: E = [[<span class="string">&#x27;a&#x27;</span>], [<span class="number">1</span>]];</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>由于Array太不精确，所以TS开发者一般用：<code>Array&lt;?&gt;</code> 或者 <code>String[]</code> 或者 <code>[string, number]</code>来描述数组</li></ul><h3 id="描述函数对象"><a class="markdownIt-Anchor" href="#描述函数对象"></a> 描述函数对象</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FnA</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数可以不写，类型推导</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">FnA</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnReturnVoid</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnReturnUndefined</span> = <span class="function">() =&gt;</span> <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f1</span>: <span class="title class_">FnReturnVoid</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;FnReturnVoid&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">f2</span>: <span class="title class_">FnReturnUndefined</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;FnReturnUndefined&#x27;</span>);</span><br><span class="line">  <span class="comment">// 必须要return undefined; 或者 return null;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">sayHiFn</span>: <span class="title class_">FnWithThis</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnWithThis</span> = <span class="function">(<span class="params"><span class="variable language_">this</span>: Person, name: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sayHi</span>: <span class="title class_">FnWithThis</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在浏览器中this为globalThis默认是window 【window上是有name的】</span></span><br><span class="line">  <span class="comment">// 在node中this就是global</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 我们希望this是Person，那么就不能用箭头函数了</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sayHiFn</span>: <span class="title class_">FnWithThis</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// this就指向Person</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;lyb&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHiFn</span>: sayHiFn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">sayHiFn</span>(<span class="string">&#x27;lyb&#x27;</span>);</span><br><span class="line">sayHiFn.<span class="title function_">call</span>(p, <span class="string">&#x27;lyb&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>由于Function太不精确，所以TS一般用<code>() =&gt; ?</code>来描述函数</li></ul><h3 id="描述其他对象"><a class="markdownIt-Anchor" href="#描述其他对象"></a> 描述其他对象</h3><ul><li>直接用他的构造函数描述</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/ab+c/</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r2</span>: <span class="title class_">RegExp</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abc+c&#x27;</span>);</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">m</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;xxx&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">wm</span>: <span class="title class_">WeakMap</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125;, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">s</span>: <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ws</span>: <span class="title class_">WeakSet</span>&lt;<span class="built_in">string</span>[]&gt; = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br></pre></td></tr></table></figure><h2 id="any和unknown是什么"><a class="markdownIt-Anchor" href="#any和unknown是什么"></a> any和unknown是什么</h2><ul><li>any类型：支持全部TS类型</li><li>unknown类型：值是远端获取的，没有办法提前知道，使用的时候可以断言下</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="built_in">any</span> = <span class="number">1</span>;</span><br><span class="line">c.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>); <span class="comment">// 用any，丢失了自动检查语法的机会</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先把a的类型盖住，因为不确定他是什么类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">unknown</span> = <span class="keyword">await</span> ajax.<span class="title function_">get</span>(<span class="string">&#x27;/api/users&#x27;</span>);</span><br><span class="line"><span class="comment">// 在使用的时候可以用断言的方式具体给一个类型</span></span><br><span class="line"><span class="keyword">const</span> b = (a <span class="keyword">as</span> <span class="built_in">number</span>);</span><br></pre></td></tr></table></figure><h2 id="never类型"><a class="markdownIt-Anchor" href="#never类型"></a> never类型</h2><ul><li>never类型：空集，一个不包含任何类型的空集，什么类型都不是</li><li>作用：不是用来指定声明的，而是推断的</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">toFixed</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">valueOf</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// a -&gt; never 类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="enum类型"><a class="markdownIt-Anchor" href="#enum类型"></a> enum类型</h2><h3 id="何时用enum很帅"><a class="markdownIt-Anchor" href="#何时用enum很帅"></a> 何时用enum很帅</h3><ul><li><p>何时用enum类型？</p><ol><li>映射数字对字符串的时候，比如0代表未完成，1代表已完成，</li><li>做权限控制的时候</li></ol></li><li><p>逗号分割，值会自增</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> A &#123;</span><br><span class="line">  todo = <span class="number">1</span>,</span><br><span class="line">  done, <span class="comment">// 会自动赋值为 2</span></span><br><span class="line">  archived, <span class="comment">// 依次类推...</span></span><br><span class="line">  deleted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>做权限控制：</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Permission</span> &#123;</span><br><span class="line">  <span class="title class_">None</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Read</span> = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,    <span class="comment">// 将1左移0位 -&gt; 0001</span></span><br><span class="line">  <span class="title class_">Write</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,   <span class="comment">// 将1左移1位 -&gt; 0010</span></span><br><span class="line">  <span class="title class_">Delete</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// 将1左移2位 -&gt; 0100</span></span><br><span class="line">  <span class="title class_">Manage</span> = <span class="title class_">Read</span> | <span class="title class_">Write</span> | <span class="title class_">Delete</span>, <span class="comment">// 这里不是联合类型，而是二进制的或运算 -&gt; 0111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">permission</span>: <span class="title class_">Permissions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">permission</span>: <span class="number">0b0100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">permission</span> &amp; <span class="title class_">Permission</span>.<span class="property">Write</span>) === <span class="title class_">Permission</span>.<span class="property">Write</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拥有写权限&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">permission</span> &amp; <span class="title class_">Permission</span>.<span class="property">Manage</span>) === <span class="title class_">Permission</span>.<span class="property">Manage</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拥有管理权限&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="何时用enum很呆"><a class="markdownIt-Anchor" href="#何时用enum很呆"></a> 何时用enum很呆</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">  <span class="title class_">Apple</span> = <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="title class_">Orange</span> = <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的fruit会告警，但是不会报错。因为&#x27;apple&#x27;不属于Fruit枚举成员值之一</span></span><br><span class="line"><span class="comment">// 如果需要将字符串&#x27;apple&#x27;转换为Fruit枚举类型，则应该使用类型断言来告诉编译器变量的实际类型</span></span><br><span class="line"><span class="comment">// let fruit: Fruit = &#x27;apple&#x27; as Fruit;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fruit</span>: <span class="title class_">Fruit</span> = <span class="string">&#x27;apple&#x27;</span>; </span><br><span class="line"></span><br><span class="line">fruit = <span class="title class_">Fruit</span>.<span class="property">Orange</span>; </span><br></pre></td></tr></table></figure><ul><li>可以使用type：</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fruit</span> = <span class="string">&#x27;apple&#x27;</span> | <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fruit</span>: <span class="title class_">Fruit</span> = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line">fruit = <span class="string">&#x27;orange&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>总结：number enum推荐使用，string enum是不推荐的，number|string enum也是不推荐的</li></ul><h2 id="type与interface的区别"><a class="markdownIt-Anchor" href="#type与interface的区别"></a> type与interface的区别</h2><h3 id="何时用type"><a class="markdownIt-Anchor" href="#何时用type"></a> 何时用type？</h3><ul><li><p>type：类型别名 Type Alias</p><ul><li>类型只能表示集合，不可表示正数负数以及NaN</li></ul></li><li><p>type可以表示的类型：</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Name</span> = <span class="string">&#x27;lyb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假值类型 （NaN是Number，他不是类型，不可以写）</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FalseLike</span> = <span class="number">0</span> | <span class="literal">false</span> | <span class="string">&#x27;&#x27;</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Points</span> = <span class="title class_">Point</span>[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二元组</span></span><br><span class="line"><span class="keyword">type</span> line = [<span class="title class_">Point</span>, <span class="title class_">Point</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Circle</span> = &#123;</span><br><span class="line">  <span class="attr">center</span>: <span class="title class_">Point</span>,</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnWithProps</span> = &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">string</span>): <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>什么时候都可以用type，只有一个情况不允许</li></ul><h3 id="interface"><a class="markdownIt-Anchor" href="#interface"></a> interface</h3><ul><li>接口：描述对象的属性（包括函数或非函数） declare the shapes of objects</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>interface跟type的区别：interface就是将type能实现的功能用类的方式重新实现一遍</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A1 <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;, X &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &amp; &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125; &amp; X;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Data</span> &#123; [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Points</span> <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="title class_">Point</span>&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123; (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">interface</span> D <span class="keyword">extends</span> <span class="title class_">Date</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>区别：<ol><li>interface只描述对象，type则描述所有类型；【所以interface可以合并、可以扩展，type不可重新赋值、合并】</li><li>type只是别名，interface则是类型声明</li><li>对外API尽量用interface，方便操作。对内API尽量用type，防止代码分散</li><li>Type交叉类型属性冲突后类型会变为never，interface继承后属性冲突会直接报错</li></ol></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">A = <span class="built_in">string</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩展axios</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;axios&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line">    _autoLoading?: <span class="built_in">boolean</span></span><br><span class="line">    _mock?: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展String</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="title function_">padZero</span>(<span class="attr">length</span>: <span class="built_in">number</span>): <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ts类型系统的运算"><a class="markdownIt-Anchor" href="#ts类型系统的运算"></a> TS类型系统的运算</h2><h3 id="联合类型"><a class="markdownIt-Anchor" href="#联合类型"></a> 联合类型</h3><ul><li>union types：联合类型 并集</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = A | B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: C = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lyb&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型收窄"><a class="markdownIt-Anchor" href="#类型收窄"></a> 类型收窄</h4><ul><li>利用typeof做类型收窄</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">number</span> | <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    a.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>typeof的缺点：无法对null、Array、等区分类型</p></li><li><p>利用instanceof做类型收窄（来解决typeof的这个问题）：</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">Array</span>&lt;<span class="built_in">Date</span>&gt; | <span class="built_in">Date</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (a <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    <span class="comment">// 日期</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>instanceof的问题：</p><ul><li>不支持基本类型 String、Number、Boolean</li><li>不支持TS独有的类型（TS类型会被擦除）</li></ul></li><li><p>利用<code>in</code>来做类型收窄</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123; <span class="attr">x</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: Person | Animal</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="comment">// Person</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="comment">// Animal</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// never</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用JS中判断类型的函数来区分</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(a)) &#123;</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用逻辑来做类型收窄</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a?: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="comment">// string[]</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f1</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  a; <span class="comment">// number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区分类型的通解"><a class="markdownIt-Anchor" href="#区分类型的通解"></a> 区分类型的通解</h3><h4 id="类型谓词-is"><a class="markdownIt-Anchor" href="#类型谓词-is"></a> 类型谓词 is</h4><ul><li>is: 支持所以的TS类型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Rect</span> = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Circle</span> = &#123;</span><br><span class="line">  <span class="attr">center</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: Rect | Circle</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRect</span>(a)) &#123;</span><br><span class="line">    <span class="comment">// Rect</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可用箭头函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRect</span> (<span class="attr">x</span>: <span class="title class_">Rect</span> | <span class="title class_">Circle</span>): x is <span class="title class_">Rect</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;height&#x27;</span> <span class="keyword">in</span> x &amp;&amp; <span class="string">&#x27;width&#x27;</span> <span class="keyword">in</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可辨别联合-xkind"><a class="markdownIt-Anchor" href="#可辨别联合-xkind"></a> 可辨别联合 x.kind</h4><ul><li><p>让复杂类型的收窄变成简单类型的对比</p></li><li><p>要求：T = A | B | C</p><ol><li>A/B/C 有相同属性kind或其他</li><li>kind 的类型收基本类型</li><li>各类型中的kind无交集</li></ol><ul><li>则称T为可辨别联合</li><li>总结：同名、可辨别的简单类型的key</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Rect</span> = &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&#x27;Rect&#x27;</span></span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Circle</span> = &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&#x27;Circle&#x27;</span></span><br><span class="line">  <span class="attr">center</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span> | Rect | Circle</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// number</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// string</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.<span class="property">kind</span> === <span class="string">&#x27;Rect&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Rect</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.<span class="property">kind</span> === <span class="string">&#x27;Circle&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Circle</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>补充：类型收窄还可以用断言。</li></ul><h2 id="any"><a class="markdownIt-Anchor" href="#any"></a> any</h2><ol><li>any类型收所有类型的联合吗？除了 never/unknow/any/void 为什么？</li></ol><ul><li>并不是，因为类型一旦做了联合，就不能用了。只能用交集中的方法</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数a：联合类型 【string跟number的交集】</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  a.<span class="title function_">toString</span>(); <span class="comment">// 可以用，因为String跟Number都有toString方法</span></span><br><span class="line">  a.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>); <span class="comment">// 报错，因为Number没有split方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>any<ul><li>如果你不想报警，那么就用any</li><li>any：TS绝大部分规则对any不生效</li><li>any不能赋值给never</li></ul></li></ul><ol start="2"><li>什么 === 所有类型的联合？为什么</li></ol><ul><li>unknown类型（不知道数据是什么类型），可以类型收窄</li></ul><blockquote><p>any: noTypeError<br />unknown: 所有类型的联合，需要类型收窄使用</p></blockquote><h2 id="ts类型还有哪些运算"><a class="markdownIt-Anchor" href="#ts类型还有哪些运算"></a> TS类型还有哪些运算</h2><h3 id="交叉类型-intersection-types"><a class="markdownIt-Anchor" href="#交叉类型-intersection-types"></a> 交叉类型 intersection types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> &amp; <span class="built_in">number</span>; <span class="comment">// never</span></span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hasLeftHandType = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;一米八&#x27;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&#x27;一米五&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: hasLeftHandType = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;一米八&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: hasLeftHandType = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;一米八&#x27;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&#x27;一米五&#x27;</span> <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: hasLeftHandType = obj; <span class="comment">// 直接赋值，不会报错，可以有right了</span></span><br></pre></td></tr></table></figure><ul><li>接口可以有交集</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Colorful</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口能求交集</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ColorfulCircle</span> = <span class="title class_">Colorful</span> &amp; <span class="title class_">Circle</span>;</span><br></pre></td></tr></table></figure><ul><li>模拟user继承Person</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">Person</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>交叉类型的特殊场景：属性冲突</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个类型都有id，类型分别是number跟string，交叉后，类型成为never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">Person</span>; <span class="comment">// 交叉的时候不报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">User</span> = &#123; <span class="comment">// User也是never类型了</span></span><br><span class="line">  <span class="comment">// 用的时候报错</span></span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span> <span class="comment">// never</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>interface接口的继承（跟type的交叉类型比较）</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User直接报错 string的id不能赋值给number</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Type跟interface的第四个区别：Type交叉类型属性冲突后类型会变为never，interface继承后属性冲突会直接报错</p></blockquote>]]></content>
    
    
    <summary type="html">TypeScript基础知识复习</summary>
    
    
    
    <category term="TypeScript" scheme="https://lybinweb.github.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://lybinweb.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>限制并发请求并且可配置</title>
    <link href="https://lybinweb.github.io/posts/d984b3ac/index.html"/>
    <id>https://lybinweb.github.io/posts/d984b3ac/index.html</id>
    <published>2023-06-06T06:00:00.000Z</published>
    <updated>2023-06-06T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限制并发请求并且可配置"><a class="markdownIt-Anchor" href="#限制并发请求并且可配置"></a> 限制并发请求并且可配置</h2><ul><li>应用中如果需要一次性请求很多很多接口的时候，会导致网络拥堵、服务器压力增大、导致内存泄露或者浏览器崩溃，所以需要限制并发请求。</li></ul><h3 id="server"><a class="markdownIt-Anchor" href="#server"></a> server</h3><ul><li>用express写几个测试接口：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span> );</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test1&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test2&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test3&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test4&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test4&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test5&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;test5&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="client"><a class="markdownIt-Anchor" href="#client"></a> client</h3><ul><li>将请求接口的每个方法放入队列中，等待这并发请求处理</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CurrencyRequest</span> <span class="keyword">from</span> <span class="string">&#x27;./CurrencyRequest.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://localhost:8000/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest1</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test1&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest2</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test2&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest3</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test3&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest4</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test4&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest5</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">axios</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;test5&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> taskQueue = [</span><br><span class="line">  getTest1, </span><br><span class="line">  getTest2,</span><br><span class="line">  getTest3,</span><br><span class="line">  getTest4,</span><br><span class="line">  getTest5</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> currencyRequest = <span class="keyword">new</span> <span class="title class_">CurrencyRequest</span>(&#123;</span><br><span class="line">  <span class="attr">maxCurrencyCount</span>: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> task <span class="keyword">of</span> taskQueue) &#123;</span><br><span class="line">  currencyRequest.<span class="title function_">push</span>(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currencyRequest.<span class="property">responses</span>);</span><br></pre></td></tr></table></figure><ul><li>写一个类，用来实例化一个并发请求</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">CurrencyRequest</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (&#123;</span><br><span class="line">    maxCurrencyCount,</span><br><span class="line">    taskQueue,</span><br><span class="line"></span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span> = maxCurrencyCount;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskQueue</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">responses</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_doRequest</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push (task) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _doRequest () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">taskQueue</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> minCurrencyCount = <span class="title function_">_getMinCount</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="property">length</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; minCurrencyCount; i ++) &#123;</span><br><span class="line">      <span class="keyword">const</span> task = <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span> --;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_runTask</span>(task);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _runTask (task) &#123;</span><br><span class="line">    <span class="title function_">task</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">responses</span>[task.<span class="property">name</span>] = &#123;</span><br><span class="line">        <span class="attr">result</span>: res,</span><br><span class="line">        <span class="attr">error</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">responses</span>[task.<span class="property">name</span>] = &#123;</span><br><span class="line">        <span class="attr">result</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">error</span>: err</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxCurrencyCount</span> ++;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_doRequest</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_getMinCount</span> (count1, count2) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(count1, count2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">限制并发请求并且可配置</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="Promise" scheme="https://lybinweb.github.io/tags/Promise/"/>
    
    <category term="并发请求" scheme="https://lybinweb.github.io/tags/%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>5. 数据类型和结构</title>
    <link href="https://lybinweb.github.io/posts/9f26e741/index.html"/>
    <id>https://lybinweb.github.io/posts/9f26e741/index.html</id>
    <published>2023-06-05T01:46:00.000Z</published>
    <updated>2023-06-05T01:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-javascript的数据类型和结构"><a class="markdownIt-Anchor" href="#一-javascript的数据类型和结构"></a> 一、JavaScript的数据类型和结构</h2><ul><li>英文： Data types and data structure</li><li>数据类型： 编程语言中用于存储和运算的工具</li><li>数据结构： 编程语言中用于表示数据意义（队列、栈、树等）与操作的工具</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串类型的存储</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment">// 字符串运算</span></span><br><span class="line">str += <span class="string">&#x27;4&#x27;</span>; </span><br><span class="line"><span class="comment">// str =&gt; &#x27;1234&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表现的是一种数据意义：数字123顺序排列（数据的结构）</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 数据的操作：入栈</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="二-变量与类型的无关性"><a class="markdownIt-Anchor" href="#二-变量与类型的无关性"></a> 二、变量与类型的无关性</h2><h3 id="1-弱类型语言的特点"><a class="markdownIt-Anchor" href="#1-弱类型语言的特点"></a> 1、弱类型语言的特点</h3><ul><li>变量：映射内存地址的标识符 -&gt; 0x0000</li><li>类型：描述值在内存中如何存储的工具</li><li>总结：弱类型语言是动态的通过值判断类型，根据类型来分配存储空间的</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义一个标识符a</span><br><span class="line"><span class="number">2.</span> a作为一个变量</span><br><span class="line"><span class="number">3.</span> 分配双精度<span class="number">64</span>位的存储空间</span><br><span class="line"><span class="number">4.</span> 将<span class="number">1</span>存储到这个空间</span><br><span class="line"><span class="number">5.</span> 重新分配字符串空间</span><br><span class="line"><span class="number">6.</span> 将字符串 <span class="string">&#x27;1&#x27;</span> 存储到该空间</span><br><span class="line"><span class="number">7.</span> 将标识符a映射到新的空间地址</span><br><span class="line"></span><br><span class="line">标识符    地址    栈</span><br><span class="line">a        <span class="number">0x0001</span>  <span class="string">&#x27;1&#x27;</span></span><br><span class="line">a        <span class="number">0x0000</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-强类型语言"><a class="markdownIt-Anchor" href="#2-强类型语言"></a> 2、强类型语言</h3><ul><li>根据变量指定的类型分配空间，将值存储到该空间</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>; <span class="comment">// x</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>; <span class="comment">// x  -128~127</span></span><br></pre></td></tr></table></figure><h2 id="三-基本数据类型与原始值"><a class="markdownIt-Anchor" href="#三-基本数据类型与原始值"></a> 三、基本数据类型与原始值</h2><ul><li>Primitive data type and primitive value</li></ul><h3 id="1-基本数据类型"><a class="markdownIt-Anchor" href="#1-基本数据类型"></a> 1、基本数据类型</h3><ul><li>语言最底层指定的数据类型（不需要任何语言工具创建）</li><li>类型的表示：一般来说首写字母大写<ol><li>Null</li><li>undefined</li><li>Boolean</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li></ol></li><li>typeof运算符后的结果：<ol><li>Null -&gt; object</li><li>undefined -&gt; undefined</li><li>Boolean -&gt; boolean</li><li>Number -&gt; number</li><li>BigInt -&gt; bigint</li><li>String -&gt; string</li><li>Symbol -&gt; symbol</li></ol></li><li>原始值（基础数据类型值）：语言最底层就指定的基本数据类型对应的值<ol><li>Null null</li><li>undefined undefined</li><li>Boolean true/false</li><li>Number 123/1.2</li><li>BigInt 任意数值的整数</li><li>String ‘abc’</li><li>Symbol Symbol(abc)</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> varBigInt = <span class="title class_">BigInt</span>(<span class="number">223</span>);</span><br><span class="line"><span class="keyword">let</span> varSymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-原始值的不可变性"><a class="markdownIt-Anchor" href="#2-原始值的不可变性"></a> 2、原始值的不可变性</h3><ul><li>不可变：数据存储在内存中，不可更改（针对于栈内存存储）</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">标识符    地址    栈内存</span><br><span class="line">a       <span class="number">0x0001</span>    <span class="number">2</span></span><br><span class="line">        <span class="number">0x0000</span>    <span class="number">1</span>  （值是不可以变化的，需要等着垃圾回收）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 栈内存中的1，它是不可以改变的</span></span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 栈中重新保存2</span></span><br></pre></td></tr></table></figure><h2 id="四-声明变量默认被分配的值变量的默认初始化"><a class="markdownIt-Anchor" href="#四-声明变量默认被分配的值变量的默认初始化"></a> 四、声明变量默认被分配的值（变量的默认初始化）</h2><ol><li>系统默认初始化</li></ol><ul><li>undefined（是JS系统种默认分配的值）</li><li>undefined是缺省值的情况下默认分配的值</li></ul><ol start="2"><li>手动初始化</li></ol><ul><li>声明变量与初始化操作<ul><li>var a = 1;</li><li>Variable declaration + value initialization</li></ul></li><li>原则上不明确类型的引用类型缺省的时候初始化：null<ul><li>let obj = null; // 语义化更好</li></ul></li><li>引用值：数据的容器<ul><li>{ a: 1, b: 2}</li><li>[1, 2, 3]</li></ul></li><li>总结：系统默认会对变量的类型指定为原始值，原始值的系统默认值为undefined，null为空指针，指针并未指向任何内存空间</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标识符      栈          堆</span></span><br><span class="line"><span class="comment">          null -&gt;   </span></span><br><span class="line"><span class="comment">obj       0x0000  -&gt;  &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="literal">null</span>; <span class="comment">// 语义化更高</span></span><br><span class="line">obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="五-值的真假性truthy-falsyfalsey"><a class="markdownIt-Anchor" href="#五-值的真假性truthy-falsyfalsey"></a> 五、值的真假性（truthy / falsy|falsey）</h2><ul><li>Boolean类型是逻辑性的值：<ul><li>true/false 真假、正反、是否 非黑即白的逻辑</li></ul></li><li>用Boolean的逻辑看待值的真假性</li><li>用Boolean()转换布尔值：<ul><li>true -&gt; truthy值（真值）</li><li>false -&gt; falsy值（假值）</li></ul></li><li>falsy值：<ul><li>false</li><li>0/-0/0n(BigInt的表示法)</li><li>“”/’’/``</li><li>null</li><li>undefined</li><li>NaN</li></ul></li><li>truthy值：除了假值外，都是真值</li><li>Java：<code>if (...返回真假...) &#123;&#125;</code></li><li>JavaScript：<code>if (...返回布尔值/返回真假值) &#123;&#125;</code><ul><li>if (1/true) {}</li><li>if (0/false) {}</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="六-对象引用数据类型object-data-types"><a class="markdownIt-Anchor" href="#六-对象引用数据类型object-data-types"></a> 六、对象（引用）数据类型（Object data types）</h2><ul><li>对象：一种内存存储为引用型的数据类型</li><li>引用：标识符可以通过地址引用一块内存空间（具备指针特性）</li><li>总结：<ul><li>栈内存通过地址指针寻找堆内存中的特定空间，并获取到内存存储的值</li><li>当空间引用被全部清除，该值就会被垃圾回收机制在一个周期之内回收，并释放当前空间</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">标识符        栈        指针        堆</span></span><br><span class="line"><span class="comment">          0x0000        -&gt; 断掉   &#123; a: 1 &#125; 么有引用，垃圾回收</span></span><br><span class="line"><span class="comment">obj2      0x0000</span></span><br><span class="line"><span class="comment">arr          0x0001      -&gt;      [1, 2, 3]</span></span><br><span class="line"><span class="comment">          0x0002      -&gt;      &#123; b: 2 &#125; 没有引用，垃圾回收</span></span><br><span class="line"><span class="comment">obj          null        -&gt;        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">obj = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">obj = <span class="literal">null</span>; <span class="comment">// 断开引用，不等于堆内存空间的值被删除，需要等待垃圾回收机制周期性清除</span></span><br></pre></td></tr></table></figure><h2 id="七-引用值对象值"><a class="markdownIt-Anchor" href="#七-引用值对象值"></a> 七、引用值（对象值）</h2><ul><li>Object</li><li>Array</li><li>Date</li><li>Map|WeakMap</li><li>Set|WeakSet</li><li>Function</li><li>() =&gt; {}</li><li>迭代器生成器函数</li></ul><h3 id="1-引用值的可变性"><a class="markdownIt-Anchor" href="#1-引用值的可变性"></a> 1、引用值的可变性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;a: 1&#125; 变化了 -&gt; &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-引用值的属性访问"><a class="markdownIt-Anchor" href="#2-引用值的属性访问"></a> 2、引用值的属性访问</h3><ul><li>总结：只有引用值类型的数据才有属性</li><li>访问属性的方法：<ol><li>点语法 <code>const obj = &#123;a: 1&#125;; console.log(obj.a);</code></li><li>索引法 <code>const obj = &#123;a: 1&#125;; console.log(obj['a']);</code></li><li>类型的工具上有get方法：比如Map上的get方法</li></ol></li><li>数组的访问：索引法</li></ul><h2 id="八-原始值的包装特性"><a class="markdownIt-Anchor" href="#八-原始值的包装特性"></a> 八、原始值的包装特性</h2><ul><li>除了Undefined、Null以外，每一种基本数据类型都有对象的对象包装器</li><li>对象包装器：因为只有引用类型值有访问属性的能力，原始值没有属性访问的能力。为了让原始值有可访问特定属性的能力而设计的对象转换工具</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建标识符str</span><br><span class="line"><span class="number">2.</span> 开辟字符串存储空间</span><br><span class="line"><span class="number">3.</span> 将<span class="string">&#x27;abc&#x27;</span>存储到该空间</span><br><span class="line"><span class="number">4.</span> 将空间地址映射到标识符str</span><br><span class="line"><span class="number">5.</span> 代码走到.<span class="property">length</span></span><br><span class="line"><span class="number">6.</span> <span class="keyword">new</span> <span class="title class_">String</span>(str) 进行包装</span><br><span class="line"><span class="number">7.</span> 调用<span class="title class_">String</span> -&gt; length属性</span><br><span class="line"><span class="number">8.</span> 输出length -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">9.</span> 包装对象销毁</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">str.<span class="property">len</span> = <span class="number">123</span>; <span class="comment">// new String() 没有引用，所以赋值后最终还会销毁包装对象的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">len</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JavaScript数据类型和结构,truthy,falsy,falsey</summary>
    
    
    
    <category term="JavaScript - 【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript-%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/tags/%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>4. 变量声明</title>
    <link href="https://lybinweb.github.io/posts/164dee6/index.html"/>
    <id>https://lybinweb.github.io/posts/164dee6/index.html</id>
    <published>2023-05-26T03:18:00.000Z</published>
    <updated>2023-05-26T03:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-变量声明"><a class="markdownIt-Anchor" href="#4-变量声明"></a> 4. 变量声明</h1><ul><li>Variable Declaration</li><li>JavaScript：ES3 var</li><li>JavaScript：ES6 let const<ul><li>ES6：面向对象推给JS开发者</li></ul></li></ul><h2 id="一-javascript-4种声明变量的方法"><a class="markdownIt-Anchor" href="#一-javascript-4种声明变量的方法"></a> 一、<strong>JavaScript 4种声明变量的方法</strong></h2><ol><li>var ES3 不推荐</li><li>implicit 暗示全局变量 ES3 不推荐</li><li>let ES6</li><li>const ES6</li></ol><h3 id="1-var"><a class="markdownIt-Anchor" href="#1-var"></a> 1、<strong>var</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a; // 初始化可选</span><br><span class="line">var b = 1; // 初始化：声明变量时，对一个变量对应的值的设置</span><br><span class="line"></span><br><span class="line">c; // c -&gt; 访问 -&gt; c is not defined</span><br><span class="line">d = 3; // 不用声明关键字 暗示全局变量</span><br></pre></td></tr></table></figure><h3 id="2-let"><a class="markdownIt-Anchor" href="#2-let"></a> 2、<strong>let</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a; // 声明变量，并且初始化</span><br><span class="line">let b = 1;</span><br></pre></td></tr></table></figure><h3 id="3-const"><a class="markdownIt-Anchor" href="#3-const"></a> 3、<strong>const</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a; // 语法错误 丢失了初始化器</span><br><span class="line"></span><br><span class="line">const b = 1; // 声明常量，并且初始化</span><br></pre></td></tr></table></figure><h2 id="二-变量初始化"><a class="markdownIt-Anchor" href="#二-变量初始化"></a> 二、<strong>变量初始化</strong></h2><ul><li><p>变量第一次被赋值的过程</p><ol><li>声明一个变量</li><li>将某一个值赋值给一个变量 （var let 可选，暗示 const 必选）</li><li>开发者手动进行赋值</li><li>系统默认进行赋值 undefined</li></ol></li><li><p>声明变量必定会有给该变量进行初始化值的过程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a; // undefined 是JavaScript系统种唯一的默认值</span><br><span class="line"></span><br><span class="line">let b; // undefined</span><br></pre></td></tr></table></figure></li></ul><h2 id="三-单一声明"><a class="markdownIt-Anchor" href="#三-单一声明"></a> 三、<strong>单一声明</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1,</span><br><span class="line">    b = 2,</span><br><span class="line">    c = 3;</span><br></pre></td></tr></table></figure><h2 id="四-分号书写规则"><a class="markdownIt-Anchor" href="#四-分号书写规则"></a> 四、<strong>分号书写规则</strong></h2><ul><li>JS引擎会分析代码自动加上必要的分号</li><li>ES3-5：推荐打分号（约定俗成的规范）</li><li>ES6：没有推荐</li><li>注意：<ul><li>要打都打，要不打都不打</li><li>立即执行函数建议在前面打分号</li><li>语句不打分号</li></ul></li></ul><h2 id="五-var"><a class="markdownIt-Anchor" href="#五-var"></a> 五、<strong>var</strong></h2><ul><li>全局作用域变量（globally-scoped Variable全局变量）</li><li>函数作用域变量（function-scoped Variable函数局部变量）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">var a; // undefined</span><br><span class="line">var b = 1; // var statement （var 语句）</span><br><span class="line"></span><br><span class="line">var b = 2; // var声明是可以重复的（BUG）</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  var a = 2; // 函数作用域变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-什么是作用域"><a class="markdownIt-Anchor" href="#1-什么是作用域"></a> 1、<strong>什么是作用域</strong></h3><ul><li>什么是作用域：限定变量可访问权限的范围</li></ul><h3 id="2-全局作用域"><a class="markdownIt-Anchor" href="#2-全局作用域"></a> 2、<strong>全局作用域</strong></h3><ul><li><p>全局作用域：基于<code>window</code>或者<code>globalThis</code>的可访问范围</p><ol><li>一个HTML的访问，会产生一个对应着该HTML的JavaScript全局作用域。任何脚本被该HTML引入，就共享一个全局作用域</li><li>全局作用域变量：在该全局作用域直接声明的变量。在全局作用域声明的变量，系统会在全局对象（window、globalThis）中创建对应的属性</li><li>之所以可以不用全局对象访问变量，是因为全局作用域属性对所有其他</li></ol></li><li><p>总结：在全局作用域直接用var声明的变量，是以全局对象属性的形式被创建的</p></li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">globalThis.<span class="property">a</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span>; <span class="comment">// 1</span></span><br><span class="line">a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="3-函数作用域"><a class="markdownIt-Anchor" href="#3-函数作用域"></a> 3、<strong>函数作用域</strong></h3><ul><li>函数作用域：function body（函数体）的访问范围<ol><li>函数内部的作用域叫函数作用域，也叫函数局部作用域</li><li>局部作用域内可访问全局作用域的变量</li><li>全局作用域无法访问函数作用域的变量</li><li>函数可以嵌套函数，作用域可以嵌套作用域</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  console.log(a);</span><br><span class="line"></span><br><span class="line">  var b = 2;</span><br><span class="line"></span><br><span class="line">  function test2 () &#123;</span><br><span class="line">    var c = 3;</span><br><span class="line">    console.log(b);</span><br><span class="line">    console.log(c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  test2();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(b); // Uncaught ReferenceError: b is not defined  产生了错误，这个错误未被捕获，所以程序停止</span><br><span class="line"></span><br><span class="line">// 尝试运行一段程序 看他有没有错误</span><br><span class="line">try &#123;</span><br><span class="line">  console.log(b);</span><br><span class="line">&#125; catch (e) &#123; // 捕获错误</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块级作用域：基于block的访问范围</li></ul><h3 id="4-变量提升"><a class="markdownIt-Anchor" href="#4-变量提升"></a> 4、<strong>变量提升</strong></h3><ul><li><p>Variable Hoisting</p><ol><li>代码在执行的最开始，会进行预编译操作</li><li>预编译的过程<ol><li>【预编译阶段】找到var -&gt; 变量a</li><li>【预编译阶段】放入预编译容器 { a }</li><li>【预编译阶段】初始化 { a: undefined }</li><li>【执行期阶段】打印a -&gt; undefined</li><li>【执行期阶段】a = 1 将1赋值给变量a</li></ol></li></ol></li><li><p>总结：尽量按照程序的逻辑顺序进行变量声明和访问；变量提升var声明的一个缺点（BUG）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(a); // undefined</span><br><span class="line">var a = 1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 2;</span><br><span class="line">var a = 1;</span><br><span class="line">console.log(a); // 1</span><br><span class="line"></span><br><span class="line">1. 预编译 找到var -&gt; a</span><br><span class="line">2. 预编译 &#123; a &#125;</span><br><span class="line">3. 预编译 &#123; a: undefined &#125;</span><br><span class="line">4. 执行期 &#123; a: 2 &#125;</span><br><span class="line">5. 执行期 &#123; a: 1 &#125;</span><br><span class="line">6. 执行期 打印 a -&gt; 1</span><br></pre></td></tr></table></figure><h3 id="5-暗示全局变量暗示implicit"><a class="markdownIt-Anchor" href="#5-暗示全局变量暗示implicit"></a> 5、<strong>暗示全局变量（暗示implicit）</strong></h3><ol><li>未用任何变量声明关键字段变量</li><li>暗示全局变量必须手动进行变量初始化</li><li>暗示全局变量默认为全局变量</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1; // 不报错 因为已经初始化</span><br><span class="line">b; // 但是你不初始化就会报错 访问变量b</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 1. 函数必须执行</span><br><span class="line">   * 2. 暗示全局变量 定义c作为全局对象的属性</span><br><span class="line">   */</span><br><span class="line">  c = 1;</span><br><span class="line">  console.log(c, &#x27;test&#x27;); // 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(c, &#x27;global.c&#x27;); // 1</span><br><span class="line">console.log(window.c, &#x27;window.c&#x27;); // 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function test () &#123;</span><br><span class="line">  // var a 局部变量</span><br><span class="line">  // b： 暗示全局变量</span><br><span class="line">  var a = b = 1;</span><br><span class="line"></span><br><span class="line">  // 单一声明</span><br><span class="line">  // var c 局部变量</span><br><span class="line">  // var d 局部变量</span><br><span class="line">  // 1 =&gt; c</span><br><span class="line">  // c =&gt; d</span><br><span class="line">  var c,</span><br><span class="line">      d = c = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">console.log(&#x27;global.a&#x27;, b); // 报错 需要try catch，就不会阻断代码执行了</span><br><span class="line">console.log(&#x27;global.b&#x27;, b); // 阻断执行</span><br></pre></td></tr></table></figure><h3 id="6-var最不合理的几点"><a class="markdownIt-Anchor" href="#6-var最不合理的几点"></a> 6、<strong>var最不合理的几点</strong></h3><ol><li>可以重复声明</li><li>变量提升 （声明之前可以访问）</li><li>暗示全局变量 （可以不用声明变量的关键字声明变量）</li></ol><h2 id="六-let"><a class="markdownIt-Anchor" href="#六-let"></a> 六、<strong>let</strong></h2><h3 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念"></a> 1、概念</h3><ul><li>ES6 block 块<ul><li>block-scoped 块级作用域</li><li>类似于函数作用域</li></ul></li><li>限制变量可访问范围的工具作用域：块</li><li>这个范围就是块作用域</li><li>在ES6中<ul><li>函数体</li><li>if</li><li>for</li><li>while</li><li>或直接用 {} 声明的块等包含的{}都是块作用域</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 证明ES5中没有块的概念</span><br><span class="line">/**</span><br><span class="line"> * 为什么ES5没有块的概念？</span><br><span class="line"> * ES5中用var声明变量需要在预编译中对变量进行初始化</span><br><span class="line"> * 这样就没办法以块作用域的概念限制外界访问a</span><br><span class="line"> * 所以在ES5中要实现块作用域概念，必须用函数限制</span><br><span class="line"> */</span><br><span class="line">if (true) &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // 1</span><br><span class="line"></span><br><span class="line">// ===============</span><br><span class="line"></span><br><span class="line">if (false) &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // undefined</span><br><span class="line"></span><br><span class="line">// ===============</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ES6中如何实现块作用域</span><br><span class="line"> *</span><br><span class="line"> * let在块中声明的变量是在代码执行期进行声明和初始化的</span><br><span class="line"> * 所以支持了块作用域访问的限制（用let，就创建了块作用域，是错误的说法。是因为用let在&#123;&#125;里声明变量，JS引擎会将&#123;&#125;解析成块作用域）</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  let a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // 报错 a is not defined</span><br></pre></td></tr></table></figure><h3 id="2-块作用域可以单独进行创建"><a class="markdownIt-Anchor" href="#2-块作用域可以单独进行创建"></a> 2、<strong>块作用域可以单独进行创建 {}</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(b);</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let a = 1;</span><br><span class="line">  var b = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(b);</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><ul><li>let声明：声明块作用域的局部变量</li></ul><h3 id="3-let声明变量的访问限制"><a class="markdownIt-Anchor" href="#3-let声明变量的访问限制"></a> 3、<strong>let声明变量的访问限制</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 不能在初始化之前访问变量a</span><br><span class="line"></span><br><span class="line">console.log(a); // 报错</span><br><span class="line">let a = 1; // 初始化的过程是在执行期 在这里初始化为undefined</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 【预编译】找let -&gt; 变量a</span><br><span class="line"> * 【预编译】存变量 &#123; a &#125; （不进行初始化）</span><br><span class="line"> * 【执行期】打印a =&gt; xxx</span><br><span class="line"> *</span><br><span class="line"> * 总结：let声明是在执行代码到达let这一行时开始初始化变量的</span><br><span class="line"> *</span><br><span class="line"> * 在let a;之前，这一段代码(console.log(a))，是暂时性死区 Temporal Dead Zone;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let a = a + 1; // 不可以 暂时性死区</span><br><span class="line"></span><br><span class="line">var a = a + 1; // 可以 这里已经赋值初始化了</span><br></pre></td></tr></table></figure><h3 id="4-块作用域与函数作用域"><a class="markdownIt-Anchor" href="#4-块作用域与函数作用域"></a> 4、<strong>块作用域与函数作用域</strong></h3><ol><li>var声明的变量，访问只能被限制在函数作用域范围内</li><li>let声明的变量，访问可以被限制在块作用域和函数作用域内</li></ol><h3 id="5-重复声明"><a class="markdownIt-Anchor" href="#5-重复声明"></a> 5、<strong>重复声明</strong></h3><ul><li>let声明不允许重复声明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line">let a = 2; // Uncaught SyntaxError</span><br></pre></td></tr></table></figure><h3 id="6-let跟var的冲突"><a class="markdownIt-Anchor" href="#6-let跟var的冲突"></a> 6、<strong>let跟var的冲突</strong></h3><ul><li>在同一作用域下，相同标识符不可以同时被var跟let声明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  var a = 2; // 重复声明</span><br><span class="line">  // 【预编译】&#123; a &#125; 放不进去，全局let已经声明a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七-const"><a class="markdownIt-Anchor" href="#七-const"></a> 七、<strong>const</strong></h2><ul><li>const -&gt; constant</li><li>con + stant</li><li>come 一起，全部</li><li>stant：stand 站立</li><li>constant -&gt; 状态不变</li><li>const：常量（常数变量）不可变的量<ul><li>const的特征与let几乎一致</li></ul></li></ul><h3 id="1-const与let不同点"><a class="markdownIt-Anchor" href="#1-const与let不同点"></a> 1、<strong>const与let不同点</strong></h3><ol><li>必须手动初始化：<code>const a = 1;</code></li><li>在初始化后，不可改变其值</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a; // 语法错误 丢失了初始化器</span><br><span class="line"></span><br><span class="line">const b = 1; // 声明常量，并且初始化</span><br></pre></td></tr></table></figure><h3 id="2-书写"><a class="markdownIt-Anchor" href="#2-书写"></a> 2、<strong>书写</strong></h3><ul><li>常量一般使用全大写，单词之前用下划线分隔</li></ul><ol><li>所有不能变更的值或者值不变的量都应该使用const</li><li>只有后续需要变更值的量使用let</li><li>var尽量不适用</li></ol>]]></content>
    
    
    <summary type="html">4. 变量声明</summary>
    
    
    
    <category term="JavaScript - 【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript-%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="【新】颠覆认知的JavaScript" scheme="https://lybinweb.github.io/tags/%E3%80%90%E6%96%B0%E3%80%91%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>vue2数据劫持</title>
    <link href="https://lybinweb.github.io/posts/aa078834/index.html"/>
    <id>https://lybinweb.github.io/posts/aa078834/index.html</id>
    <published>2023-05-25T08:57:00.000Z</published>
    <updated>2023-05-25T08:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue2数据劫持"><a class="markdownIt-Anchor" href="#vue2数据劫持"></a> Vue2数据劫持</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li><p>new Vue(options)</p></li><li><p>处理options.data，进行数据劫持</p></li><li><p>data执行后，才会返回一个数据对象（data也可以是个对象，但是不推荐这样做）</p></li><li><p>主程序入口 f Vue () {}</p></li><li><p>f _init () {} 挂载到了Vue原型上 作为初始化程序</p><ul><li>主要进行初始化很多事，选项相关的都需要初始化，比如data、computed、watch等</li></ul><ol><li><p>保存this到vm，后续用vm代替Vue实例化对象</p></li><li><p>在实例上挂载$options</p></li><li><p>初始化数据，将实例带入 -&gt; initState(vm)</p><ul><li>数据劫持：在赋值、获取数据时还要做别的事，如视图也要改变，数据变化的时候视图也要变更，那么就需要数据拦截</li><li>分门别类进行初始化数据，比如data、computed、watch等</li></ul><ol><li>处理data数据： initData(vm) 如果data存在，则进行初始化<ul><li>从options拿到data，判断data是对象或者是函数，从而取data数据（注意，如果是函数时，需要注意this指向）</li><li>保存data，将data挂载到vm上</li><li>对vm._data 做代理（当访问vm.title就代理到vm._data.title）</li><li>对data进行循环，代理每一项：proxyData(vm, ‘_data’, key)<ul><li>使用Object.defineProperty进行数据代理</li></ul></li><li>观察data（观察数据）：observe(vm._data)<ul><li>如果不是对象则不观察</li><li>否则则观察则进行拦截：return new Observer(data) 【多了一层observe，因为在第一层observe中我们要排除不观察的条件，比如data不是对象或者是null，我们就可以不进行观察】</li></ul></li></ul></li></ol></li></ol></li><li><p>f Observer (data) {}:</p></li></ol><ul><li>区分对象或者数组，因为Object.defineProperty是不对数组进行拦截的</li></ul><ol><li><p>data如果是数组</p><ul><li>对更改原数组的方法进行重写，这一系列方法都会对数据变更，内部可能增加、删除一些东西；操作数组后，更改原数组的这个过程当中，视图是有可能更改的，那么就必须要做视图更新，还有别的一系列操作。新增的这一项，是否需要观察他</li><li>将更改源数组的方法保存到配置中：ARR_METHODS</li><li>将Array.prototype所有的方法保存到新的引用：originArrMethods</li><li>arrMethods：重写数组方法希望他是一个新的对象，那么我们需要创建一个对象利用Object.create, 并且指定他的原型为数组原型originArrMethods</li><li>遍历保存的数组方法集合，在arrMethods中重写对应的数组方法<ul><li>数组参数是不定的，需要保存实参列表</li><li>执行原数组方法，才能达到更改数据，用apply，谁调用指向谁</li><li>当原数组方法执行完毕后，还需要干别的事：<ul><li>当数组方法是push、unshift、splice时，会在数组中新增项的</li><li>那么就需要保存新增项（可能是对象或数组），从而继续观察他：observeArr(newArr)<ul><li>遍历newArr，继续观察observe()</li></ul></li></ul></li></ul></li></ul><ol><li>设置data的原型为： arrMethods，那么操作data数据的数组方法，就用到了我们自己重写的数组方法，从而观察数据，更新视图</li><li>如果data是数组？递归观察data：observeArr(data)</li></ol></li><li><p>data如果是对象</p><ul><li>Observer原型方法：walk，观察对象<ul><li>拿出data的key、value，遍历每一项进行拦截操作：defineReactiveData(data, key, value)<ul><li>注意：这里的value还可能是对象获数组，那么需要递归观察：observe(value)</li><li>Object.defineProperty进行数据代理<ul><li>在set的时候，需要注意newValue可能是对象数组，那么需要递归观察：observe(newValue)</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="源码地址"><a class="markdownIt-Anchor" href="#源码地址"></a> 源码地址</h3><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/Vue/Vue2-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81">Vue2数据劫持</a></p>]]></content>
    
    
    <summary type="html">vue2数据劫持,数据劫持</summary>
    
    
    
    <category term="Vue" scheme="https://lybinweb.github.io/categories/Vue/"/>
    
    
    <category term="数据劫持" scheme="https://lybinweb.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/"/>
    
    <category term="Vue" scheme="https://lybinweb.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript图片压缩</title>
    <link href="https://lybinweb.github.io/posts/f4d49811/index.html"/>
    <id>https://lybinweb.github.io/posts/f4d49811/index.html</id>
    <published>2023-05-24T06:00:00.000Z</published>
    <updated>2023-09-22T02:51:22.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原生javascript图片压缩"><a class="markdownIt-Anchor" href="#原生javascript图片压缩"></a> 原生JavaScript图片压缩</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li>获取图片文件对象</li><li>利用FileReader读取图片文件然后转成base64格式或者转成blob格式</li><li>创建压缩图片<ol><li>创建canvas画布</li><li>创建图片对象，将原图片的src base64赋给该图片对象src</li><li>利用canvas画布将原图片绘制到画布中</li><li>生成压缩图片<ol><li>利用canvas对象方法toDataURL降低画布质量达到压缩效果</li><li>如果压缩后比压缩前大，那么递归压缩</li></ol></li></ol></li></ol><h3 id="案例代码实现"><a class="markdownIt-Anchor" href="#案例代码实现"></a> 案例代码实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* img 属于inline-block */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: initial;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.img-preview</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;imgFileSelector&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;请选择图片&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;originImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hide img-preview&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;compressedImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hide img-preview&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oImgFileSelector = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#imgFileSelector&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> oOriginImgPreview = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#originImgPreview&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> oCompressImgPreview = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#compressedImgPreview&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IMG_TYPES</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;image/jpeg&#x27;</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;image/png&#x27;</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;image/jpg&#x27;</span>: <span class="string">&#x27;image/jpg&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgFile = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> quality = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">let</span> compressedImgSrc = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bindEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  oImgFileSelector.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, handleFileSelectorChange, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleFileSelectorChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 选中的图片文件对象</span></span><br><span class="line">  imgFile = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!imgFile || !<span class="variable constant_">IMG_TYPES</span>[imgFile.<span class="property">type</span>]) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请选择正确格式的图片&#x27;</span>);</span><br><span class="line">    <span class="title function_">setImgFileEmpty</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setImgPreview</span>(imgFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setImgFileEmpty</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  oImgFileSelector.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  imgFile = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setPreviewVisible</span>(oOriginImgPreview, <span class="literal">false</span>);</span><br><span class="line">  <span class="title function_">setPreviewVisible</span>(oCompressImgPreview, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setImgPreview</span> = (<span class="params">imgFile</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (imgFile <span class="keyword">instanceof</span> <span class="title class_">File</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件</span></span><br><span class="line"><span class="comment">     * 方法1.转成base64格式</span></span><br><span class="line"><span class="comment">     * 方法2.转成blob格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> originImgSrc = reader.<span class="property">result</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">createCompressedImage</span>(&#123;</span><br><span class="line">        <span class="attr">imgSrc</span>: originImgSrc,</span><br><span class="line">        <span class="attr">type</span>: imgFile.<span class="property">type</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      oOriginImgPreview.<span class="property">src</span> = originImgSrc;</span><br><span class="line">      oCompressImgPreview.<span class="property">src</span> = compressedImgSrc;</span><br><span class="line">      <span class="title function_">setPreviewVisible</span>(oCompressImgPreview, <span class="literal">true</span>);</span><br><span class="line">      <span class="title function_">setPreviewVisible</span>(oOriginImgPreview, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(compressedImgSrc.<span class="property">length</span>, originImgSrc.<span class="property">length</span>, quality);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(imgFile);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建压缩图片方法 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createCompressedImage</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  imgSrc,</span></span><br><span class="line"><span class="params">  type</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 1. canvas画布</span></span><br><span class="line"><span class="comment">   * 2. IMG图片对象</span></span><br><span class="line"><span class="comment">   * 3. 将压缩的图片的base64交给IMG图片对象</span></span><br><span class="line"><span class="comment">   * 4. 在将图片画到canvas上</span></span><br><span class="line"><span class="comment">   * 5. 最终画完后拿到canvas对象，在对其质量整体进行缩小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> oImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oImg.<span class="property">src</span> = imgSrc;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    oImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> imgWidth = oImg.<span class="property">width</span>;</span><br><span class="line">      <span class="keyword">const</span> imgHeight = oImg.<span class="property">height</span>;</span><br><span class="line"></span><br><span class="line">      oCan.<span class="property">width</span> = imgWidth;</span><br><span class="line">      oCan.<span class="property">height</span> = imgHeight;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在canvas中绘制图片</span></span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(oImg, <span class="number">0</span>, <span class="number">0</span>, imgWidth, imgHeight);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 生成压缩图片 toBlob()也可以</span></span><br><span class="line">      <span class="title function_">doCompress</span>(oCan, imgSrc, type);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">resolve</span>(compressedImgSrc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 封装压缩图片函数 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doCompress</span> = (<span class="params">canvas, imgSrc, type</span>) =&gt; &#123;</span><br><span class="line">  compressedImgSrc = canvas.<span class="title function_">toDataURL</span>(type, quality / <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (compressedImgSrc.<span class="property">length</span> &gt;= imgSrc.<span class="property">length</span> &amp;&amp; quality &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    quality -= <span class="number">10</span>;</span><br><span class="line">    <span class="title function_">doCompress</span>(canvas, imgSrc, type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 设置图片显示与否 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setPreviewVisible</span> = (<span class="params">node, visible</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (visible) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">true</span>:</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">false</span>:</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原生JavaScript图片压缩</summary>
    
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lybinweb.github.io/tags/JavaScript/"/>
    
    <category term="图片压缩" scheme="https://lybinweb.github.io/tags/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>3. 从MVC到MVP</title>
    <link href="https://lybinweb.github.io/posts/9cafadb8/index.html"/>
    <id>https://lybinweb.github.io/posts/9cafadb8/index.html</id>
    <published>2023-05-15T09:11:00.000Z</published>
    <updated>2023-05-15T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-从mvc到mvp"><a class="markdownIt-Anchor" href="#3-从mvc到mvp"></a> 3. 从MVC到MVP</h1><h2 id="mvp"><a class="markdownIt-Anchor" href="#mvp"></a> MVP</h2><blockquote><p>MVP：在视图呈现上分层</p></blockquote><ul><li>M：model 数据创建、数据操作方法集合（提供回调，在P中更新视图）</li><li>V：view 视图管理、视图函数（处理更新）</li><li>P：presenter 呈现管理</li></ul><p><a href="https://imgse.com/i/p9gHmsH"><img src="https://s1.ax1x.com/2023/05/15/p9gHmsH.png" alt="p9gHmsH.png" /></a></p><ul><li>从前端视图与数据关系的逻辑分层给予了明确指导</li><li>做到了视图呈现的逻辑与数据管理和视图之间的分离</li><li>但并没有对呈现逻辑做彻底的抽象，我们每写一个MVP的时候，都需要创建独立的呈现管理器</li></ul><h2 id="mvp设计思想实现todolist"><a class="markdownIt-Anchor" href="#mvp设计思想实现todolist"></a> MVP设计思想实现TodoList</h2><h3 id="indexhtml"><a class="markdownIt-Anchor" href="#indexhtml"></a> index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./presenter.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="views"><a class="markdownIt-Anchor" href="#views"></a> views</h3><h4 id="viewsformjs"><a class="markdownIt-Anchor" href="#viewsformjs"></a> views/Form.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodoForm</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> oTodoForm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oTodoForm.<span class="property">innerHTML</span> += <span class="title class_">TodoInput</span>();</span><br><span class="line">  oTodoForm.<span class="property">innerHTML</span> += <span class="title class_">AddButton</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodoInput</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;input </span></span><br><span class="line"><span class="string">        type=&quot;text&quot;</span></span><br><span class="line"><span class="string">        id=&quot;J_TodoInput&quot;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AddButton</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;button id=&quot;J_btn&quot;&gt;ADD&lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="viewstodolistjs"><a class="markdownIt-Anchor" href="#viewstodolistjs"></a> views/TodoList.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">TodoList</span> (todoData) &#123;</span><br><span class="line">  <span class="keyword">const</span> oList = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">  oList.<span class="property">id</span> = <span class="string">&#x27;J_TodoList&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  todoData.<span class="title function_">forEach</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">    oList.<span class="title function_">appendChild</span>(<span class="title class_">TodoItem</span>(todo));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">TodoItem</span> (todo) &#123;</span><br><span class="line">  <span class="keyword">const</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oLi.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123; todo.completed ? <span class="string">&#x27;checked&#x27;</span> : <span class="string">&#x27;&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="string">      data-id=&quot;<span class="subst">$&#123; todo.id &#125;</span>&quot;</span></span><br><span class="line"><span class="string">    /&gt;</span></span><br><span class="line"><span class="string">    &lt;span</span></span><br><span class="line"><span class="string">      style=&quot;text-decoration: <span class="subst">$&#123; todo.completed ? <span class="string">&#x27;line-through&#x27;</span> : <span class="string">&#x27;&#x27;</span> &#125;</span>&quot;</span></span><br><span class="line"><span class="string">    &gt;<span class="subst">$&#123; todo.content &#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;button data-id=&quot;<span class="subst">$&#123; todo.id &#125;</span>&quot;&gt;DELETE&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oLi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="viewsindexjs"><a class="markdownIt-Anchor" href="#viewsindexjs"></a> views/index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">TodoForm</span> <span class="keyword">from</span> <span class="string">&#x27;./Form&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoItem</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./TodoList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoForm</span>,</span><br><span class="line">  <span class="title class_">TodoItem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="modeljs"><a class="markdownIt-Anchor" href="#modeljs"></a> model.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">TodoModel</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoText</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTodoText (text) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoText</span> = text;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo (text, callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> todo = &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">      <span class="attr">content</span>: text,</span><br><span class="line">      <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">push</span>(todo);</span><br><span class="line">    <span class="title function_">doCallback</span>(callback, todo);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setTodoText</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleTodo (id, callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (todo.<span class="property">id</span> === id) &#123;</span><br><span class="line">        todo.<span class="property">completed</span> = !todo.<span class="property">completed</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> todo;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">doCallback</span>(callback, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo (id, callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== id);</span><br><span class="line">    <span class="title function_">doCallback</span>(callback, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> create () &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">TodoModel</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">TodoModel</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">TodoModel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">TodoModel</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doCallback</span> (callback, arg) &#123;</span><br><span class="line">  <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="presenterjs"><a class="markdownIt-Anchor" href="#presenterjs"></a> presenter.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TodoItem</span>,</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoForm</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./views&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoModel</span> <span class="keyword">from</span> <span class="string">&quot;./model&quot;</span>;</span><br><span class="line"></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oApp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> todoModel = <span class="title class_">TodoModel</span>.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> nodes = &#123;</span><br><span class="line">    <span class="attr">oTodoInput</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">oAddBtn</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">oList</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">    <span class="title function_">bindEvent</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">render</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> oFragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(<span class="title class_">TodoForm</span>());</span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(<span class="title class_">TodoList</span>(todoModel.<span class="property">todoData</span>));</span><br><span class="line">    oApp.<span class="title function_">appendChild</span>(oFragment);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">    nodes.<span class="property">oTodoInput</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_TodoInput&#x27;</span>);</span><br><span class="line">    nodes.<span class="property">oAddBtn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_AddBtn&#x27;</span>);</span><br><span class="line">    nodes.<span class="property">oList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_TodoList&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    nodes.<span class="property">oTodoInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, handleTodoInput, <span class="literal">false</span>);</span><br><span class="line">    nodes.<span class="property">oAddBtn</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleAddBtnClick, <span class="literal">false</span>);</span><br><span class="line">    nodes.<span class="property">oList</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleListClick, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleTodoInput</span> (e) &#123;</span><br><span class="line">    todoModel.<span class="title function_">setTodoText</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleAddBtnClick</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> text = todoModel.<span class="property">todoText</span>;</span><br><span class="line">    <span class="keyword">if</span> (!text.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">addTodo</span>(text, <span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">appendItem</span>(<span class="title class_">TodoItem</span>(todo));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleListClick</span> (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> tar = e.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">const</span> tagName = tar.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tagName) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;input&#x27;</span>:</span><br><span class="line">        <span class="title function_">handleCheckboxClick</span>(tar);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;button&#x27;</span>:</span><br><span class="line">        <span class="title function_">handleDeleteClick</span>(tar);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleCheckboxClick</span> (target) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = target.<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">toggleTodo</span>(id, <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">toggleItem</span>(target);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleDeleteClick</span> (target) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = target.<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">removeTodo</span>(id, <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">removeItem</span>(target);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">appendItem</span> (item) &#123;</span><br><span class="line">    nodes.<span class="property">oList</span>.<span class="title function_">appendChild</span>(item);</span><br><span class="line">    nodes.<span class="property">oTodoInput</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toggleItem</span> (target) &#123;</span><br><span class="line">    target.<span class="property">parentNode</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>).<span class="property">style</span>.<span class="property">textDecoration</span> =</span><br><span class="line">      target.<span class="property">checked</span> ? <span class="string">&#x27;line-through&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">removeItem</span> (target) &#123;</span><br><span class="line">    target.<span class="property">parentNode</span>.<span class="title function_">remove</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mvp源码地址"><a class="markdownIt-Anchor" href="#mvp源码地址"></a> MVP源码地址</h2><blockquote><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVP">MVP源码地址</a></p></blockquote>]]></content>
    
    
    <summary type="html">MVP,前端MVP,设计思想</summary>
    
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="设计思想" scheme="https://lybinweb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
    <category term="MVP" scheme="https://lybinweb.github.io/tags/MVP/"/>
    
  </entry>
  
</feed>
