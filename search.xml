<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo常用命令</title>
      <link href="/posts/24caea6b/index.html"/>
      <url>/posts/24caea6b/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h2><h2 id="个人基本使用"><a class="markdownIt-Anchor" href="#个人基本使用"></a> 个人基本使用</h2><p>如果更新了 <code>manifest.json</code> 首先清除一下数据</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后去文件中修改，把 <code>manifest.json</code> 多余的script标签删除，</p><p>把 <code>fireworks.js</code> 的重复部分删除</p><p>然后再使用</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>然后以下用法（不过一般使用最后这俩命令即可）</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言:</h2><p>为了方便查阅,这里将常用指令汇总.</p><p>防止请求次数过多插件不再自动获取番剧数据，所以请根据自己的需要在 <code>hexo generate 或 hexo deploy</code> 之前使用<code>hexo bangumi -u</code> 命令更新番剧数据！</p><p>删除数据命令:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo bangumi -d</span><br></pre></td></tr></table></figure><h2 id="简写指令"><a class="markdownIt-Anchor" href="#简写指令"></a> 简写指令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;`       等价于        `hexo new &quot;我的第一篇文章&quot;`  还等价于       `hexo new post &quot;我的第一篇文章&quot;`    </span><br><span class="line"> `hexo p` 等价于 `hexo publish`</span><br><span class="line"> `hexo g` 等价于 `hexo generate`  </span><br><span class="line"> `hexo s`等价于 `hexo server`     </span><br><span class="line"> `hexo d` 等价于 `hexo deploy`</span><br><span class="line"> `hexo deploy -g`  等价于 `hexo deploy --generate`</span><br><span class="line"> `hexo generate -d`等价于`hexo generate --deploy</span><br></pre></td></tr></table></figure><p><strong>注: hexo  clean 没有 简写,  git --version 没有简写</strong></p><h2 id="指令说明"><a class="markdownIt-Anchor" href="#指令说明"></a> 指令说明:</h2><p><code>hexo server</code>        #Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。<br /><code>hexo server -s</code> #以静态模式启动<br /><code>hexo server -p 5000</code> #更改访问端口   (默认端口为4000，'ctrl + c’关闭server)<br /><code>hexo server -i IP地址</code> #自定义 IP<br /><code>hexo clean</code> #清除缓存  ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹<br /><code>hexo g</code> #生成静态网页  (执行 <code>$ hexo g</code>后会在站点根目录下生成public文件夹, hexo会将&quot;/blog/source/&quot;   下面的.md后缀的文件编译为.html后缀的文件,存放在&quot;/blog/public/ &quot;   路径下)<br /><code>hexo d</code> #将本地数据部署到远端服务器(如github)<br /><code>hexo init 文件夹名称</code> #初始化XX文件夹名称<br /><code>npm update hexo -g</code>#升级<br /><code>npm install hexo -g</code>#安装<br /><code>node-v</code>          #查看node.js版本号<br /><code>npm -v</code>        #查看npm版本号<br /><code>git --version</code>  #查看git版本号<br /><code>hexo -v</code>      #查看hexo版本号</p><p><code>hexo publish [layout]</code>   #通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout]</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><p><code>hexo new aaa &quot;bbb&quot;</code>  # 新建一篇文章,<a href="http://xn--bbb-c88dp7omgy8jb3a013i6hf7k9cimc761m.md">文章名称和标题分别为bbb.md</a> 和 bbb.   文章采用aaa布局,  此时会在站点根目录下的----&gt;source-----&gt;_post文件夹下生成bbb.md文件,  bbb.md文件的顶部(-----分割线上方区域,也称作Front matter区),生成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout : aaa`</span><br><span class="line"> `title:`</span><br><span class="line"> `date:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随手基于MVC思想实现计算器案例</title>
      <link href="/posts/5645c7b1/index.html"/>
      <url>/posts/5645c7b1/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="随手基于mvc思想实现计算器案例"><a class="markdownIt-Anchor" href="#随手基于mvc思想实现计算器案例"></a> 随手基于MVC思想实现计算器案例</h2><h3 id="后端mvc"><a class="markdownIt-Anchor" href="#后端mvc"></a> 后端MVC</h3><ul><li>M：Model 数据模型 -&gt; 操作数据库（对数据进行增删改查）</li><li>V：View     视图层 显示视图与视图模板</li><li>C：Controller<ul><li>服务端渲染：</li><li>控制层、逻辑层 ：  数据和视图关联挂载和基本的逻辑操作</li><li>View需要数据 Controller对应的方法调用Model的方法获取数据返回给Controller对应的方法render到View中</li><li>前端渲染：<ul><li>API层 ：前端请求的API对应的是控制器中的方法</li><li>前端异步请求URL控制器中的一个方法Model层的方法操作数据库获取数据返回给控制器方法响应回前端</li></ul></li></ul></li></ul><h3 id="前端mvc"><a class="markdownIt-Anchor" href="#前端mvc"></a> 前端MVC</h3><ul><li>Model：管理视图所需要的数据 数据与视图的关联</li><li>View：HTML模板 + 视图渲染</li><li>Controller：管理事件逻辑</li></ul><h3 id="基于mvc思想实现计算器案例"><a class="markdownIt-Anchor" href="#基于mvc思想实现计算器案例"></a> 基于MVC思想实现计算器案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    model.<span class="title function_">init</span>(); <span class="comment">// 组织数据 数据监听操作&amp;数据代理</span></span><br><span class="line">    view.<span class="title function_">render</span>(); <span class="comment">// 组织HTML模板 渲染HTML模板</span></span><br><span class="line">    controller.<span class="title function_">init</span>(); <span class="comment">// 事件处理函数绑定</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> model = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">s</span>: <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> _this.<span class="property">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">        (<span class="keyword">function</span>(<span class="params">k</span>)&#123;</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(_this, k, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> _this.<span class="property">data</span>[k];</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">              _this.<span class="property">data</span>[k] = newValue;</span><br><span class="line">              view.<span class="title function_">render</span>(&#123; [k]: newValue&#125;); </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> view = &#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-a&quot;&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-s&quot;&gt;&#123;&#123; s &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-b&quot;&gt;&#123;&#123; b &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;=&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-r&quot;&gt;&#123;&#123; r &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; placeholder=&quot;Number a&quot; class=&quot;cal-input a&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; placeholder=&quot;Number b&quot; class=&quot;cal-input b&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;*&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;/&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params">mutedData</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!mutedData) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">template</span> = <span class="variable language_">this</span>.<span class="property">template</span>.<span class="title function_">replace</span>(</span><br><span class="line">          <span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>,</span><br><span class="line">          <span class="keyword">function</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> model[key.<span class="title function_">trim</span>()];</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        container.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">template</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">el</span>).<span class="title function_">appendChild</span>(container);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> mutedData) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.cal-&#x27;</span> + key).<span class="property">textContent</span> = mutedData[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> controller = &#123;</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> oCalInputs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.cal-input&#x27;</span>),</span><br><span class="line">          oCalBtns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.cal-btn&#x27;</span>),</span><br><span class="line">          inputItem,</span><br><span class="line">          btnItem;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalInputs.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        inputItem = oCalInputs[i];</span><br><span class="line"></span><br><span class="line">        inputItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleInput</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalBtns.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        btnItem = oCalBtns[i];</span><br><span class="line"></span><br><span class="line">        btnItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleBtn</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleInput</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> tar = e.<span class="property">target</span>,</span><br><span class="line">          value = <span class="title class_">Number</span>(tar.<span class="property">value</span>),</span><br><span class="line">          field = tar.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      model[field] = value;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// model.r = eval(&#x27;model.a&#x27; + model.s + &#x27;model.b&#x27;);</span></span><br><span class="line">      <span class="title function_">with</span>(<span class="params">model</span>) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleBtn</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> type = e.<span class="property">target</span>.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">      model.<span class="property">s</span> = type;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">with</span>(<span class="params">model</span>) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> 计算器案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5分钟实现深拷贝</title>
      <link href="/posts/ecc4b994/index.html"/>
      <url>/posts/ecc4b994/index.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">Origin, Target</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> tar = <span class="title class_">Target</span> || &#123;&#125;,</span><br><span class="line">toStr = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>,</span><br><span class="line">arrType = <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Origin</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Origin</span>.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证当前项是对象并且不是null，因为null的类型也是objec</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Origin</span>[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="title class_">Origin</span>[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 判断当前项是数组还是对象并且赋值为空数组或空对象</span></span><br><span class="line">tar[key] = toStr.<span class="title function_">call</span>(<span class="title class_">Origin</span>[key]) === arrType ? [] : &#123;&#125;;</span><br><span class="line"><span class="comment">// 递归深拷贝函数</span></span><br><span class="line"><span class="title function_">deepClone</span>(<span class="title class_">Origin</span>[key], tar[key]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前项不是对象而是原始值则直接赋值</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">tar[key] = <span class="title class_">Origin</span>[key];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现forEach</title>
      <link href="/posts/718b0317/index.html"/>
      <url>/posts/718b0317/index.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myForEach</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="variable language_">this</span>,</span><br><span class="line">len = arr.<span class="property">length</span>,</span><br><span class="line">_this = <span class="variable language_">arguments</span>[<span class="number">1</span>] || <span class="variable language_">window</span>; <span class="comment">// forEach的第二个参数this指向问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_this, [arr[i], i, arr]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流的实现以及应用</title>
      <link href="/posts/830b4898/index.html"/>
      <url>/posts/830b4898/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-防抖"><a class="markdownIt-Anchor" href="#一-防抖"></a> 一、防抖</h2><h3 id="1-防抖的实现"><a class="markdownIt-Anchor" href="#1-防抖的实现"></a> 1、防抖的实现</h3><ul><li>防抖需要明白的两点：<ol><li>对于在事件被触发n秒后再执行的回调：延迟回调</li><li>如果在这n秒内再触发事件、重新开始计时</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn：目标函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time：延迟时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> triggleNow：初次是否需要触发 </span></span><br><span class="line"><span class="comment"> * * true：首次不进行防抖处理 </span></span><br><span class="line"><span class="comment"> * * false：首次需要防抖处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, time, triggerNow</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> t = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounced = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _self = <span class="variable language_">this</span>,</span><br><span class="line">args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除定时器</span></span><br><span class="line"><span class="keyword">if</span>(t) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次也进行防抖处理</span></span><br><span class="line"><span class="keyword">if</span>(triggerNow) &#123;</span><br><span class="line"><span class="keyword">let</span> exce = !t; <span class="comment">// 第一次不进行防抖处理标识</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在防抖延迟时间time后，将定时器清空，取消防抖</span></span><br><span class="line"><span class="comment">// 在time时间内，会重新计时</span></span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125;, time);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(exce) &#123;</span><br><span class="line"><span class="comment">// 直接执行函数</span></span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123; <span class="comment">// 首次不进行防抖处理</span></span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;, time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制清除防抖函数</span></span><br><span class="line">debounced.<span class="property">remove</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-防抖的应用"><a class="markdownIt-Anchor" href="#2-防抖的应用"></a> 2、防抖的应用</h3><ul><li><p>函数初次执行不需要防抖处理：<code>triggerNow = true</code></p><ol><li>列表的下拉刷新</li><li>ajax的请求</li></ol></li><li><p>函数初次执行需要防抖处理：<code>triggerNow = false</code></p><ol><li>输入框的输入校验</li></ol></li></ul><h2 id="二-节流"><a class="markdownIt-Anchor" href="#二-节流"></a> 二、节流</h2><ul><li>节流需要注意的一点：<ol><li>每隔一段事件执行一次函数</li></ol></li></ul><h3 id="1-节流的实现"><a class="markdownIt-Anchor" href="#1-节流的实现"></a> 1、节流的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn: 要进行节流处理的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay: 延迟的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> t = <span class="literal">null</span>,</span><br><span class="line">begin = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _self = <span class="variable language_">this</span>,</span><br><span class="line">args = <span class="variable language_">arguments</span>,</span><br><span class="line">cur = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流处理</span></span><br><span class="line"><span class="keyword">if</span>(cur - begin &gt;= delay) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">begin = cur;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-节流的应用"><a class="markdownIt-Anchor" href="#2-节流的应用"></a> 2、节流的应用</h3><ol><li>输入验证</li><li>窗口页面的resize</li><li>列表的下拉刷新</li><li>ajax的请求</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
