<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5. 数据类型和结构</title>
      <link href="/posts/9f26e741/index.html"/>
      <url>/posts/9f26e741/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-javascript的数据类型和结构"><a class="markdownIt-Anchor" href="#一-javascript的数据类型和结构"></a> 一、JavaScript的数据类型和结构</h2><ul><li>英文： Data types and data structure</li><li>数据类型： 编程语言中用于存储和运算的工具</li><li>数据结构： 编程语言中用于表示数据意义（队列、栈、树等）与操作的工具</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串类型的存储</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment">// 字符串运算</span></span><br><span class="line">str += <span class="string">&#x27;4&#x27;</span>; </span><br><span class="line"><span class="comment">// str =&gt; &#x27;1234&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表现的是一种数据意义：数字123顺序排列（数据的结构）</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 数据的操作：入栈</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="二-变量与类型的无关性"><a class="markdownIt-Anchor" href="#二-变量与类型的无关性"></a> 二、变量与类型的无关性</h2><h3 id="1-弱类型语言的特点"><a class="markdownIt-Anchor" href="#1-弱类型语言的特点"></a> 1、弱类型语言的特点</h3><ul><li>变量：映射内存地址的标识符 -&gt; 0x0000</li><li>类型：描述值在内存中如何存储的工具</li><li>总结：弱类型语言是动态的通过值判断类型，根据类型来分配存储空间的</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义一个标识符a</span><br><span class="line"><span class="number">2.</span> a作为一个变量</span><br><span class="line"><span class="number">3.</span> 分配双精度<span class="number">64</span>位的存储空间</span><br><span class="line"><span class="number">4.</span> 将<span class="number">1</span>存储到这个空间</span><br><span class="line"><span class="number">5.</span> 重新分配字符串空间</span><br><span class="line"><span class="number">6.</span> 将字符串 <span class="string">&#x27;1&#x27;</span> 存储到该空间</span><br><span class="line"><span class="number">7.</span> 将标识符a映射到新的空间地址</span><br><span class="line"></span><br><span class="line">标识符    地址    栈</span><br><span class="line">a        <span class="number">0x0001</span>  <span class="string">&#x27;1&#x27;</span></span><br><span class="line">a        <span class="number">0x0000</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-强类型语言"><a class="markdownIt-Anchor" href="#2-强类型语言"></a> 2、强类型语言</h3><ul><li>根据变量指定的类型分配空间，将值存储到该空间</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>; <span class="comment">// x</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>; <span class="comment">// x  -128~127</span></span><br></pre></td></tr></table></figure><h2 id="三-基本数据类型与原始值"><a class="markdownIt-Anchor" href="#三-基本数据类型与原始值"></a> 三、基本数据类型与原始值</h2><ul><li>Primitive data type and primitive value</li></ul><h3 id="1-基本数据类型"><a class="markdownIt-Anchor" href="#1-基本数据类型"></a> 1、基本数据类型</h3><ul><li>语言最底层指定的数据类型（不需要任何语言工具创建）</li><li>类型的表示：一般来说首写字母大写<ol><li>Null</li><li>undefined</li><li>Boolean</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li></ol></li><li>typeof运算符后的结果：<ol><li>Null -&gt; object</li><li>undefined -&gt; undefined</li><li>Boolean -&gt; boolean</li><li>Number -&gt; number</li><li>BigInt -&gt; bigint</li><li>String -&gt; string</li><li>Symbol -&gt; symbol</li></ol></li><li>原始值（基础数据类型值）：语言最底层就指定的基本数据类型对应的值<ol><li>Null null</li><li>undefined undefined</li><li>Boolean true/false</li><li>Number 123/1.2</li><li>BigInt 任意数值的整数</li><li>String ‘abc’</li><li>Symbol Symbol(abc)</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> varBigInt = <span class="title class_">BigInt</span>(<span class="number">223</span>);</span><br><span class="line"><span class="keyword">let</span> varSymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-原始值的不可变性"><a class="markdownIt-Anchor" href="#2-原始值的不可变性"></a> 2、原始值的不可变性</h3><ul><li>不可变：数据存储在内存中，不可更改（针对于栈内存存储）</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">标识符    地址    栈内存</span><br><span class="line">a       <span class="number">0x0001</span>    <span class="number">2</span></span><br><span class="line">        <span class="number">0x0000</span>    <span class="number">1</span>  （值是不可以变化的，需要等着垃圾回收）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 栈内存中的1，它是不可以改变的</span></span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 栈中重新保存2</span></span><br></pre></td></tr></table></figure><h2 id="四-声明变量默认被分配的值变量的默认初始化"><a class="markdownIt-Anchor" href="#四-声明变量默认被分配的值变量的默认初始化"></a> 四、声明变量默认被分配的值（变量的默认初始化）</h2><ol><li>系统默认初始化</li></ol><ul><li>undefined（是JS系统种默认分配的值）</li><li>undefined是缺省值的情况下默认分配的值</li></ul><ol start="2"><li>手动初始化</li></ol><ul><li>声明变量与初始化操作<ul><li>var a = 1;</li><li>Variable declaration + value initialization</li></ul></li><li>原则上不明确类型的引用类型缺省的时候初始化：null<ul><li>let obj = null; // 语义化更好</li></ul></li><li>引用值：数据的容器<ul><li>{ a: 1, b: 2}</li><li>[1, 2, 3]</li></ul></li><li>总结：系统默认会对变量的类型指定为原始值，原始值的系统默认值为undefined，null为空指针，指针并未指向任何内存空间</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标识符      栈          堆</span></span><br><span class="line"><span class="comment">          null -&gt;   </span></span><br><span class="line"><span class="comment">obj       0x0000  -&gt;  &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="literal">null</span>; <span class="comment">// 语义化更高</span></span><br><span class="line">obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="五-值的真假性truthy-falsyfalsey"><a class="markdownIt-Anchor" href="#五-值的真假性truthy-falsyfalsey"></a> 五、值的真假性（truthy / falsy|falsey）</h2><ul><li>Boolean类型是逻辑性的值：<ul><li>true/false 真假、正反、是否 非黑即白的逻辑</li></ul></li><li>用Boolean的逻辑看待值的真假性</li><li>用Boolean()转换布尔值：<ul><li>true -&gt; truthy值（真值）</li><li>false -&gt; falsy值（假值）</li></ul></li><li>falsy值：<ul><li>false</li><li>0/-0/0n(BigInt的表示法)</li><li>“”/’’/``</li><li>null</li><li>undefined</li><li>NaN</li></ul></li><li>truthy值：除了假值外，都是真值</li><li>Java：<code>if (...返回真假...) &#123;&#125;</code></li><li>JavaScript：<code>if (...返回布尔值/返回真假值) &#123;&#125;</code><ul><li>if (1/true) {}</li><li>if (0/false) {}</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="六-对象引用数据类型object-data-types"><a class="markdownIt-Anchor" href="#六-对象引用数据类型object-data-types"></a> 六、对象（引用）数据类型（Object data types）</h2><ul><li>对象：一种内存存储为引用型的数据类型</li><li>引用：标识符可以通过地址引用一块内存空间（具备指针特性）</li><li>总结：<ul><li>栈内存通过地址指针寻找堆内存中的特定空间，并获取到内存存储的值</li><li>当空间引用被全部清除，该值就会被垃圾回收机制在一个周期之内回收，并释放当前空间</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">标识符        栈        指针        堆</span></span><br><span class="line"><span class="comment">          0x0000        -&gt; 断掉   &#123; a: 1 &#125; 么有引用，垃圾回收</span></span><br><span class="line"><span class="comment">obj2      0x0000</span></span><br><span class="line"><span class="comment">arr          0x0001      -&gt;      [1, 2, 3]</span></span><br><span class="line"><span class="comment">          0x0002      -&gt;      &#123; b: 2 &#125; 没有引用，垃圾回收</span></span><br><span class="line"><span class="comment">obj          null        -&gt;        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">obj = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">obj = <span class="literal">null</span>; <span class="comment">// 断开引用，不等于堆内存空间的值被删除，需要等待垃圾回收机制周期性清除</span></span><br></pre></td></tr></table></figure><h2 id="七-引用值对象值"><a class="markdownIt-Anchor" href="#七-引用值对象值"></a> 七、引用值（对象值）</h2><ul><li>Object</li><li>Array</li><li>Date</li><li>Map|WeakMap</li><li>Set|WeakSet</li><li>Function</li><li>() =&gt; {}</li><li>迭代器生成器函数</li></ul><h3 id="1-引用值的可变性"><a class="markdownIt-Anchor" href="#1-引用值的可变性"></a> 1、引用值的可变性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;a: 1&#125; 变化了 -&gt; &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-引用值的属性访问"><a class="markdownIt-Anchor" href="#2-引用值的属性访问"></a> 2、引用值的属性访问</h3><ul><li>总结：只有引用值类型的数据才有属性</li><li>访问属性的方法：<ol><li>点语法 <code>const obj = &#123;a: 1&#125;; console.log(obj.a);</code></li><li>索引法 <code>const obj = &#123;a: 1&#125;; console.log(obj['a']);</code></li><li>类型的工具上有get方法：比如Map上的get方法</li></ol></li><li>数组的访问：索引法</li></ul><h2 id="八-原始值的包装特性"><a class="markdownIt-Anchor" href="#八-原始值的包装特性"></a> 八、原始值的包装特性</h2><ul><li>除了Undefined、Null以外，每一种基本数据类型都有对象的对象包装器</li><li>对象包装器：因为只有引用类型值有访问属性的能力，原始值没有属性访问的能力。为了让原始值有可访问特定属性的能力而设计的对象转换工具</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建标识符str</span><br><span class="line"><span class="number">2.</span> 开辟字符串存储空间</span><br><span class="line"><span class="number">3.</span> 将<span class="string">&#x27;abc&#x27;</span>存储到该空间</span><br><span class="line"><span class="number">4.</span> 将空间地址映射到标识符str</span><br><span class="line"><span class="number">5.</span> 代码走到.<span class="property">length</span></span><br><span class="line"><span class="number">6.</span> <span class="keyword">new</span> <span class="title class_">String</span>(str) 进行包装</span><br><span class="line"><span class="number">7.</span> 调用<span class="title class_">String</span> -&gt; length属性</span><br><span class="line"><span class="number">8.</span> 输出length -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">9.</span> 包装对象销毁</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">str.<span class="property">len</span> = <span class="number">123</span>; <span class="comment">// new String() 没有引用，所以赋值后最终还会销毁包装对象的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">len</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript - 【新】颠覆认知的JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 【新】颠覆认知的JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. 变量声明</title>
      <link href="/posts/164dee6/index.html"/>
      <url>/posts/164dee6/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-变量声明"><a class="markdownIt-Anchor" href="#4-变量声明"></a> 4. 变量声明</h1><ul><li>Variable Declaration</li><li>JavaScript：ES3 var</li><li>JavaScript：ES6 let const<ul><li>ES6：面向对象推给JS开发者</li></ul></li></ul><h2 id="一-javascript-4种声明变量的方法"><a class="markdownIt-Anchor" href="#一-javascript-4种声明变量的方法"></a> 一、<strong>JavaScript 4种声明变量的方法</strong></h2><ol><li>var ES3 不推荐</li><li>implicit 暗示全局变量 ES3 不推荐</li><li>let ES6</li><li>const ES6</li></ol><h3 id="1-var"><a class="markdownIt-Anchor" href="#1-var"></a> 1、<strong>var</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a; // 初始化可选</span><br><span class="line">var b = 1; // 初始化：声明变量时，对一个变量对应的值的设置</span><br><span class="line"></span><br><span class="line">c; // c -&gt; 访问 -&gt; c is not defined</span><br><span class="line">d = 3; // 不用声明关键字 暗示全局变量</span><br></pre></td></tr></table></figure><h3 id="2-let"><a class="markdownIt-Anchor" href="#2-let"></a> 2、<strong>let</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a; // 声明变量，并且初始化</span><br><span class="line">let b = 1;</span><br></pre></td></tr></table></figure><h3 id="3-const"><a class="markdownIt-Anchor" href="#3-const"></a> 3、<strong>const</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a; // 语法错误 丢失了初始化器</span><br><span class="line"></span><br><span class="line">const b = 1; // 声明常量，并且初始化</span><br></pre></td></tr></table></figure><h2 id="二-变量初始化"><a class="markdownIt-Anchor" href="#二-变量初始化"></a> 二、<strong>变量初始化</strong></h2><ul><li><p>变量第一次被赋值的过程</p><ol><li>声明一个变量</li><li>将某一个值赋值给一个变量 （var let 可选，暗示 const 必选）</li><li>开发者手动进行赋值</li><li>系统默认进行赋值 undefined</li></ol></li><li><p>声明变量必定会有给该变量进行初始化值的过程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a; // undefined 是JavaScript系统种唯一的默认值</span><br><span class="line"></span><br><span class="line">let b; // undefined</span><br></pre></td></tr></table></figure></li></ul><h2 id="三-单一声明"><a class="markdownIt-Anchor" href="#三-单一声明"></a> 三、<strong>单一声明</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1,</span><br><span class="line">    b = 2,</span><br><span class="line">    c = 3;</span><br></pre></td></tr></table></figure><h2 id="四-分号书写规则"><a class="markdownIt-Anchor" href="#四-分号书写规则"></a> 四、<strong>分号书写规则</strong></h2><ul><li>JS引擎会分析代码自动加上必要的分号</li><li>ES3-5：推荐打分号（约定俗成的规范）</li><li>ES6：没有推荐</li><li>注意：<ul><li>要打都打，要不打都不打</li><li>立即执行函数建议在前面打分号</li><li>语句不打分号</li></ul></li></ul><h2 id="五-var"><a class="markdownIt-Anchor" href="#五-var"></a> 五、<strong>var</strong></h2><ul><li>全局作用域变量（globally-scoped Variable全局变量）</li><li>函数作用域变量（function-scoped Variable函数局部变量）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">var a; // undefined</span><br><span class="line">var b = 1; // var statement （var 语句）</span><br><span class="line"></span><br><span class="line">var b = 2; // var声明是可以重复的（BUG）</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  var a = 2; // 函数作用域变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-什么是作用域"><a class="markdownIt-Anchor" href="#1-什么是作用域"></a> 1、<strong>什么是作用域</strong></h3><ul><li>什么是作用域：限定变量可访问权限的范围</li></ul><h3 id="2-全局作用域"><a class="markdownIt-Anchor" href="#2-全局作用域"></a> 2、<strong>全局作用域</strong></h3><ul><li><p>全局作用域：基于<code>window</code>或者<code>globalThis</code>的可访问范围</p><ol><li>一个HTML的访问，会产生一个对应着该HTML的JavaScript全局作用域。任何脚本被该HTML引入，就共享一个全局作用域</li><li>全局作用域变量：在该全局作用域直接声明的变量。在全局作用域声明的变量，系统会在全局对象（window、globalThis）中创建对应的属性</li><li>之所以可以不用全局对象访问变量，是因为全局作用域属性对所有其他</li></ol></li><li><p>总结：在全局作用域直接用var声明的变量，是以全局对象属性的形式被创建的</p></li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">globalThis.<span class="property">a</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span>; <span class="comment">// 1</span></span><br><span class="line">a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="3-函数作用域"><a class="markdownIt-Anchor" href="#3-函数作用域"></a> 3、<strong>函数作用域</strong></h3><ul><li>函数作用域：function body（函数体）的访问范围<ol><li>函数内部的作用域叫函数作用域，也叫函数局部作用域</li><li>局部作用域内可访问全局作用域的变量</li><li>全局作用域无法访问函数作用域的变量</li><li>函数可以嵌套函数，作用域可以嵌套作用域</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  console.log(a);</span><br><span class="line"></span><br><span class="line">  var b = 2;</span><br><span class="line"></span><br><span class="line">  function test2 () &#123;</span><br><span class="line">    var c = 3;</span><br><span class="line">    console.log(b);</span><br><span class="line">    console.log(c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  test2();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(b); // Uncaught ReferenceError: b is not defined  产生了错误，这个错误未被捕获，所以程序停止</span><br><span class="line"></span><br><span class="line">// 尝试运行一段程序 看他有没有错误</span><br><span class="line">try &#123;</span><br><span class="line">  console.log(b);</span><br><span class="line">&#125; catch (e) &#123; // 捕获错误</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块级作用域：基于block的访问范围</li></ul><h3 id="4-变量提升"><a class="markdownIt-Anchor" href="#4-变量提升"></a> 4、<strong>变量提升</strong></h3><ul><li><p>Variable Hoisting</p><ol><li>代码在执行的最开始，会进行预编译操作</li><li>预编译的过程<ol><li>【预编译阶段】找到var -&gt; 变量a</li><li>【预编译阶段】放入预编译容器 { a }</li><li>【预编译阶段】初始化 { a: undefined }</li><li>【执行期阶段】打印a -&gt; undefined</li><li>【执行期阶段】a = 1 将1赋值给变量a</li></ol></li></ol></li><li><p>总结：尽量按照程序的逻辑顺序进行变量声明和访问；变量提升var声明的一个缺点（BUG）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(a); // undefined</span><br><span class="line">var a = 1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 2;</span><br><span class="line">var a = 1;</span><br><span class="line">console.log(a); // 1</span><br><span class="line"></span><br><span class="line">1. 预编译 找到var -&gt; a</span><br><span class="line">2. 预编译 &#123; a &#125;</span><br><span class="line">3. 预编译 &#123; a: undefined &#125;</span><br><span class="line">4. 执行期 &#123; a: 2 &#125;</span><br><span class="line">5. 执行期 &#123; a: 1 &#125;</span><br><span class="line">6. 执行期 打印 a -&gt; 1</span><br></pre></td></tr></table></figure><h3 id="5-暗示全局变量暗示implicit"><a class="markdownIt-Anchor" href="#5-暗示全局变量暗示implicit"></a> 5、<strong>暗示全局变量（暗示implicit）</strong></h3><ol><li>未用任何变量声明关键字段变量</li><li>暗示全局变量必须手动进行变量初始化</li><li>暗示全局变量默认为全局变量</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1; // 不报错 因为已经初始化</span><br><span class="line">b; // 但是你不初始化就会报错 访问变量b</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 1. 函数必须执行</span><br><span class="line">   * 2. 暗示全局变量 定义c作为全局对象的属性</span><br><span class="line">   */</span><br><span class="line">  c = 1;</span><br><span class="line">  console.log(c, &#x27;test&#x27;); // 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(c, &#x27;global.c&#x27;); // 1</span><br><span class="line">console.log(window.c, &#x27;window.c&#x27;); // 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function test () &#123;</span><br><span class="line">  // var a 局部变量</span><br><span class="line">  // b： 暗示全局变量</span><br><span class="line">  var a = b = 1;</span><br><span class="line"></span><br><span class="line">  // 单一声明</span><br><span class="line">  // var c 局部变量</span><br><span class="line">  // var d 局部变量</span><br><span class="line">  // 1 =&gt; c</span><br><span class="line">  // c =&gt; d</span><br><span class="line">  var c,</span><br><span class="line">      d = c = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">console.log(&#x27;global.a&#x27;, b); // 报错 需要try catch，就不会阻断代码执行了</span><br><span class="line">console.log(&#x27;global.b&#x27;, b); // 阻断执行</span><br></pre></td></tr></table></figure><h3 id="6-var最不合理的几点"><a class="markdownIt-Anchor" href="#6-var最不合理的几点"></a> 6、<strong>var最不合理的几点</strong></h3><ol><li>可以重复声明</li><li>变量提升 （声明之前可以访问）</li><li>暗示全局变量 （可以不用声明变量的关键字声明变量）</li></ol><h2 id="六-let"><a class="markdownIt-Anchor" href="#六-let"></a> 六、<strong>let</strong></h2><h3 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念"></a> 1、概念</h3><ul><li>ES6 block 块<ul><li>block-scoped 块级作用域</li><li>类似于函数作用域</li></ul></li><li>限制变量可访问范围的工具作用域：块</li><li>这个范围就是块作用域</li><li>在ES6中<ul><li>函数体</li><li>if</li><li>for</li><li>while</li><li>或直接用 {} 声明的块等包含的{}都是块作用域</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 证明ES5中没有块的概念</span><br><span class="line">/**</span><br><span class="line"> * 为什么ES5没有块的概念？</span><br><span class="line"> * ES5中用var声明变量需要在预编译中对变量进行初始化</span><br><span class="line"> * 这样就没办法以块作用域的概念限制外界访问a</span><br><span class="line"> * 所以在ES5中要实现块作用域概念，必须用函数限制</span><br><span class="line"> */</span><br><span class="line">if (true) &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // 1</span><br><span class="line"></span><br><span class="line">// ===============</span><br><span class="line"></span><br><span class="line">if (false) &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // undefined</span><br><span class="line"></span><br><span class="line">// ===============</span><br><span class="line"></span><br><span class="line">function test () &#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ES6中如何实现块作用域</span><br><span class="line"> *</span><br><span class="line"> * let在块中声明的变量是在代码执行期进行声明和初始化的</span><br><span class="line"> * 所以支持了块作用域访问的限制（用let，就创建了块作用域，是错误的说法。是因为用let在&#123;&#125;里声明变量，JS引擎会将&#123;&#125;解析成块作用域）</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  let a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a); // 报错 a is not defined</span><br></pre></td></tr></table></figure><h3 id="2-块作用域可以单独进行创建"><a class="markdownIt-Anchor" href="#2-块作用域可以单独进行创建"></a> 2、<strong>块作用域可以单独进行创建 {}</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(b);</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let a = 1;</span><br><span class="line">  var b = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(b);</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><ul><li>let声明：声明块作用域的局部变量</li></ul><h3 id="3-let声明变量的访问限制"><a class="markdownIt-Anchor" href="#3-let声明变量的访问限制"></a> 3、<strong>let声明变量的访问限制</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 不能在初始化之前访问变量a</span><br><span class="line"></span><br><span class="line">console.log(a); // 报错</span><br><span class="line">let a = 1; // 初始化的过程是在执行期 在这里初始化为undefined</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 【预编译】找let -&gt; 变量a</span><br><span class="line"> * 【预编译】存变量 &#123; a &#125; （不进行初始化）</span><br><span class="line"> * 【执行期】打印a =&gt; xxx</span><br><span class="line"> *</span><br><span class="line"> * 总结：let声明是在执行代码到达let这一行时开始初始化变量的</span><br><span class="line"> *</span><br><span class="line"> * 在let a;之前，这一段代码(console.log(a))，是暂时性死区 Temporal Dead Zone;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let a = a + 1; // 不可以 暂时性死区</span><br><span class="line"></span><br><span class="line">var a = a + 1; // 可以 这里已经赋值初始化了</span><br></pre></td></tr></table></figure><h3 id="4-块作用域与函数作用域"><a class="markdownIt-Anchor" href="#4-块作用域与函数作用域"></a> 4、<strong>块作用域与函数作用域</strong></h3><ol><li>var声明的变量，访问只能被限制在函数作用域范围内</li><li>let声明的变量，访问可以被限制在块作用域和函数作用域内</li></ol><h3 id="5-重复声明"><a class="markdownIt-Anchor" href="#5-重复声明"></a> 5、<strong>重复声明</strong></h3><ul><li>let声明不允许重复声明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line">let a = 2; // Uncaught SyntaxError</span><br></pre></td></tr></table></figure><h3 id="6-let跟var的冲突"><a class="markdownIt-Anchor" href="#6-let跟var的冲突"></a> 6、<strong>let跟var的冲突</strong></h3><ul><li>在同一作用域下，相同标识符不可以同时被var跟let声明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  var a = 2; // 重复声明</span><br><span class="line">  // 【预编译】&#123; a &#125; 放不进去，全局let已经声明a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七-const"><a class="markdownIt-Anchor" href="#七-const"></a> 七、<strong>const</strong></h2><ul><li>const -&gt; constant</li><li>con + stant</li><li>come 一起，全部</li><li>stant：stand 站立</li><li>constant -&gt; 状态不变</li><li>const：常量（常数变量）不可变的量<ul><li>const的特征与let几乎一致</li></ul></li></ul><h3 id="1-const与let不同点"><a class="markdownIt-Anchor" href="#1-const与let不同点"></a> 1、<strong>const与let不同点</strong></h3><ol><li>必须手动初始化：<code>const a = 1;</code></li><li>在初始化后，不可改变其值</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a; // 语法错误 丢失了初始化器</span><br><span class="line"></span><br><span class="line">const b = 1; // 声明常量，并且初始化</span><br></pre></td></tr></table></figure><h3 id="2-书写"><a class="markdownIt-Anchor" href="#2-书写"></a> 2、<strong>书写</strong></h3><ul><li>常量一般使用全大写，单词之前用下划线分隔</li></ul><ol><li>所有不能变更的值或者值不变的量都应该使用const</li><li>只有后续需要变更值的量使用let</li><li>var尽量不适用</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript - 【新】颠覆认知的JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 【新】颠覆认知的JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2数据劫持</title>
      <link href="/posts/aa078834/index.html"/>
      <url>/posts/aa078834/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue2数据劫持"><a class="markdownIt-Anchor" href="#vue2数据劫持"></a> Vue2数据劫持</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li><p>new Vue(options)</p></li><li><p>处理options.data，进行数据劫持</p></li><li><p>data执行后，才会返回一个数据对象（data也可以是个对象，但是不推荐这样做）</p></li><li><p>主程序入口 f Vue () {}</p></li><li><p>f _init () {} 挂载到了Vue原型上 作为初始化程序</p><ul><li>主要进行初始化很多事，选项相关的都需要初始化，比如data、computed、watch等</li></ul><ol><li><p>保存this到vm，后续用vm代替Vue实例化对象</p></li><li><p>在实例上挂载$options</p></li><li><p>初始化数据，将实例带入 -&gt; initState(vm)</p><ul><li>数据劫持：在赋值、获取数据时还要做别的事，如视图也要改变，数据变化的时候视图也要变更，那么就需要数据拦截</li><li>分门别类进行初始化数据，比如data、computed、watch等</li></ul><ol><li>处理data数据： initData(vm) 如果data存在，则进行初始化<ul><li>从options拿到data，判断data是对象或者是函数，从而取data数据（注意，如果是函数时，需要注意this指向）</li><li>保存data，将data挂载到vm上</li><li>对vm._data 做代理（当访问vm.title就代理到vm._data.title）</li><li>对data进行循环，代理每一项：proxyData(vm, ‘_data’, key)<ul><li>使用Object.defineProperty进行数据代理</li></ul></li><li>观察data（观察数据）：observe(vm._data)<ul><li>如果不是对象则不观察</li><li>否则则观察则进行拦截：return new Observer(data) 【多了一层observe，因为在第一层observe中我们要排除不观察的条件，比如data不是对象或者是null，我们就可以不进行观察】</li></ul></li></ul></li></ol></li></ol></li><li><p>f Observer (data) {}:</p></li></ol><ul><li>区分对象或者数组，因为Object.defineProperty是不对数组进行拦截的</li></ul><ol><li><p>data如果是数组</p><ul><li>对更改原数组的方法进行重写，这一系列方法都会对数据变更，内部可能增加、删除一些东西；操作数组后，更改原数组的这个过程当中，视图是有可能更改的，那么就必须要做视图更新，还有别的一系列操作。新增的这一项，是否需要观察他</li><li>将更改源数组的方法保存到配置中：ARR_METHODS</li><li>将Array.prototype所有的方法保存到新的引用：originArrMethods</li><li>arrMethods：重写数组方法希望他是一个新的对象，那么我们需要创建一个对象利用Object.create, 并且指定他的原型为数组原型originArrMethods</li><li>遍历保存的数组方法集合，在arrMethods中重写对应的数组方法<ul><li>数组参数是不定的，需要保存实参列表</li><li>执行原数组方法，才能达到更改数据，用apply，谁调用指向谁</li><li>当原数组方法执行完毕后，还需要干别的事：<ul><li>当数组方法是push、unshift、splice时，会在数组中新增项的</li><li>那么就需要保存新增项（可能是对象或数组），从而继续观察他：observeArr(newArr)<ul><li>遍历newArr，继续观察observe()</li></ul></li></ul></li></ul></li></ul><ol><li>设置data的原型为： arrMethods，那么操作data数据的数组方法，就用到了我们自己重写的数组方法，从而观察数据，更新视图</li><li>如果data是数组？递归观察data：observeArr(data)</li></ol></li><li><p>data如果是对象</p><ul><li>Observer原型方法：walk，观察对象<ul><li>拿出data的key、value，遍历每一项进行拦截操作：defineReactiveData(data, key, value)<ul><li>注意：这里的value还可能是对象获数组，那么需要递归观察：observe(value)</li><li>Object.defineProperty进行数据代理<ul><li>在set的时候，需要注意newValue可能是对象数组，那么需要递归观察：observe(newValue)</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="源码地址"><a class="markdownIt-Anchor" href="#源码地址"></a> 源码地址</h3><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/Vue/Vue2-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81">Vue2数据劫持</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据劫持 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JavaScript图片压缩</title>
      <link href="/posts/f4d49811/index.html"/>
      <url>/posts/f4d49811/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="原生javascript图片压缩"><a class="markdownIt-Anchor" href="#原生javascript图片压缩"></a> 原生JavaScript图片压缩</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li>获取图片文件对象</li><li>利用FileReader读取图片文件然后转成base64格式或者转成blob格式</li><li>创建压缩图片<ol><li>创建canvas画布</li><li>创建图片对象，将原图片的src base64赋给该图片对象src</li><li>利用canvas画布将原图片绘制到画布中</li><li>生成压缩图片<ol><li>利用canvas对象方法toDataURL降低画布质量达到压缩效果</li><li>如果压缩后比压缩前大，那么递归压缩</li></ol></li></ol></li></ol><h3 id="案例代码实现"><a class="markdownIt-Anchor" href="#案例代码实现"></a> 案例代码实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* img 属于inline-block */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: initial;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.img-preview</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;imgFileSelector&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;请选择图片&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;originImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hide img-preview&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;compressedImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hide img-preview&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oImgFileSelector = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#imgFileSelector&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> oOriginImgPreview = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#originImgPreview&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> oCompressImgPreview = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#compressedImgPreview&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IMG_TYPES</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;image/jpeg&#x27;</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;image/png&#x27;</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;image/jpg&#x27;</span>: <span class="string">&#x27;image/jpg&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgFile = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> quality = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">let</span> compressedImgSrc = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bindEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  oImgFileSelector.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, handleFileSelectorChange, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleFileSelectorChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 选中的图片文件对象</span></span><br><span class="line">  imgFile = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!imgFile || !<span class="variable constant_">IMG_TYPES</span>[imgFile.<span class="property">type</span>]) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请选择正确格式的图片&#x27;</span>);</span><br><span class="line">    <span class="title function_">setImgFileEmpty</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setImgPreview</span>(imgFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setImgFileEmpty</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  oImgFileSelector.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  imgFile = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setPreviewVisible</span>(oOriginImgPreview, <span class="literal">false</span>);</span><br><span class="line">  <span class="title function_">setPreviewVisible</span>(oCompressImgPreview, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setImgPreview</span> = (<span class="params">imgFile</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (imgFile <span class="keyword">instanceof</span> <span class="title class_">File</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件</span></span><br><span class="line"><span class="comment">     * 方法1.转成base64格式</span></span><br><span class="line"><span class="comment">     * 方法2.转成blob格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> originImgSrc = reader.<span class="property">result</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">createCompressedImage</span>(&#123;</span><br><span class="line">        <span class="attr">imgSrc</span>: originImgSrc,</span><br><span class="line">        <span class="attr">type</span>: imgFile.<span class="property">type</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      oOriginImgPreview.<span class="property">src</span> = originImgSrc;</span><br><span class="line">      oCompressImgPreview.<span class="property">src</span> = compressedImgSrc;</span><br><span class="line">      <span class="title function_">setPreviewVisible</span>(oCompressImgPreview, <span class="literal">true</span>);</span><br><span class="line">      <span class="title function_">setPreviewVisible</span>(oOriginImgPreview, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(compressedImgSrc.<span class="property">length</span>, originImgSrc.<span class="property">length</span>, quality);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(imgFile);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建压缩图片方法 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createCompressedImage</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  imgSrc,</span></span><br><span class="line"><span class="params">  type</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 1. canvas画布</span></span><br><span class="line"><span class="comment">   * 2. IMG图片对象</span></span><br><span class="line"><span class="comment">   * 3. 将压缩的图片的base64交给IMG图片对象</span></span><br><span class="line"><span class="comment">   * 4. 在将图片画到canvas上</span></span><br><span class="line"><span class="comment">   * 5. 最终画完后拿到canvas对象，在对其质量整体进行缩小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> oCan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> oImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = oCan.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oImg.<span class="property">src</span> = imgSrc;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    oImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> imgWidth = oImg.<span class="property">width</span>;</span><br><span class="line">      <span class="keyword">const</span> imgHeight = oImg.<span class="property">height</span>;</span><br><span class="line"></span><br><span class="line">      oCan.<span class="property">width</span> = imgWidth;</span><br><span class="line">      oCan.<span class="property">height</span> = imgHeight;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在canvas中绘制图片</span></span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(oImg, <span class="number">0</span>, <span class="number">0</span>, imgWidth, imgHeight);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 生成压缩图片 toBlob()也可以</span></span><br><span class="line">      <span class="title function_">doCompress</span>(oCan, imgSrc, type);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">resolve</span>(compressedImgSrc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 封装压缩图片函数 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doCompress</span> = (<span class="params">canvas, imgSrc, type</span>) =&gt; &#123;</span><br><span class="line">  compressedImgSrc = canvas.<span class="title function_">toDataURL</span>(type, quality / <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (compressedImgSrc.<span class="property">length</span> &gt;= imgSrc.<span class="property">length</span> &amp;&amp; quality &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    quality -= <span class="number">10</span>;</span><br><span class="line">    <span class="title function_">doCompress</span>(canvas, imgSrc, type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 设置图片显示与否 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setPreviewVisible</span> = (<span class="params">node, visible</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (visible) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">true</span>:</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">false</span>:</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">      node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 图片压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 从MVC到MVP</title>
      <link href="/posts/9cafadb8/index.html"/>
      <url>/posts/9cafadb8/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-从mvc到mvp"><a class="markdownIt-Anchor" href="#3-从mvc到mvp"></a> 3. 从MVC到MVP</h1><h2 id="mvp"><a class="markdownIt-Anchor" href="#mvp"></a> MVP</h2><blockquote><p>MVP：在视图呈现上分层</p></blockquote><ul><li>M：model 数据创建、数据操作方法集合（提供回调，在P中更新视图）</li><li>V：view 视图管理、视图函数（处理更新）</li><li>P：presenter 呈现管理</li></ul><p><a href="https://imgse.com/i/p9gHmsH"><img src="https://s1.ax1x.com/2023/05/15/p9gHmsH.png" alt="p9gHmsH.png" /></a></p><ul><li>从前端视图与数据关系的逻辑分层给予了明确指导</li><li>做到了视图呈现的逻辑与数据管理和视图之间的分离</li><li>但并没有对呈现逻辑做彻底的抽象，我们每写一个MVP的时候，都需要创建独立的呈现管理器</li></ul><h2 id="mvp设计思想实现todolist"><a class="markdownIt-Anchor" href="#mvp设计思想实现todolist"></a> MVP设计思想实现TodoList</h2><h3 id="indexhtml"><a class="markdownIt-Anchor" href="#indexhtml"></a> index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./presenter.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="views"><a class="markdownIt-Anchor" href="#views"></a> views</h3><h4 id="viewsformjs"><a class="markdownIt-Anchor" href="#viewsformjs"></a> views/Form.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodoForm</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> oTodoForm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oTodoForm.<span class="property">innerHTML</span> += <span class="title class_">TodoInput</span>();</span><br><span class="line">  oTodoForm.<span class="property">innerHTML</span> += <span class="title class_">AddButton</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodoInput</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;input </span></span><br><span class="line"><span class="string">        type=&quot;text&quot;</span></span><br><span class="line"><span class="string">        id=&quot;J_TodoInput&quot;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AddButton</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;button id=&quot;J_btn&quot;&gt;ADD&lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="viewstodolistjs"><a class="markdownIt-Anchor" href="#viewstodolistjs"></a> views/TodoList.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">TodoList</span> (todoData) &#123;</span><br><span class="line">  <span class="keyword">const</span> oList = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">  oList.<span class="property">id</span> = <span class="string">&#x27;J_TodoList&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  todoData.<span class="title function_">forEach</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">    oList.<span class="title function_">appendChild</span>(<span class="title class_">TodoItem</span>(todo));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">TodoItem</span> (todo) &#123;</span><br><span class="line">  <span class="keyword">const</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  oLi.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123; todo.completed ? <span class="string">&#x27;checked&#x27;</span> : <span class="string">&#x27;&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="string">      data-id=&quot;<span class="subst">$&#123; todo.id &#125;</span>&quot;</span></span><br><span class="line"><span class="string">    /&gt;</span></span><br><span class="line"><span class="string">    &lt;span</span></span><br><span class="line"><span class="string">      style=&quot;text-decoration: <span class="subst">$&#123; todo.completed ? <span class="string">&#x27;line-through&#x27;</span> : <span class="string">&#x27;&#x27;</span> &#125;</span>&quot;</span></span><br><span class="line"><span class="string">    &gt;<span class="subst">$&#123; todo.content &#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;button data-id=&quot;<span class="subst">$&#123; todo.id &#125;</span>&quot;&gt;DELETE&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oLi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="viewsindexjs"><a class="markdownIt-Anchor" href="#viewsindexjs"></a> views/index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">TodoForm</span> <span class="keyword">from</span> <span class="string">&#x27;./Form&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoItem</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./TodoList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoForm</span>,</span><br><span class="line">  <span class="title class_">TodoItem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="modeljs"><a class="markdownIt-Anchor" href="#modeljs"></a> model.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">TodoModel</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoText</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTodoText (text) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoText</span> = text;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo (text, callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> todo = &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">      <span class="attr">content</span>: text,</span><br><span class="line">      <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">push</span>(todo);</span><br><span class="line">    <span class="title function_">doCallback</span>(callback, todo);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setTodoText</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleTodo (id, callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (todo.<span class="property">id</span> === id) &#123;</span><br><span class="line">        todo.<span class="property">completed</span> = !todo.<span class="property">completed</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> todo;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">doCallback</span>(callback, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo (id, callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoData</span> = <span class="variable language_">this</span>.<span class="property">todoData</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== id);</span><br><span class="line">    <span class="title function_">doCallback</span>(callback, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> create () &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">TodoModel</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">TodoModel</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">TodoModel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">TodoModel</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doCallback</span> (callback, arg) &#123;</span><br><span class="line">  <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="presenterjs"><a class="markdownIt-Anchor" href="#presenterjs"></a> presenter.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TodoItem</span>,</span><br><span class="line">  <span class="title class_">TodoList</span>,</span><br><span class="line">  <span class="title class_">TodoForm</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./views&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoModel</span> <span class="keyword">from</span> <span class="string">&quot;./model&quot;</span>;</span><br><span class="line"></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oApp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> todoModel = <span class="title class_">TodoModel</span>.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> nodes = &#123;</span><br><span class="line">    <span class="attr">oTodoInput</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">oAddBtn</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">oList</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">    <span class="title function_">bindEvent</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">render</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> oFragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(<span class="title class_">TodoForm</span>());</span><br><span class="line">    oFragment.<span class="title function_">appendChild</span>(<span class="title class_">TodoList</span>(todoModel.<span class="property">todoData</span>));</span><br><span class="line">    oApp.<span class="title function_">appendChild</span>(oFragment);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bindEvent</span> () &#123;</span><br><span class="line">    nodes.<span class="property">oTodoInput</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_TodoInput&#x27;</span>);</span><br><span class="line">    nodes.<span class="property">oAddBtn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_AddBtn&#x27;</span>);</span><br><span class="line">    nodes.<span class="property">oList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#J_TodoList&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    nodes.<span class="property">oTodoInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, handleTodoInput, <span class="literal">false</span>);</span><br><span class="line">    nodes.<span class="property">oAddBtn</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleAddBtnClick, <span class="literal">false</span>);</span><br><span class="line">    nodes.<span class="property">oList</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleListClick, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleTodoInput</span> (e) &#123;</span><br><span class="line">    todoModel.<span class="title function_">setTodoText</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleAddBtnClick</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> text = todoModel.<span class="property">todoText</span>;</span><br><span class="line">    <span class="keyword">if</span> (!text.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">addTodo</span>(text, <span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">appendItem</span>(<span class="title class_">TodoItem</span>(todo));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleListClick</span> (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> tar = e.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">const</span> tagName = tar.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tagName) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;input&#x27;</span>:</span><br><span class="line">        <span class="title function_">handleCheckboxClick</span>(tar);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;button&#x27;</span>:</span><br><span class="line">        <span class="title function_">handleDeleteClick</span>(tar);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleCheckboxClick</span> (target) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = target.<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">toggleTodo</span>(id, <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">toggleItem</span>(target);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleDeleteClick</span> (target) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = target.<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">    todoModel.<span class="title function_">removeTodo</span>(id, <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">removeItem</span>(target);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">appendItem</span> (item) &#123;</span><br><span class="line">    nodes.<span class="property">oList</span>.<span class="title function_">appendChild</span>(item);</span><br><span class="line">    nodes.<span class="property">oTodoInput</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toggleItem</span> (target) &#123;</span><br><span class="line">    target.<span class="property">parentNode</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>).<span class="property">style</span>.<span class="property">textDecoration</span> =</span><br><span class="line">      target.<span class="property">checked</span> ? <span class="string">&#x27;line-through&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">removeItem</span> (target) &#123;</span><br><span class="line">    target.<span class="property">parentNode</span>.<span class="title function_">remove</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mvp源码地址"><a class="markdownIt-Anchor" href="#mvp源码地址"></a> MVP源码地址</h2><blockquote><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVP">MVP源码地址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计思想 </tag>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB安装及启动</title>
      <link href="/posts/678f75b7/index.html"/>
      <url>/posts/678f75b7/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb安装及启动"><a class="markdownIt-Anchor" href="#mongodb安装及启动"></a> MongoDB安装及启动</h2><ol><li>下载 <code>mongodb.com/try/downloads/community</code></li><li>解压缩 <code>tar zxvf /Users/....mongodb...tgz</code></li><li>移动文件 <code>mv mongodb.. ~/mongodb</code></li><li>进入文件夹 <code>cd ~/mongodb</code></li><li>创建文件夹 <code>mkdir -p data/db</code></li><li>进入启动文件夹 <code>cd ~/mongodb/bin</code></li><li>执行启动程序 <code>sudo ./mongodb --dbpath /Users/.../mongodb/data/db</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随手实现MVVM</title>
      <link href="/posts/9bbd6280/index.html"/>
      <url>/posts/9bbd6280/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="随手实现mvvm"><a class="markdownIt-Anchor" href="#随手实现mvvm"></a> 随手实现MVVM</h1><blockquote><p>MVVM模型只是一种设计的方案与思路，它并不是设计模式，设计模式是建立在逻辑层面，设计方案是建立在设计架构层面的。</p></blockquote><blockquote><p>Vue核心是视图库，只是一个视图渲染的工具，Vue是<code>渐进式框架</code>，比如<code>Vue-router</code>、<code>vuex</code>，vue的核心库只关注视图层。</p></blockquote><ul><li>M：Model 数据保存和事件处理层 普通的JavaScript对象</li><li>驱动VM：ViewModel<ul><li>view改数据，需要通过ViewModel；</li><li>Model的更改要驱动View视图的更新，也要通过ViewModel</li></ul></li><li>V：View 视图模板</li></ul><h2 id="随手实现mvvm-2"><a class="markdownIt-Anchor" href="#随手实现mvvm-2"></a> 随手实现MVVM</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li><code>useDOM(App(), #app)</code>: 创建一个应用，放到根节点中去<ul><li><code>render(template, state)</code>: 把响应式数据state渲染到模板template上</li><li><code>bindEvent()</code>: 绑定事件处理函数</li></ul></li><li><code>App()</code>: 返回template模板、state响应式数据、methods事件处理函数</li><li><code>useReactive(target)</code>: 创建响应式数据<ul><li>数据响应式处理，可以通过state.a来访问target.a</li><li>在更新的时候，视图可以帮我更新</li><li><code>createReactObject(target, baseHandler)</code>: 用来创建一个代理数据</li><li><code>mutaleHandler</code>: 返回getter跟setter函数集合【为了以后扩展，需要分开写】<ul><li><code>createGetter()</code>: 用来创建一个proxy.get，他有三个参数target/key/receiver，通过Reflect.get来拿到value，需要判断target[key]是否是对象，如果是则进行深度代理<ul><li>为什么要返回一个函数？因为在之前可能还要做很多很多事情，里边还要传递很多参数进来，需要用到createGetter|Setter作用域内部的一些变量、方法</li></ul></li><li><code>createSetter()</code>: 用来创建一个proxy.set，他有四个参数target/key/value/receiver<ul><li>需要判断target[key]是否存在：<code>Object.prototype.hasOwnproperty.call(target, key)</code><ul><li>不存在：则响应式新增</li><li>存在 &amp;&amp; 需要判断新老值不相等：则响应式修改 update</li></ul></li></ul></li></ul></li></ul></li><li><code>render()</code> 编译模板<ul><li><code>eventFormat(template)</code>: 处理template模板，将模板中的事件解析掉</li><li><code>stateFormat(template, state)</code>: 处理响应式数据，将模板中的响应式数据解析掉</li></ul></li><li><code>eventFormat(template)</code>:<ul><li>匹配出事件处理函数字符串，保存DOM的标识、事件处理函数名称、事件类型到<code>eventPool</code>中，用来绑定事件处理函数</li><li>替换template中的事件处理字符串为DOM标识，方便后续能找到该事件DOM元素</li><li><code>bindEvent()</code>绑定事件处理函数，当template已经渲染上去后就可以绑定了<ul><li>找出所有的DOM元素</li><li>通过eventPool中保存的DOM标识来匹配节点，从而绑定事件处理函数<ul><li>找到函数名：通过match来匹配<code>(</code>之前的</li><li>找到函数参数：通过match来匹配<code>()</code>里边的<ul><li>需要判断函数参数，他的类型有可能是带引号的字符串，有可能是Number类型，有可能是布尔值</li></ul></li><li>最后通过<code>methods[函数名称](函数参数)</code>来执行事件处理函数</li></ul></li></ul></li></ul></li><li><code>stateFormat(template, state)</code>: 处理视图部分，替换数据<ul><li>匹配出整个数据的DOM节点，替换state，打标识补丁，重新组装每个DOM，将DOM标识、state的key保存到<code>statePool</code>数组中</li><li>匹配出双大括号，替换整个双大括号为value值，需要注意的是双大括号里的值state可能是state.a.c 等情况，需要split分割为数组，分别处理，最后替换</li></ul></li><li><code>update()</code>: 在视图更新后（setter后）执行update<ul><li><code>update(statePool, key, value)</code><ul><li>找到所有标签，遍历statePool</li><li>如果statePool每一项的state[key]都跟key相等，那么就进行遍历所有标签</li><li>通过DOM标识来找到需要更新的节点，更新当前DOM.innerHTML为value</li></ul></li></ul></li></ol><h3 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h3><h4 id="srcappjs"><a class="markdownIt-Anchor" href="#srcappjs"></a> src/App.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDOM, useReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;../MVVM&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> state = <span class="title function_">useReactive</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xiaoyesensen&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">count</span> += num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">minus</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">count</span> -= num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeName</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;h1&gt;&#123;&#123; count &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&quot;add(2)&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&quot;minus(1)&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&quot;changeName(&#x27;小野森森&#x27;)&quot;&gt;Change Name&lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    state,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      add,</span><br><span class="line">      minus,</span><br><span class="line">      changeName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useDOM</span>(</span><br><span class="line">  <span class="title class_">App</span>(),</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="srcmvvm"><a class="markdownIt-Anchor" href="#srcmvvm"></a> src/MVVM</h4><h5 id="srcmvvmcompiler"><a class="markdownIt-Anchor" href="#srcmvvmcompiler"></a> src/MVVM/compiler</h5><h6 id="srcmvvmcompilereventjs"><a class="markdownIt-Anchor" href="#srcmvvmcompilereventjs"></a> src/MVVM/compiler/event.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; checkType, randomNum &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eventPool = []</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   mark: random</span></span><br><span class="line"><span class="comment"> *   handler: 事件处理函数字符串</span></span><br><span class="line"><span class="comment"> *   type: &#x27;click&#x27;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> reg_onClick = <span class="regexp">/onClick=\&quot;(.+?)\&quot;/g</span>,</span><br><span class="line">      reg_fnName = <span class="regexp">/^(.+?)\(/</span>,</span><br><span class="line">      reg_arg = <span class="regexp">/\((.*?)\)/</span>,</span><br><span class="line">      eventPool = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">eventFormat</span> (template) &#123;</span><br><span class="line">  <span class="keyword">return</span> template.<span class="title function_">replace</span>(reg_onClick, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _mark = <span class="title function_">randomNum</span>();</span><br><span class="line"></span><br><span class="line">    eventPool.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">mark</span>: _mark,</span><br><span class="line">      <span class="attr">handler</span>: key.<span class="title function_">trim</span>(),</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;click&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`data-mark=<span class="subst">$&#123;_mark&#125;</span>`</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">bindEvent</span> (methods) &#123;</span><br><span class="line">  <span class="keyword">const</span> allElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> oItem = <span class="literal">null</span>,</span><br><span class="line">      _mark = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  eventPool.<span class="title function_">forEach</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allElements.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">      oItem = allElements[i];</span><br><span class="line">      _mark = <span class="built_in">parseInt</span>(oItem.<span class="property">dataset</span>.<span class="property">mark</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">mark</span> === _mark) &#123;</span><br><span class="line">        oItem.<span class="title function_">addEventListener</span>(event.<span class="property">type</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> fnName = event.<span class="property">handler</span>.<span class="title function_">match</span>(reg_fnName)[<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">const</span> arg = <span class="title function_">checkType</span>(event.<span class="property">handler</span>.<span class="title function_">match</span>(reg_arg)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">          methods[fnName](arg);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="srcmvvmcompilerstatejs"><a class="markdownIt-Anchor" href="#srcmvvmcompilerstatejs"></a> src/MVVM/compiler/state.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; randomNum &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg_html = <span class="regexp">/\&lt;.+?\&gt;\&#123;\&#123;(.+?)\&#125;\&#125;\&lt;\/.+?\&gt;/g</span>,</span><br><span class="line">      reg_tag = <span class="regexp">/\&lt;(.+?)\&gt;/</span>,</span><br><span class="line">      reg_var = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还需要在更新函数中用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> statePool = [];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * statePool []</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   mark: _mark,</span></span><br><span class="line"><span class="comment"> *   state: value</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">stateFormat</span> (template, state) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  template = template.<span class="title function_">replace</span>(reg_html, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> matched = node.<span class="title function_">match</span>(reg_tag);</span><br><span class="line">    <span class="keyword">const</span> _mark = <span class="title function_">randomNum</span>();</span><br><span class="line"></span><br><span class="line">    _state.<span class="property">mark</span> = _mark;</span><br><span class="line"></span><br><span class="line">    statePool.<span class="title function_">push</span>(_state);</span><br><span class="line"></span><br><span class="line">    _state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;<span class="subst">$&#123;matched[<span class="number">1</span>]&#125;</span> data-mark=&quot;<span class="subst">$&#123;_mark&#125;</span>&quot;&gt;&#123;&#123;<span class="subst">$&#123;key&#125;</span>&#125;&#125;&lt;/<span class="subst">$&#123;matched[<span class="number">1</span>]&#125;</span>&gt;`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  template = template.<span class="title function_">replace</span>(reg_var, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _var = key.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> _varArr = _var.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; _varArr.<span class="property">length</span>) &#123;</span><br><span class="line">      _var = state[_varArr[i]];</span><br><span class="line">      i ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _state.<span class="property">state</span> = _varArr;</span><br><span class="line"></span><br><span class="line">    statePool[o].<span class="property">state</span> = _varArr;</span><br><span class="line"></span><br><span class="line">    o++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _var;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmreactive"><a class="markdownIt-Anchor" href="#srcmvvmreactive"></a> src/MVVM/reactive</h5><h6 id="srcmvvmreactiveindexjs"><a class="markdownIt-Anchor" href="#srcmvvmreactiveindexjs"></a> src/MVVM/reactive/index.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mutableHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./mutableHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useReactive</span> (target) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactObject</span>(target, mutableHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactObject</span> (target, baseHandler) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, baseHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="srcmvvmreactivemutablehandlerjs"><a class="markdownIt-Anchor" href="#srcmvvmreactivemutablehandlerjs"></a> src/MVVM/reactive/mutableHandler.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hasOwnProperty, isEqual, isObject &#125; <span class="keyword">from</span> <span class="string">&quot;../shared/utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useReactive &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; update &#125; <span class="keyword">from</span> <span class="string">&quot;../render&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; statePool &#125; <span class="keyword">from</span> <span class="string">&quot;../compiler/state&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = <span class="title function_">createGetter</span>(),</span><br><span class="line">      set = <span class="title function_">createSetter</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span> (target, key, receiver) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应式获取&#x27;</span>, res);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">      <span class="comment">// 深度代理</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">useReactive</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span> (target, key, value, receiver) &#123;</span><br><span class="line">    <span class="comment">// 判断key是否是自身属性</span></span><br><span class="line">    <span class="keyword">const</span> isKeyExist = <span class="title function_">hasOwnProperty</span>(target, key),</span><br><span class="line">          oldValue = target[key],</span><br><span class="line">          res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isKeyExist) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应式新增&#x27;</span>, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="title function_">isEqual</span>(value, oldValue)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应式修改&#x27;</span>, key, value);</span><br><span class="line">      <span class="comment">// 视图更新</span></span><br><span class="line">      <span class="comment">// Vue做法：有虚拟节点；先模板编译，形成ast树，优化，形成虚拟节点，对比新老节点是否有差异性，如果有在更新，没有则不更新</span></span><br><span class="line">      <span class="title function_">update</span>(statePool, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutableHandler = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  mutableHandler</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmshared"><a class="markdownIt-Anchor" href="#srcmvvmshared"></a> src/MVVM/shared</h5><h6 id="srcmvvmsharedutilsjs"><a class="markdownIt-Anchor" href="#srcmvvmsharedutilsjs"></a> src/MVVM/shared/utils.js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg_check_str = <span class="regexp">/^[\&#x27;|\&quot;].*?[\&#x27;|\&quot;]$/</span>;</span><br><span class="line"><span class="keyword">const</span> reg_str = <span class="regexp">/[\&#x27;|\&quot;]/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span> (value) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value !== <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hasOwnProperty</span> (target, key) &#123;</span><br><span class="line">  <span class="comment">// target不一定是对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(target, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isEqual</span> (newValue, oldValue) &#123;</span><br><span class="line">  <span class="keyword">return</span> newValue === oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomNum</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">checkType</span> (str) &#123;</span><br><span class="line">  <span class="keyword">if</span> (reg_check_str.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(reg_str, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;false&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Number</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmindexjs"><a class="markdownIt-Anchor" href="#srcmvvmindexjs"></a> src/MVVM/index.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; useReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; useDOM &#125; <span class="keyword">from</span> <span class="string">&#x27;./render&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; eventFormat &#125; <span class="keyword">from</span> <span class="string">&#x27;./compiler/event&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; stateFormat &#125; <span class="keyword">from</span> <span class="string">&#x27;./compiler/state&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="srcmvvmrenderjs"><a class="markdownIt-Anchor" href="#srcmvvmrenderjs"></a> src/MVVM/render.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; eventFormat, stateFormat &#125; <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindEvent &#125; <span class="keyword">from</span> <span class="string">&quot;./compiler/event&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useDOM</span> (</span><br><span class="line">  &#123; template, state, methods &#125;,</span><br><span class="line">  rootDOM</span><br><span class="line">) &#123;</span><br><span class="line">  rootDOM.<span class="property">innerHTML</span> = <span class="title function_">render</span>(template, state);</span><br><span class="line">  <span class="title function_">bindEvent</span>(methods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span> (template, state) &#123;</span><br><span class="line"></span><br><span class="line">  template = <span class="title function_">eventFormat</span>(template);</span><br><span class="line">  template = <span class="title function_">stateFormat</span>(template, state);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">update</span> (statePool, key, value) &#123;</span><br><span class="line">  <span class="keyword">const</span> allElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> oItem = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  statePool.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">state</span>[item.<span class="property">state</span>.<span class="property">length</span> - <span class="number">1</span>] === key) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allElements.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        oItem = allElements[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> _mark = <span class="built_in">parseInt</span>(oItem.<span class="property">dataset</span>.<span class="property">mark</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">mark</span> === _mark) &#123;</span><br><span class="line">          oItem.<span class="property">innerHTML</span> = value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mvvm源码地址"><a class="markdownIt-Anchor" href="#mvvm源码地址"></a> MVVM源码地址</h2><blockquote><p><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVVM">MVVM源码地址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计思想 </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 前端MVC</title>
      <link href="/posts/afac6017/index.html"/>
      <url>/posts/afac6017/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-前端mvc"><a class="markdownIt-Anchor" href="#2-前端mvc"></a> 2. 前端MVC</h1><h2 id="前端mvc"><a class="markdownIt-Anchor" href="#前端mvc"></a> 前端MVC</h2><ul><li><p>前端渲染：</p><ul><li>HTML文件 -&gt; div#app -&gt; 从服务器下载</li><li>数据 -&gt; 异步请求API -&gt; 数据 -&gt; DOM操作 -&gt; DOM结构 -&gt; 渲染 -&gt; div#app</li></ul></li><li><p>前端MVC：</p><ul><li>V: 模板 -&gt; 函数返回字符串/模板文件</li><li>M: Service 请求服务 -&gt; 请求函数</li><li>C: 调用请求函数 -&gt; 数据 -&gt; 交给模板渲染</li></ul></li></ul><p><a href="https://imgse.com/i/p9gHiIx"><img src="https://s1.ax1x.com/2023/05/15/p9gHiIx.png" alt="p9gHiIx.png" /></a></p><blockquote><p>MVC本质上跟MVVM是没有任何关系的，从设计角度来看不是一个东西。<br />MVC：设计思想、架构方案<br />MVVM：构建应用程序以及使用应用的一种方式。 VM是架子、轮子，链接数据操作层面上的和View的模板层面上的工具；Model层更改数据来影响View层更新，View层的更新来同时更新我们Model层的数据。<br />M -&gt; MC的合集（MVC的MC）<br />V -&gt; 组件</p></blockquote><h2 id="mvc实现todolist"><a class="markdownIt-Anchor" href="#mvc实现todolist"></a> MVC实现TodoList</h2><ul><li><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVC">源码地址</a></li></ul><h2 id="原生dom实现前端mvc"><a class="markdownIt-Anchor" href="#原生dom实现前端mvc"></a> 原生DOM实现前端MVC</h2><ul><li><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVC-FrontEnd">源码地址</a></li></ul><h2 id="vue3实现前端mvc"><a class="markdownIt-Anchor" href="#vue3实现前端mvc"></a> Vue3实现前端MVC</h2><ul><li><a href="https://github.com/lybinweb/JSplusplus/tree/develop/JavaScript/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/MVC-FrontEnd-Vue3">源码地址</a></li></ul><h2 id="mvc总结"><a class="markdownIt-Anchor" href="#mvc总结"></a> MVC总结</h2><ul><li>C：逻辑管理 数据格式化、视图渲染、事件处理（向M请求数据）</li><li>V：视图管理 视图函数（给C层提供）</li><li>M：数据管理 （返回数据给C）</li></ul><blockquote><p>对于前端MVC来说，借鉴的只是在项目设计上的分层思想与方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端MVC对比</title>
      <link href="/posts/1cdcbed4/index.html"/>
      <url>/posts/1cdcbed4/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-前后端mvc对比"><a class="markdownIt-Anchor" href="#2-前后端mvc对比"></a> 2. 前后端MVC对比</h1><blockquote><p>前言：Vue没有完全遵循MVVM模型</p></blockquote><h2 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h2><h3 id="后端mvc"><a class="markdownIt-Anchor" href="#后端mvc"></a> 后端MVC</h3><ul><li>M: 模型层 -&gt; model 数据模型 -&gt; 操作数据库（对数据进行增删改查）</li><li>V: 视图层 -&gt; view 显示视图或视图模板</li><li>C: 控制器层 -&gt; controller 逻辑层 数据和视图关联挂载和基本的逻辑操作<ul><li>前端渲染： API层 前端请求的API对应的是控制器中的方法<ul><li>前端 -&gt; 异步请求URL -&gt; 调用控制器中的一个方法 -&gt; 调用Model层的方法 -&gt; 操作数据库 -&gt; 获取数据 -&gt; 返回给控制器方法 -&gt; 响应回前端</li></ul></li><li>服务端渲染：视图需要数据，去找controller对应的方法，调用Model的方法，获取数据，返回给controller对应的方法，render到view中</li></ul></li></ul><h3 id="前端mvc"><a class="markdownIt-Anchor" href="#前端mvc"></a> 前端MVC</h3><ul><li>M: Model 管理视图所需数据、数据与视图的关联</li><li>V: View HTML模板、渲染视图</li><li>C: Controller 管理事件逻辑</li></ul><blockquote><p>Controller --触发–&gt; Model --改变–&gt; View<br />Vier --触发–&gt; Controller --触发–&gt; Model</p><p>MVC就是MVVM的雏形</p></blockquote><ul><li>总结：<ul><li>MVC的弱点：驱动是不明显的、驱动被MVC分离成三部分</li><li>MVVM：<ul><li>M: data</li><li>V: view</li><li>VM: ViewModel 解决了驱动不集中、不内聚，更加解决了视图与模型之间完全隔离开来的这种关系</li></ul></li></ul></li></ul><blockquote><p>vue关注视图渲染<br />Vue ref 可以直接操作 DOM -&gt; 没有遵循MVVM，因为M是强制跟V隔离的<br />Vue的ViewModel：收集依赖、模板编译、数据劫持</p></blockquote><ul><li>所以Vue没有严格意义上遵循MVVM模型，其实是MVW。</li><li>Vue是<code>渐进式框架</code>，比如<code>Vue-router</code>、<code>vuex</code>，vue的核心库只关注视图层；</li></ul><h4 id="基于mvc模型实现计算器案例"><a class="markdownIt-Anchor" href="#基于mvc模型实现计算器案例"></a> 基于MVC模型实现计算器案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span> () &#123;</span><br><span class="line">    model.<span class="title function_">init</span>();</span><br><span class="line">    view.<span class="title function_">render</span>();</span><br><span class="line">    controller.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> model = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">s</span>: <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> _this.<span class="property">data</span>) &#123;</span><br><span class="line">        (<span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(_this, k, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> _this.<span class="property">data</span>[k];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">              _this.<span class="property">data</span>[key] = newValue;</span><br><span class="line">              <span class="comment">// update view</span></span><br><span class="line">              view.<span class="title function_">render</span>(&#123; [k]: newValue &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)(k);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> view = &#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-a&quot;&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-s&quot;&gt;&#123;&#123; s &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-b&quot;&gt;&#123;&#123; b &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;=&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;cal-r&quot;&gt;&#123;&#123; r &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; class=&quot;cal-input a&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; class=&quot;cal-input b&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;*&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;cal-btn&quot;&gt;/&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">mutedData</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mutedData) &#123;</span><br><span class="line">        <span class="comment">// 如果 变化的data 不存在，那么直接渲染解析template，替换掉</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">template</span>.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> model[key.<span class="title function_">trim</span>()];</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        container.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">template</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">el</span>).<span class="title function_">appendChild</span>(container);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> mutedData) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;cal-&#x27;</span> + k).<span class="property">textContent</span> = mutedData[k];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> controller = &#123;</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> oCalInputs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;cal-input&#x27;</span>),</span><br><span class="line">          oCalBtns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;cal-btn&#x27;</span>),</span><br><span class="line">          inputItem,</span><br><span class="line">          btnItem;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalInputs.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        inputItem = oCalInputs[i];</span><br><span class="line"></span><br><span class="line">        inputItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleInput</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oCalBtns.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        btnItem = oCalBtns[i];</span><br><span class="line"></span><br><span class="line">        btnItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleBtn</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleInput</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> tar = e.<span class="property">target</span>,</span><br><span class="line">          value = <span class="title class_">Number</span>(tar.<span class="property">value</span>),</span><br><span class="line">          field = tar.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      model[field] = value;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算结果</span></span><br><span class="line">      <span class="comment">// model.r = eval(&#x27;model.a&#x27; + model.s + &#x27;model.b&#x27;);</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">with</span> (model) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">handleBtn</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> type = e.<span class="property">target</span>.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">      model.<span class="property">s</span> = type;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">with</span> (model) &#123;</span><br><span class="line">        r = <span class="built_in">eval</span>(<span class="string">&#x27;a&#x27;</span> + s + <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 请求资源与访问资源、服务端渲染与JS动态渲染、混编语言与EJS混编模式、抽离MVC层</title>
      <link href="/posts/1ef7553a/index.html"/>
      <url>/posts/1ef7553a/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-请求资源与访问资源-服务端渲染与js动态渲染-混编语言与ejs混编模式-抽离mvc层"><a class="markdownIt-Anchor" href="#1-请求资源与访问资源-服务端渲染与js动态渲染-混编语言与ejs混编模式-抽离mvc层"></a> 1. 请求资源与访问资源、服务端渲染与JS动态渲染、混编语言与EJS混编模式、抽离MVC层</h1><h2 id="请求资源与访问资源"><a class="markdownIt-Anchor" href="#请求资源与访问资源"></a> 请求资源与访问资源</h2><h3 id="请求资源"><a class="markdownIt-Anchor" href="#请求资源"></a> 请求资源</h3><ol><li><p>异步请求：</p><ul><li>数据：字符串、数字、JSON、XML</li><li>文件：视频、音频、文本文件、HTML/CSS/JS</li></ul></li><li><p>请求：</p><ul><li>有资源的前提，从服务器上下载资源</li><li>有地址的前提，用API/URL资源定位</li><li>通过一个资源定位，到服务器找到某一个特定的资源</li></ul></li><li><p>响应：</p><ul><li>服务器允许你请求</li><li>确认有资源定位对应的资源</li><li>将这个资源返回给请求方（浏览器、服务器）</li></ul><blockquote><p>比如微信登录，你是没有办法直接在前端发起一个请求去访问人家腾讯的服务器，因为所有的登录过程、登录验证他都在腾讯的服务器上面，你没有办法直接发。我们客户端点击登录然后先请求我们自己的服务器，不管你跨越还是不跨域我们可以协商，自己的服务器把资源准备好，一次性发送给腾讯，因为后端是不存在跨域的，跨域是浏览器行为。所以你从后端发起请求到腾讯服务器，验证成功后返回数据到我们的服务器，我们自己的服务器在把信息整理好，再返回给客户端提示，这个过程就是响应</p></blockquote></li><li><p>资源：</p><ul><li>页面的html是存放在服务器上的</li><li>请求服务器响应这个资源HTML -&gt; 将这个HTML响应给客户端 -&gt; 下载这个文件/加载并解析文件的过程</li><li>HTML编码通过浏览器解析<ul><li>link -&gt; 异步下载CSS文件 -&gt; 解析CSS规则 -&gt; 组装CSSOM树</li><li>body -&gt; 解析HTML -&gt; 组装DOM树</li><li>script -&gt; 要阻塞HTML的解析 -&gt; 下载JS文件 -&gt; 解析JS编码 -&gt; 执行</li></ul></li></ul></li><li><p>WEB项目运行环境的问题</p><ul><li>服务器：web文件夹 -&gt; <a href="http://www.xxx.com/test">www.xxx.com/test</a> -&gt; 访问index.html时对应web文件夹下的index.html</li><li>静态文件夹：有条件的允许你访问 HTML/CSS/JS/开放文件夹 -&gt; 浏览器环境运行<ul><li>没有映射域名的，这些文件夹就在服务器环境运行，这就是服务器的运行环境</li></ul></li><li>前端：将资源从服务器下载然后在浏览器中运行</li><li>后端：将资源拿出来直接在服务器环境里运行</li></ul></li></ol><h2 id="服务端渲染与js动态渲染"><a class="markdownIt-Anchor" href="#服务端渲染与js动态渲染"></a> 服务端渲染与JS动态渲染</h2><h3 id="服务端渲染"><a class="markdownIt-Anchor" href="#服务端渲染"></a> 服务端渲染</h3><blockquote><p>服务端渲染：服务器把html拼接好返回给你</p></blockquote><ul><li>目标：浏览器访问<code>localhost:8080/static.html</code>响应服务器的<code>public/static.html</code>文件</li></ul><ol><li>安装express、ejs：<code>yarn add express ejs</code></li><li>使用nodemon监听根app.js</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：访问静态文件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listen 8080&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h2 id="缺陷这样返回html文件那么里边使用的数据都是写死的如果数据是动态传入的怎么做"><a class="markdownIt-Anchor" href="#缺陷这样返回html文件那么里边使用的数据都是写死的如果数据是动态传入的怎么做"></a> 缺陷：这样返回html文件，那么里边使用的数据都是写死的，如果数据是动态传入的，怎么做？</h2></li><li><p>后端路由：通过url来执行你的函数</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/html_text&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;This is TITLE&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在这里可以返回一个HTML字符串</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">      &lt;html&gt;</span></span><br><span class="line"><span class="string">      &lt;head&gt;</span></span><br><span class="line"><span class="string">          &lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;/head&gt;</span></span><br><span class="line"><span class="string">      &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;<span class="subst">$&#123; title &#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">            list.map(item =&gt; (</span></span></span><br><span class="line"><span class="subst"><span class="string">              &lt;li&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">                &lt;p&gt;$&#123; item.id &#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">                &lt;p&gt;$&#123; item.name &#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">              &lt;/li&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">            )).join(<span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">          &#125;</span>     </span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/body&gt;</span></span><br><span class="line"><span class="string">      &lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="js动态渲染"><a class="markdownIt-Anchor" href="#js动态渲染"></a> JS动态渲染</h3><ul><li>浏览器访问<code>localhost:8080/dom.html</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/dom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dom.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="string">&#x27;This is TITLE&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oApp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="title function_">render</span>();</span><br><span class="line">    oApp.<span class="title function_">appendChild</span>(node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">render</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> oFrag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">const</span> oTitle = <span class="title function_">createTitle</span>(title);</span><br><span class="line">    <span class="keyword">const</span> oList = <span class="title function_">createList</span>(list);</span><br><span class="line"></span><br><span class="line">    oFrag.<span class="title function_">appendChild</span>(oTitle);</span><br><span class="line">    oFrag.<span class="title function_">appendChild</span>(oList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oFrag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createTitle</span> (title) &#123;</span><br><span class="line">    <span class="keyword">const</span> oTitle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">    oTitle.<span class="property">textContent</span> = title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oTitle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createList</span> (list) &#123;</span><br><span class="line">    <span class="keyword">const</span> oList = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> oFrag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">      oLi.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;p&gt;<span class="subst">$&#123; item.id &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;<span class="subst">$&#123; item.name &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line"></span><br><span class="line">      oFrag.<span class="title function_">appendChild</span>(oLi);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    oList.<span class="title function_">appendChild</span>(oFrag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oList;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="混编语言与ejs混编模式"><a class="markdownIt-Anchor" href="#混编语言与ejs混编模式"></a> 混编语言与EJS混编模式</h2><h3 id="混编语言模式"><a class="markdownIt-Anchor" href="#混编语言模式"></a> 混编语言模式</h3><ul><li><p>HTML跟PHP混编：访问<code>localhost:8080/index.php</code>，就能看到你返回的页面，但是右键查看源代码是没有php相关代码的</p></li><li><p>混编模式：</p><ul><li>访问<code>localhost:8080/index.php</code>，是请求的后端的文件</li><li>请求 -&gt; URL -&gt; 服务器会映射这个资源 -&gt; php解释器会去解释php文件源码 -&gt; 执行输出结果给HTML -&gt; 响应回客户端</li></ul></li></ul><blockquote><p>.js 是浏览器默认是脚本，他不可以作为一个页面返回，因为后端代码是不可以让前端看到的，设计安全问题，所以我们只能返回字符串</p></blockquote><blockquote><p>浏览器要的是一段字符串，不在乎什么后缀，什么后缀是需要在后端配置的<br />txt、pdf是浏览器有自己的解释器的</p></blockquote><blockquote><p>Vue/React 在服务器上运行SSR的程序，他还要执行每一个组件还得拼接HTML字符串</p></blockquote><h3 id="ejs模板写混编"><a class="markdownIt-Anchor" href="#ejs模板写混编"></a> EJS模板写混编</h3><ul><li><p>访问`localhost:8080/html.ejs</p></li><li><p>让express认识ejs模板需要设置：<code>app.set('view engine', 'ejs')</code></p></li><li><p><code>views/html.ejs</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">const title = &#x27;This is EJS TITLE&#x27;;</span><br><span class="line">const list = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: 1,</span><br><span class="line">        name: &#x27;zhangsan&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: 2,</span><br><span class="line">        name: &#x27;lisi&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">];  </span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;% list.map(item =&gt; &#123; %&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">              &lt;p&gt;ID: &lt;%= item.id %&gt;&lt;/p&gt;</span><br><span class="line">              &lt;p&gt;Name: &lt;%= item.name %&gt;&lt;/p&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">      &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/html.ejs&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 他会找views下面的html.ejs文件</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="拆分ejs"><a class="markdownIt-Anchor" href="#拆分ejs"></a> 拆分ejs</h4><ul><li>views/top.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure><ul><li>views/bottom.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>listItem.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;p&gt;ID: &lt;%= item.id %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Name: &lt;%= item.name %&gt;&lt;/p&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><ul><li>views/html.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- include(top) %&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;% list.map(item =&gt; &#123; %&gt;</span><br><span class="line">          &lt;%- include(&#x27;listItem&#x27;, &#123;</span><br><span class="line">            item</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">      &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;%- include(bottom) %&gt;</span><br></pre></td></tr></table></figure><ul><li>app.js</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/html.ejs&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;This is EJS TITLE&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 他会找views下面的html.ejs文件</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;html&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    list</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="抽离mvc层案例"><a class="markdownIt-Anchor" href="#抽离mvc层案例"></a> 抽离MVC层（案例）</h2><ul><li>访问<code>http://localhost:8080</code> 解析index.ejs，返回完整的页面html</li><li>访问<code>http://localhost:8080/detail/'id'</code> 解析detail.ejs，返回对应的detail页面</li></ul><h3 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h3><ul><li>models 对数据的增删改查<ul><li>index.js</li></ul></li><li>controllers 接收请求并响应资源（处理数据逻辑）<ul><li>index.js</li></ul></li><li>data 模拟数据库<ul><li>data.json</li></ul></li><li>router 路由<ul><li>index.js</li></ul></li><li>view 页面<ul><li>index.ejs</li><li>detail.ejs</li></ul></li><li>app.js</li></ul><h3 id="appjs"><a class="markdownIt-Anchor" href="#appjs"></a> app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;../router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"><span class="comment">// 中间件：访问静态文件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listen 8080&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="modelsindexjs"><a class="markdownIt-Anchor" href="#modelsindexjs"></a> models/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  readFileSync</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  resolve</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getListData</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">    <span class="title function_">readFileSync</span>(</span><br><span class="line">      <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../data/data.json&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> title = data.<span class="property">titles</span>.<span class="property">index</span>;</span><br><span class="line">  <span class="keyword">const</span> list = data.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> (&#123; id, name &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title,</span><br><span class="line">    list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDetailData</span> (id) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">    <span class="title function_">readFileSync</span>(</span><br><span class="line">      <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../data/data.json&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> title = data.<span class="property">titles</span>.<span class="property">index</span>;</span><br><span class="line">  <span class="keyword">const</span> student = data.<span class="property">list</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title,</span><br><span class="line">    student</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  getListData,</span><br><span class="line">  getDetailData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controllersindexjs"><a class="markdownIt-Anchor" href="#controllersindexjs"></a> controllers/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; getListData, getDetailData &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../models&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">indexView</span> (req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, list &#125; = <span class="title function_">getListData</span>();</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    list</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">detailView</span> (req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, student &#125; = <span class="title function_">getDetailData</span>(id);</span><br><span class="line">  </span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;detail&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    student</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  indexView,</span><br><span class="line">  detailView</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="routerindexjs"><a class="markdownIt-Anchor" href="#routerindexjs"></a> router/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Router</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; indexView, detailView &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, indexView);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/detail&#x27;</span>, detailView);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><blockquote><p>localhost:8080/index.ejs -&gt; Router 执行函数 -&gt; Controllers indexView(data) -&gt; models getListData 返回listData{title,list} -&gt; 给到EJS模板 ejs引擎注入数据 -&gt; 响应注入数据后的完整的HTML -&gt; HTML字符串，浏览器解析并渲染DOM</p></blockquote><ol><li>Controllers：将输入给到View层，ejs将数据注入，响应完整的HTML。第一管的是逻辑语句操作数据，执行操作数据的函数，并且响应HTML</li><li>Models：增删改查数据</li></ol><h2 id="什么是mvc"><a class="markdownIt-Anchor" href="#什么是mvc"></a> 什么是MVC</h2><ul><li>MVC不是设计模式，他是跟架构相关的，你的项目如何设计分层，设计思想、方案</li></ul><ol><li>View 视图层 封装HTML并且提供动态嵌入数据的功能</li><li>Controller 控制器层</li></ol><ul><li>调用模型层对数据库的操作，并获取响应数据</li><li>将数据传递给EJS引擎，并返回完整HTML</li><li>将数据直接响应回客户端或者将HTML响应给客户端</li></ul><ol start="3"><li>Model 模型层 数据模型的操作、数据模型的定义<ul><li>根据控制器层的需求，对数据库内的数据进行增删改查操作</li><li>返回控制器需要的数据</li></ul></li></ol><blockquote><p>服务端渲染：SEO优化、搜索引擎优化<br />搜索引擎会定时爬取HTML源码</p><p>Node中间层：<br />API：Java<br />jsp -&gt; API -&gt; 数据注入JSP -&gt; 响应回前端<br />模板JSP -&gt; 数据 -&gt; JSP属于Java脚本工具<br />Node中间层：<br />客户端URL -&gt; 请求node -&gt; 访问Controller -&gt; 请求java API -&gt; data 返回 -&gt; controller -&gt; data -&gt;ejs -&gt; html -&gt; controller -&gt; 响应给客户端<br />node处理view层</p><p>客户端 -&gt;　node -&gt; 数据端 -&gt; Java API -&gt; view -&gt; 客户端</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 请求资源与访问资源 </tag>
            
            <tag> 服务端渲染 </tag>
            
            <tag> JS动态渲染 </tag>
            
            <tag> 混编语言 </tag>
            
            <tag> EJS混编模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue选项式API跟派发器的结合</title>
      <link href="/posts/7be91250/index.html"/>
      <url>/posts/7be91250/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="vue选项式api配合派发器实现计算器案例"><a class="markdownIt-Anchor" href="#vue选项式api配合派发器实现计算器案例"></a> vue选项式API配合派发器实现计算器案例</h1><ul><li>针对vue2组件化模式升级为派发器模式</li></ul><ol><li>派发器改造组件逻辑部分</li><li>根据需求更改数据</li><li>type对应一个事件、事件找到响应的逻辑、逻辑通过事件类型type触发派发器、触发事件的改变</li><li>vuex、redux：做了store中央状态管理，页面组件公用的状态</li><li>type 你的组件主要做了什么任务，称为类型</li><li>reducer 实现主要的任务</li><li>dispatch 根据type触发不同的reducer子任务</li></ol><h2 id="计算器组件"><a class="markdownIt-Anchor" href="#计算器组件"></a> 计算器组件</h2><ul><li>result 0</li><li>input input</li><li>button * 4</li></ul><h3 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h3><ul><li>src<ul><li>components<ul><li>calculator 计算器组件<ul><li>CalButton.vue</li><li>CalInput.vue</li><li>CalResult.vue</li><li>index.vue</li></ul></li></ul></li><li>libs<ul><li>utils.js</li></ul></li><li>actions type类型<ul><li>calculator.js</li></ul></li><li>reducers 实现每种type的逻辑<ul><li>calculator.js</li></ul></li><li>dispatchers 根据type触发对应的reducer<ul><li>calculator.js</li></ul></li><li>App.vue</li><li>main.js</li></ul></li></ul><h3 id="componentscalculator"><a class="markdownIt-Anchor" href="#componentscalculator"></a> components/calculator</h3><h4 id="calbuttonvue"><a class="markdownIt-Anchor" href="#calbuttonvue"></a> CalButton.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:class</span>=<span class="string">&quot;&#123; current: method === curMethod &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:method</span>=<span class="string">&quot;method&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click</span>=<span class="string">&quot;changeMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span> &#123;&#123; innerText &#125;&#125; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;CalButton&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">innerText</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">method</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">curMethod</span>: <span class="title class_">String</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    changeMethod () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;dispatch&#x27;</span>, <span class="string">&#x27;CHANGE_METHOD&#x27;</span>, <span class="variable language_">this</span>.<span class="property">method</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.current</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="calinputvue"><a class="markdownIt-Anchor" href="#calinputvue"></a> CalInput.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">input</span>=<span class="string">&quot;setNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;CalInput&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">field</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    setNumber (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> val = <span class="title class_">Number</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;dispatch&#x27;</span>, <span class="string">&#x27;SET_NUMBER&#x27;</span>, <span class="variable language_">this</span>.<span class="property">field</span>, val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="calresultvue"><a class="markdownIt-Anchor" href="#calresultvue"></a> CalResult.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; result &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;CalResult&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">result</span>: <span class="title class_">Number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="indexvue"><a class="markdownIt-Anchor" href="#indexvue"></a> index.vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">CalResult</span> <span class="attr">:result</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">CalResult</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">field</span>=<span class="string">&quot;firstNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalInput</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">field</span>=<span class="string">&quot;secondNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalInput</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;+&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;plus&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;-&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;minus&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;*&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;mul&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CalButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">innerText</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">method</span>=<span class="string">&quot;div&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:curMethod</span>=<span class="string">&quot;curMethod&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">dispatch</span>=<span class="string">&quot;dispatch&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">CalButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">CalInput</span> <span class="keyword">from</span> <span class="string">&quot;./CalInput.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">CalButton</span> <span class="keyword">from</span> <span class="string">&quot;./CalButton.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">CalResult</span> <span class="keyword">from</span> <span class="string">&quot;./CalResult.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> calculatorDispatch <span class="keyword">from</span> <span class="string">&quot;../../dispatchers/calculator&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">CalInput</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">CalButton</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">CalResult</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">firstNumber</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">secondNumber</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">result</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">curMethod</span>: <span class="string">&#x27;plus&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    dispatch (...args) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(args)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">calculatorDispatch</span>(<span class="variable language_">this</span>)(...args);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="actionscalculatorjs"><a class="markdownIt-Anchor" href="#actionscalculatorjs"></a> actions/calculator.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SET_NUMBER</span> = <span class="string">&#x27;SET_NUMBER&#x27;</span>,</span><br><span class="line">      <span class="variable constant_">CHANGE_METHOD</span> = <span class="string">&#x27;CHANGE_METHOD&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="variable constant_">SET_NUMBER</span>,</span><br><span class="line">  <span class="variable constant_">CHANGE_METHOD</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reducerscalculatorjs"><a class="markdownIt-Anchor" href="#reducerscalculatorjs"></a> reducers/calculator.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; compute &#125; <span class="keyword">from</span> <span class="string">&quot;../libs/utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculatorReducer</span> (data) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setNumber</span> (field, value) &#123;</span><br><span class="line">    data[field] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compute</span>(</span><br><span class="line">      data.<span class="property">curMethod</span>,</span><br><span class="line">      data.<span class="property">firstNumber</span>,</span><br><span class="line">      data.<span class="property">secondNumber</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeMethod</span> (method) &#123;</span><br><span class="line">    data.<span class="property">curMethod</span> = method;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compute</span>(</span><br><span class="line">      data.<span class="property">curMethod</span>,</span><br><span class="line">      data.<span class="property">firstNumber</span>,</span><br><span class="line">      data.<span class="property">secondNumber</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setNumber,</span><br><span class="line">    changeMethod</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> calculatorReducer;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dispatcherscalculatorjs"><a class="markdownIt-Anchor" href="#dispatcherscalculatorjs"></a> dispatchers/calculator.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SET_NUMBER</span>, <span class="variable constant_">CHANGE_METHOD</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../actions/calculator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&quot;../reducers/calculator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    setNumber,</span><br><span class="line">    changeMethod</span><br><span class="line">  &#125; = <span class="title function_">reducer</span>(ctx.<span class="property">$data</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">type, ...args</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="attr">SET_NUMBER</span>:</span><br><span class="line">        ctx.<span class="property">result</span> = <span class="title function_">setNumber</span>(...args);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="attr">CHANGE_METHOD</span>:</span><br><span class="line">        ctx.<span class="property">result</span> = <span class="title function_">changeMethod</span>(...args);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 派发器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染函数与h函数</title>
      <link href="/posts/a0b85258/index.html"/>
      <url>/posts/a0b85258/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="渲染函数与h函数使用"><a class="markdownIt-Anchor" href="#渲染函数与h函数使用"></a> 渲染函数与h函数使用</h1><h2 id="渲染函数"><a class="markdownIt-Anchor" href="#渲染函数"></a> 渲染函数</h2><ul><li>渲染函数也称render函数：把虚拟DOM转换为真实DOM</li></ul><ol><li>组价先提取模板（字符串）、属性、数据，然后编译模板</li></ol><ul><li>因为模板中有html自身属性，也有非html自身属性</li><li>所以要变成AST树，他是个自定义的语法树<ul><li>将AST树优化，将浏览器不认识的属性把他形成一种逻辑（v-model…）并且去掉，最后形成html结构</li></ul></li><li>编译成虚拟DOM，他是真实DOM的一种描述<ul><li>比如你修改span的内容是123，修改后的值还是123，那么就没必要更新DOM（需要获取DOM节点，然后更新DOM节点）</li><li>描述虚拟DOM：就是一个对DOM节点描述的对象；比如这个对象里会保存span标签，value值；在修改span后，他会判断这个对象里的值是否变化，如果变化了在进行更新这个对象（更新虚拟节点）</li><li>更新：如果是一个嵌套节点，外层节点没有修改，内层节点修改了，那么会进行逐层对比，直到不一样的地方打一个补丁，span由123变成了234，进行更新</li></ul></li><li>形成渲染函数</li><li>走真实DOM</li></ul><h2 id="h函数"><a class="markdownIt-Anchor" href="#h函数"></a> h函数</h2><ul><li>vue2中render里的第一个参数回调是h函数，可以随便起名<ul><li>h函数：createNodeDescription 创建节点描述<ul><li>返回VNode 虚拟节点（返回对真实DOM的描述）</li><li>多个虚拟节点就会组成虚拟DOM树</li><li>虚拟DOM树就是对真实DOM树的描述</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>h函数的参数：</p><ul><li>component 组件</li><li>节点的描述（是你对节点的描述）</li></ul></li><li><p>vue3中render函数就没有h函数参数了，他的h函数是从vue中导入进来的，不可以改名</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="comment">//  h(App) 返回一个对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">App</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用h函数描述开发层面的html结构"><a class="markdownIt-Anchor" href="#用h函数描述开发层面的html结构"></a> 用h函数描述开发层面的HTML结构</h2><ul><li>h函数<ul><li>参数：<ul><li>第一个参数：节点标签；比如 ‘div’</li><li>第二个参数：对象，对节点的属性的描述；比如：{ class: ‘app’ }</li><li>第三个参数：<ul><li>可以是子节点: 多个节点的话是数组，单个子节点的话可以直接写h函数</li><li>可以文本节点，即value值: this.title</li></ul></li></ul></li><li>返回值：返回虚拟节点</li></ul></li></ul><blockquote><p>注意：h函数里边写的不是虚拟节点，他是我们开发层面对HTML结构的一种描述，h函数执行完成后会返回虚拟节点，然后用render函数渲染虚拟节点为真实DOM</p></blockquote><blockquote><p>开发的时候，不使用template，可以用h函数替代</p></blockquote><h2 id="h函数用法"><a class="markdownIt-Anchor" href="#h函数用法"></a> h函数用法</h2><h3 id="单个child"><a class="markdownIt-Anchor" href="#单个child"></a> 单个child</h3><ol><li>没有props，默认第二个参数是children</li><li>如果没有props，{}或null占用</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, [</span><br><span class="line">      <span class="string">&#x27;this is title&#x27;</span>,</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    ]);</span><br><span class="line">    <span class="comment">// return h(&#x27;h1&#x27;, null, &#x27;this is title&#x27;);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多个child不要用一个h函数返回的虚拟节点"><a class="markdownIt-Anchor" href="#多个child不要用一个h函数返回的虚拟节点"></a> 多个child不要用一个h函数返回的虚拟节点</h3><ul><li>不可以这样渲染，虽然他不报错，使用了同一个虚拟节点，但是在更新的时候会出错</li><li>不要使用一个h函数返回出来的虚拟节点来做子元素渲染，因为每个虚拟节点会有一个编号，以后操作的时候会出错</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> vNode = <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">      vNode, vNode</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>建议这样做：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> vNode = <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, <span class="literal">null</span>, <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">6</span> &#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="title function_">h</span>(</span><br><span class="line">          <span class="string">&#x27;h&#x27;</span> + (index + <span class="number">1</span>),</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          <span class="string">`this is h<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>`</span>)</span><br><span class="line">      )</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="h函数挂载根组件"><a class="markdownIt-Anchor" href="#h函数挂载根组件"></a> h函数挂载根组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">App</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="resolvecomponent方法"><a class="markdownIt-Anchor" href="#resolvecomponent方法"></a> resolveComponent方法</h3><ul><li>resolveComponent<ul><li>参数是组件名称</li><li>全局注册的组件</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  h,</span><br><span class="line">  resolveComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title function_">resolveComponent</span>(<span class="string">&#x27;App&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>注意：局部注册的App是等价的<ul><li><code>return h(App); === return h(resolveComponent('App'));</code></li></ul></li></ul><h3 id="v-if-v-show使用"><a class="markdownIt-Anchor" href="#v-if-v-show使用"></a> v-if v-show使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isOpen</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;this is title&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;close~~~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;img&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">src</span>: <span class="string">&#x27;./sf.png&#x27;</span>,</span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">display</span>: <span class="variable language_">this</span>.<span class="property">isOpen</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="v-for"><a class="markdownIt-Anchor" href="#v-for"></a> v-for</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">listData</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> titles = [<span class="string">&#x27;编号&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">            <span class="string">&#x27;table&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">border</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">              <span class="attr">width</span>: <span class="number">500</span></span><br><span class="line">            &#125;,</span><br><span class="line">            [</span><br><span class="line">              <span class="title function_">h</span>(</span><br><span class="line">                      <span class="string">&#x27;tr&#x27;</span>,</span><br><span class="line">                      <span class="literal">null</span>,</span><br><span class="line">                      titles.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;th&#x27;</span>, <span class="literal">null</span>, item))</span><br><span class="line">              ),</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">listData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;tr&#x27;</span>, <span class="literal">null</span>, <span class="title class_">Object</span>.<span class="title function_">keys</span>(item).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;td&#x27;</span>, <span class="literal">null</span>, item[key]);</span><br><span class="line">                &#125;))</span><br><span class="line">              &#125;)</span><br><span class="line">            ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="v-model-v-on"><a class="markdownIt-Anchor" href="#v-model-v-on"></a> v-model v-on</h3><ul><li>子组件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; h &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;VModel&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    username: String,</span><br><span class="line">    password: String</span><br><span class="line">  &#125;,</span><br><span class="line">  emits: [</span><br><span class="line">    &#x27;update:username&#x27;,</span><br><span class="line">    &#x27;update:password&#x27;,</span><br><span class="line">    &#x27;submit&#x27;</span><br><span class="line">  ],</span><br><span class="line">  render () &#123;</span><br><span class="line">    return h(&#x27;div&#x27;, null, [</span><br><span class="line">      h(&#x27;input&#x27;, &#123;</span><br><span class="line">        type: &#x27;text&#x27;,</span><br><span class="line">        value: this.username,</span><br><span class="line">        placeholder: &#x27;Username&#x27;,</span><br><span class="line">        onInput: $event =&gt; this.$emit(&#x27;update:username&#x27;, $event.target.value)</span><br><span class="line">      &#125;),</span><br><span class="line">      h(&#x27;input&#x27;, &#123;</span><br><span class="line">        type: &#x27;password&#x27;,</span><br><span class="line">        value: this.password,</span><br><span class="line">        placeholder: &#x27;Password&#x27;,</span><br><span class="line">        onInput: $event =&gt; this.$emit(&#x27;update:password&#x27;, $event.target.value)</span><br><span class="line">      &#125;),</span><br><span class="line">      h(&#x27;button&#x27;, &#123;</span><br><span class="line">        onClick: () =&gt; this.$emit(&#x27;submit&#x27;)</span><br><span class="line">      &#125;, &#x27;Submit&#x27;),</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>main中渲染</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  h,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VModel</span> <span class="keyword">from</span> <span class="string">&quot;./components/h/vModel.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">VModel</span>, &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span>,</span><br><span class="line">      <span class="string">&#x27;onUpdate:username&#x27;</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">username</span> = value,</span><br><span class="line">      <span class="string">&#x27;onUpdate:password&#x27;</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">password</span> = value,</span><br><span class="line">      <span class="string">&#x27;onSubmit&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>, <span class="variable language_">this</span>.<span class="property">password</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="v-slot"><a class="markdownIt-Anchor" href="#v-slot"></a> v-slot</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VSlot组件</span></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="title function_">default</span>()),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">class</span>: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="title function_">author</span>()),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">class</span>: <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="title function_">content</span>(&#123;</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;this is content&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染VSlot组件</span></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">VSlot</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;this is vSlot title&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;iCan&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="literal">null</span>, props.<span class="property">content</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态组件-dynamiccomponent"><a class="markdownIt-Anchor" href="#动态组件-dynamiccomponent"></a> 动态组件 DynamicComponent</h3><ul><li>Comp1组件</li><li>Comp2组件</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  h,</span><br><span class="line">  resolveDynamicComponent, <span class="comment">// 动态组件</span></span><br><span class="line">  defineAsyncComponent, <span class="comment">// 异步组件</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comp1</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./components/h/Comp1.vue&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comp2</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./components/h/Comp2.vue&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">currentComponentName</span>: <span class="string">&#x27;Comp1&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    currentComponent () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">currentComponentName</span> === <span class="string">&#x27;Comp1&#x27;</span></span><br><span class="line">              ? <span class="title class_">Comp1</span> : <span class="title class_">Comp2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> dComponent = <span class="title function_">resolveDynamicComponent</span>(<span class="variable language_">this</span>.<span class="property">currentComponent</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return h(dComponent); // 直接渲染dComponent</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">      <span class="title function_">h</span>(dComponent),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">onClick</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">currentComponentName</span> = <span class="variable language_">this</span>.<span class="property">currentComponentName</span> === <span class="string">&#x27;Comp1&#x27;</span> ? <span class="string">&#x27;Comp2&#x27;</span> : <span class="string">&#x27;Comp1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="string">&#x27;Switch Component&#x27;</span>)</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义指令-custom-directive"><a class="markdownIt-Anchor" href="#自定义指令-custom-directive"></a> 自定义指令 custom Directive</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  resolveDirective,</span><br><span class="line">  withDirectives</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;div v-pin:top.animate=&quot;200&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个自定义指令</span></span><br><span class="line"><span class="keyword">const</span> pin = <span class="title function_">resolveDirective</span>(<span class="string">&#x27;pin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">withDirectives</span>(<span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>), [</span><br><span class="line">  [pin, <span class="number">200</span>, <span class="string">&#x27;top&#x27;</span>, &#123; <span class="attr">animate</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue指令v-for实现</title>
      <link href="/posts/8bd143d2/index.html"/>
      <url>/posts/8bd143d2/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="实现for"><a class="markdownIt-Anchor" href="#实现for"></a> 实现for</h1><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ol><li>入口函数createApp(options)执行会返回实例app，app可以调用mount方法挂载DOM节点</li><li>createApp(options)</li></ol><ul><li>枚举options，处理components：initComponent()</li></ul><ol start="3"><li>实现components组件：TestA组件<ul><li>TestA()：返回template模板跟state响应式数据</li><li>利用createReactive(data)来实现data响应式<ul><li>createReactive(data)<ul><li>返回createReactiveData(data, proxyHandler);</li></ul></li><li>createReactiveData(data, proxyHandler)<ul><li>判断data如果不是对象，则返回data</li><li>如果是对象则走代理，返回new Proxy(data, proxyHandler)</li></ul></li><li>proxyHandler()<ul><li>返回get、set</li><li>createGetter()创建get</li><li>createSetter()创建set</li></ul></li><li>createGetter<ul><li>返回一个function，这个function中利用Reflect.get(target, key, receiver)函数代理</li><li>如果代理完成的值还是对象，那么递归代理createReactive(res)</li></ul></li><li>createSetter<ul><li>返回一个function，这个function中利用Reflect.set(target, key, value, receiver)函数代理</li></ul></li></ul></li></ul></li><li>initComponent(components) 初始化组件<ul><li>遍历components，编译每个组件component：compileTemplate(template, state)</li><li>在外层声明domNodePool用来保存编译模板后的dom节点，将编译模板后的DOM节点push进去</li></ul></li><li>compileTemplate(template, state) 编译模板：将字符串template转换成DOM节点，然后过滤渲染<ul><li>创建DOM元素节点，将字符串template渲染进去，编译节点：compileNode(node, data)<ul><li>compileNode(node, data)<ul><li>选出所有的节点，遍历，拿到所有的标签，在外层定义customTag来保存自定义标签，从而获取非html标签，然后替换：replaceNode()<ul><li>replaceNode(item, tagName, data) item：当前的node，tagName：非html标签名称，data响应式数据<ul><li>获取node的自定义属性data、类名class、真实的标签li</li><li>switch分别处理不同的tagName，如果是for，则调用vFor()进行替换<ul><li>vFor(node, data, dataKey, className, realTag);<ul><li>遍历响应式数据data里的dataKey，创建一个真实标签节点realTag</li><li>设置类名className</li><li>设置innerHTML：replaceVar()用来替换内容<ul><li>replaceVar(node.innerHTML, item, reg_single_bracket)</li></ul></li><li>替换整个node节点</li></ul></li></ul></li></ul></li></ul></li><li>过滤元素节点nodeType为1的</li></ul></li><li>过滤双大括号里边的内容：replaceVar(template, data, reg_double_bracket);</li><li>返回compileNode的结果</li></ul></li></ul></li><li>mount(el)挂载节点<ul><li>创建文档碎片</li><li>选出根节点元素el</li><li>遍历domNodePool，将node添加进文档碎片</li><li>将文档碎片添加到根节点元素中</li></ul></li></ol><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="目录解构"><a class="markdownIt-Anchor" href="#目录解构"></a> 目录解构</h3><ul><li>for<ul><li>components<ul><li>TestA<ul><li>index.js 组件</li></ul></li></ul></li><li>xiaoye<ul><li>application.js 创建createApp</li><li>compile.js 编译模板</li><li>handler.js proxy代理的handler</li><li>index.js</li><li>reactive.js 响应式处理</li><li>utils.js 工具函数</li></ul></li><li>app.js 根目录启动文件</li><li>index.html 根html文件</li></ul></li></ul><h3 id="模块实现"><a class="markdownIt-Anchor" href="#模块实现"></a> 模块实现</h3><h4 id="indexhtml"><a class="markdownIt-Anchor" href="#indexhtml"></a> index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="appjs"><a class="markdownIt-Anchor" href="#appjs"></a> app.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./xiaoye&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TestA</span> <span class="keyword">from</span>  <span class="string">&#x27;./components/TestA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: [</span><br><span class="line">    <span class="title class_">TestA</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="componentstestaindexjs"><a class="markdownIt-Anchor" href="#componentstestaindexjs"></a> components/TestA/index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;../../xiaoye&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul class=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123; dateTime &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;for</span></span><br><span class="line"><span class="string">      data=&quot;list&quot;</span></span><br><span class="line"><span class="string">      tag=&quot;li&quot;</span></span><br><span class="line"><span class="string">      class=&quot;item&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;姓名：&#123; name &#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;年龄：&#123; age &#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/for&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TestA</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> state = <span class="title function_">createReactive</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;学生信息表&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2023-04-26&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [ template, state ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TestA</span>();</span><br></pre></td></tr></table></figure><h4 id="xiaoyeapplicationjs"><a class="markdownIt-Anchor" href="#xiaoyeapplicationjs"></a> xiaoye/application.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; compileTemplate &#125; <span class="keyword">from</span> <span class="string">&quot;./compile&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> domNodePool = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span> (options) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> option <span class="keyword">in</span> options) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;components&#x27;</span>:</span><br><span class="line">        <span class="title function_">initComponent</span>(options[option]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    mount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initComponent</span> (components) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> component <span class="keyword">of</span> components) &#123;</span><br><span class="line">    <span class="keyword">let</span> [ template, state ] = component;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板编译</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="title function_">compileTemplate</span>(template, state);</span><br><span class="line">    domNodePool.<span class="title function_">push</span>(node);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mount</span> (el) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el);</span><br><span class="line">  <span class="keyword">const</span> oFrag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">  domNodePool.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    oFrag.<span class="title function_">appendChild</span>(node);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">appendChild</span>(oFrag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xiaoyecompilejs"><a class="markdownIt-Anchor" href="#xiaoyecompilejs"></a> xiaoye/compile.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> customTags = [<span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;for&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> reg_single_bracket = <span class="regexp">/\&#123;(.*?)&#125;\/g;</span></span><br><span class="line"><span class="regexp">const reg_double_bracket = /</span>\&#123;\&#123;(.*?)\&#125;\&#125;/g;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">compileTemplate</span> (template, data) &#123;</span><br><span class="line">  template = <span class="title function_">replaceVar</span>(template, data, reg_double_bracket);</span><br><span class="line">  <span class="comment">// 将字符串转换为节点</span></span><br><span class="line">  <span class="keyword">const</span> _node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  _node.<span class="property">innerHTML</span> = template;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">compileNode</span>(_node, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compileNode</span> (node, data) &#123;</span><br><span class="line">  <span class="keyword">const</span> allNodes = node.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  allNodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tagName = item.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拿到非html标签</span></span><br><span class="line">    <span class="keyword">if</span> (customTags.<span class="title function_">includes</span>(tagName)) &#123;</span><br><span class="line">      <span class="title function_">replaceNode</span>(item, tagName, data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 过滤元素节点</span></span><br><span class="line">  <span class="keyword">return</span> [...node.<span class="property">childNodes</span>].<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">nodeType</span> === <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replaceNode</span> (node, tag, data) &#123;</span><br><span class="line">  <span class="keyword">const</span> dataKey = node.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> className = node.<span class="property">className</span>;</span><br><span class="line">  <span class="keyword">const</span> realTag = node.<span class="title function_">getAttribute</span>(<span class="string">&#x27;tag&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (tag) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;for&#x27;</span>:</span><br><span class="line">      <span class="title function_">vFor</span>(node, data, dataKey, className, realTag);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">vFor</span> (node, data, dataKey, className, realTag) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oFrag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">  data[dataKey].<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(realTag);</span><br><span class="line">    el.<span class="property">className</span> = className ? className : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    el.<span class="property">innerHTML</span> = <span class="title function_">replaceVar</span>(node.<span class="property">innerHTML</span>, item, reg_single_bracket);</span><br><span class="line"></span><br><span class="line">    oFrag.<span class="title function_">appendChild</span>(el);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  node.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(oFrag, node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replaceVar</span> (html, data, reg) &#123;</span><br><span class="line">  <span class="keyword">return</span> html.<span class="title function_">replace</span>(reg, <span class="function">(<span class="params">node, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">    key = key.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">return</span> obj[key] = data[key];</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xiaoyehandlerjs"><a class="markdownIt-Anchor" href="#xiaoyehandlerjs"></a> xiaoye/handler.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createReactive &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = <span class="title function_">createGetter</span>();</span><br><span class="line"><span class="keyword">const</span> set = <span class="title function_">createSetter</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span> () &#123;</span><br><span class="line">  <span class="comment">// proxy 的三个参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果res也是Object</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createReactive</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> proxyHandler = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xiaoyeindexjs"><a class="markdownIt-Anchor" href="#xiaoyeindexjs"></a> xiaoye/index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createApp</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./application&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createReactive</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="xiaoyereactivejs"><a class="markdownIt-Anchor" href="#xiaoyereactivejs"></a> xiaoye/reactive.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; proxyHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./handler&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createReactive</span> (data) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactiveData</span>(data, proxyHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveData</span> (data, proxyHandler) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(data)) <span class="keyword">return</span> data;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, proxyHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xiaoyeutilsjs"><a class="markdownIt-Anchor" href="#xiaoyeutilsjs"></a> xiaoye/utils.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span> (data) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span> &amp;&amp; data !== <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. JavaScript基本组成、进程与线程、script脚本、轮转时间片、标识符、变量</title>
      <link href="/posts/b0839f4a/index.html"/>
      <url>/posts/b0839f4a/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="javascript基本组成-进程与线程-script脚本-轮转时间片-标识符-变量"><a class="markdownIt-Anchor" href="#javascript基本组成-进程与线程-script脚本-轮转时间片-标识符-变量"></a> JavaScript基本组成、进程与线程、script脚本、轮转时间片、标识符、变量</h1><h2 id="javascript技术基本组成部分"><a class="markdownIt-Anchor" href="#javascript技术基本组成部分"></a> JavaScript技术基本组成部分</h2><ul><li>ECMAScript定义脚步规范与标准</li><li>DOM文档对象模型</li><li>BOM 浏览器对象模型</li><li>NodeJS服务端程序<ul><li>仁者见仁智者见智，现在的前端工程化都基于Node，可见Node对我们前端的重要性</li></ul></li></ul><p><a href="https://imgse.com/i/p9u3dO0"><img src="https://s1.ax1x.com/2023/04/25/p9u3dO0.png" alt="p9u3dO0.png" /></a></p><h2 id="同步与异步"><a class="markdownIt-Anchor" href="#同步与异步"></a> 同步与异步</h2><ul><li>同步：任务1先执行，任务2要等着任务1执行完才可以执行，那么任务1是同步任务</li><li>异步：任务1先执行，任务2不需要等着任务1执行完成，他就可以执行了，那么任务1就是异步任务。即任务1的完成与否不影响任务2的执行，那么任务1跟任务2就是异步关系</li></ul><p><a href="https://imgse.com/i/p9u30mV"><img src="https://s1.ax1x.com/2023/04/25/p9u30mV.png" alt="p9u30mV.png" /></a></p><blockquote><p>注意：没有两个任务会同时执行，任何任务执行都有先后顺序</p></blockquote><h3 id="同步-sync"><a class="markdownIt-Anchor" href="#同步-sync"></a> 同步 sync</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">      &lt;a href=&quot;&quot;&gt;This is TITLE&lt;/a&gt;</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- </span><br><span class="line">    html    网页视图的结构</span><br><span class="line">    css     网页视图的结构布局与样式</span><br><span class="line">    js      网页动态化的脚本程序</span><br><span class="line">    // 分离开发: 方便你在开发的过程中，易于维护、可读性强</span><br><span class="line">    </span><br><span class="line">    VUE -&gt; 打包 -&gt; html -&gt; style -&gt; css样式</span><br><span class="line">                            js </span><br><span class="line">    </span><br><span class="line">    前端：一切基于HTML文件</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 他们之间都是同步关系</span><br><span class="line">    /*</span><br><span class="line">      以下每一个程序都是同步任务 </span><br><span class="line">     */</span><br><span class="line">    document.write(&#x27;王者荣耀开始更新&lt;br /&gt;&#x27;);</span><br><span class="line">    document.write(&#x27;更新中...&lt;br /&gt;&#x27;);</span><br><span class="line">    document.write(&#x27;更新完毕！&lt;br /&gt;&#x27;);</span><br><span class="line">    document.write(&#x27;学习JavaScript!&lt;br /&gt;&#x27;);</span><br><span class="line">    document.write(&#x27;玩王者荣耀&lt;br /&gt;&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="异步-async"><a class="markdownIt-Anchor" href="#异步-async"></a> 异步 async</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const p1 = new Promise((resolve) =&gt; &#123;</span><br><span class="line">      document.write(&#x27;王者荣耀开始下载&lt;br /&gt;&#x27;);</span><br><span class="line">      document.write(&#x27;更新中...&lt;br /&gt;&#x27;);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    p1.then(() =&gt; &#123;</span><br><span class="line">      document.write(&#x27;更新完毕！&lt;br / &gt;&#x27;);</span><br><span class="line">    &#125;).then(() =&gt; &#123;</span><br><span class="line">      p2.then(() =&gt; &#123;</span><br><span class="line">        document.write(&#x27;玩儿王者荣耀&lt;br /&gt;&#x27;);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const p2 = new Promise((resolve) =&gt; &#123;</span><br><span class="line">      document.write(&#x27;学习JavaScript&lt;br /&gt;&#x27;);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h2><ul><li><p>CPU正在进行的一个任务的运行过程的调度单位</p></li><li><p>浏览器是一个多进程的应用程序</p></li><li><p>进程是计算机调度的基本单位</p></li></ul><h2 id="进程与线程的关系"><a class="markdownIt-Anchor" href="#进程与线程的关系"></a> 进程与线程的关系</h2><ul><li><p>进程是包含线程的，线程在进程中运行</p></li><li><p>线程有：定时器线程、js需要执行或渲染都各需要一个线程、网络请求线程等</p></li><li><p>浏览器有一个主进程（用户界面）</p></li><li><p>每一个tab各自有独立的渲染进程：</p><ul><li>浏览器内核Renderer，渲染引擎</li><li>网络进程（网络请求）</li><li>GPU进程（动画与3D绘制）</li><li>插件进程（devtool）</li></ul></li><li><p>每个进程里包含了多个线程运行</p></li></ul><h2 id="浏览器的渲染进程"><a class="markdownIt-Anchor" href="#浏览器的渲染进程"></a> 浏览器的渲染进程</h2><p><a href="https://imgse.com/i/p9u3BwT"><img src="https://s1.ax1x.com/2023/04/25/p9u3BwT.png" alt="p9u3BwT.png" /></a></p><ol><li>浏览器渲染进程包含JS引擎线程跟GUI渲染线程</li><li>JS引擎线程中有主线程，用来解析代码，一行一行的解析</li><li>主线程中代码解析完成后，给到GUI渲染线程渲染，他只会渲染主线程中最终解析完成的代码</li><li>主线程中跟GUI渲染线程是互斥关系，不可以同时执行，是有先后顺序的</li></ol><ul><li>例如，主线程中bgColor设置了三次，那么GUI渲染线程中只会渲染一次bgColor，他并不会渲染三次bgColor</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div style=&quot;width: 100px; height: 100px; background-color: green&quot;&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const oDiv = document.querySelector(&#x27;div&#x27;);</span><br><span class="line"></span><br><span class="line">    oDiv.style.backgroundColor = &#x27;red&#x27;;</span><br><span class="line">    oDiv.style.backgroundColor = &#x27;black&#x27;;</span><br><span class="line">    oDiv.style.backgroundColor = &#x27;orange&#x27;;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="script脚本"><a class="markdownIt-Anchor" href="#script脚本"></a> script脚本</h2><ol><li><script></script> 必须有闭合标签</li><li><p>type属性的多样性 <script type=""></script></p><ul><li>默认值：type=“text/javascript”</li><li>自定义存数据 type=“application/json” 不是固定的写法，只是为了语义化，不会解析该script标签</li><li>自定义存模板 type=“text/html” 不会解析该script标签</li><li>模块：type=“module”<ul><li>脚本程序可以是一个模块程序 （ES MODULE规范）</li><li>使用模块化脚本的条件：<ol><li>增加type=“module”</li><li>开启服务器对HTML进行访问（模块化的导入是需要发起HTTP请求的）</li><li>如何启动服务：<ol><li>安装NodeJS程序 <a href="https://nodejs.org/zh-cn/download">https://nodejs.org/zh-cn/download</a></li><li>npm i yarn -g</li><li>cd scripts</li><li>npm init -y</li><li>yarn add vite -D 或者 npm i vite -D</li><li>package.json -&gt; scripts -&gt; “dev”: “vite”</li><li>npm run dev -&gt; <a href="http://localhost:5173">http://localhost:5173</a></li><li><a href="http://localhost:5173/script.html">http://localhost:5173</a> 默认访问你根目录下的index.html文件</li></ol></li><li>ES MODULE对于其他模块的导入 （import）</li></ol></li></ul></li></ul></li></ol><h3 id="内部脚本"><a class="markdownIt-Anchor" href="#内部脚本"></a> 内部脚本</h3><ul><li>HTML文件中嵌入脚本程序</li><li>script标签会阻塞html代码的解析执行</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1. 必须有闭合标签    x &lt;script /&gt;</span></span><br><span class="line"><span class="comment">      2. type属性的多样性，默认值是text/javascript</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HELLO WORLD!!!!&#x27;</span>); <span class="comment">// script被当做脚本程序解析执行了</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="外部脚本"><a class="markdownIt-Anchor" href="#外部脚本"></a> 外部脚本</h3><ul><li>加载解析执行程序（需要下载脚本）</li></ul><h3 id="脚本顺序问题"><a class="markdownIt-Anchor" href="#脚本顺序问题"></a> 脚本顺序问题</h3><ul><li>脚本与脚本是按照顺序来执行的（比如两个script标签，是按照顺序从上到下执行）</li><li>脚本在解析执行期是有阻塞的</li></ul><h3 id="脚本错误问题"><a class="markdownIt-Anchor" href="#脚本错误问题"></a> 脚本错误问题</h3><ul><li>脚本与脚本之间的错误是隔离的（脚本1中的异常不会影响脚步2的解析执行）</li></ul><h2 id="javascript的运行三步骤"><a class="markdownIt-Anchor" href="#javascript的运行三步骤"></a> JavaScript的运行三步骤</h2><ol><li>语法检查</li><li>预编译、预解析（变量、函数、参数顺序上的调整，以便后续使用）</li><li>执行代码</li></ol><h2 id="轮转时间片"><a class="markdownIt-Anchor" href="#轮转时间片"></a> 轮转时间片</h2><h3 id="进度条案例"><a class="markdownIt-Anchor" href="#进度条案例"></a> 进度条案例</h3><ul><li>例子：两个进度条，同时执行</li></ul><p><a href=""><img src="../../../img/progress.gif" alt="p9u3DTU.png" /></a></p><ul><li><p>问题：JS的单线程，为什么进度条会同时运行？</p></li><li><p>两个进度条分别代表了两个任务，JS会将两个任务分别切片，切成很多很多子任务，然后将所有的子任务随机排进队列，称为时间片队列，然后时间片轮转执行</p></li></ul><p><a href="https://imgse.com/i/p9u3DTU"><img src="https://s1.ax1x.com/2023/04/25/p9u3DTU.png" alt="p9u3DTU.png" /></a></p><h3 id="进度条源码"><a class="markdownIt-Anchor" href="#进度条源码"></a> 进度条源码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .progress-bar &#123;</span><br><span class="line">      width: 800px;</span><br><span class="line">      height: 50px;</span><br><span class="line">      border: 1px solid #ddd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .progress &#123;</span><br><span class="line">      width: 0;</span><br><span class="line">      height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bar-1 .progress &#123;</span><br><span class="line">      background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .bar-2 .progress &#123;</span><br><span class="line">      background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div style=&quot;margin:100px 200px&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;progress-bar bar-1&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;progress&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;progress-bar bar-2&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;progress&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const oProgress1 = document.querySelector(&#x27;.bar-1 .progress&#x27;),</span><br><span class="line">          oProgress2 = document.querySelector(&#x27;.bar-2 .progress&#x27;);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    play(oProgress1, increaseWidth, 1000);</span><br><span class="line">    play(oProgress2, increaseWidth, 1000);</span><br><span class="line"></span><br><span class="line">    function play (dom, callback, delay) &#123;</span><br><span class="line">      let timer = setInterval(function () &#123;</span><br><span class="line">        callback(dom, timer);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function increaseWidth (dom, timer) &#123;</span><br><span class="line">      if (dom.offsetWidth !== 800) &#123;</span><br><span class="line">        dom.style.width = dom.offsetWidth + 5 + &#x27;px&#x27;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="编程语言的能力"><a class="markdownIt-Anchor" href="#编程语言的能力"></a> 编程语言的能力</h2><ol><li>指示开辟值存储的内存空间的能力 - 变量声明</li><li>具备表达数据不同结构的能力    - 数据结构</li><li>有对程序进行封装集成的能力    - 函数声明</li><li>完成算术与逻辑运算的能力    - 运算</li></ol><h2 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h2><blockquote><p>variable</p></blockquote><ul><li><p>标识符：Identifier</p><ul><li>程序员可以自己决定命名的名字或内容</li><li>变量名、常量名、函数名、类名…</li></ul></li><li><p>能够包含：</p><ul><li>大小写字母 A-Z a-z</li><li>数字 0-9</li><li>下划线 _</li><li>美元符号 $</li></ul></li><li><p>规则：</p><ul><li>不能以数字开头</li><li>严格区分大小写字母</li><li>不允许使用空格</li><li>不允许使用ES关键字与保留字</li><li>语义化清晰完整且尽量简洁</li><li>驼峰及蛇形命名可以使用</li></ul></li></ul><h2 id="js命名法"><a class="markdownIt-Anchor" href="#js命名法"></a> JS命名法</h2><ul><li>camelCase：驼峰命名法 （函数和变量名）<ul><li>helloWorld</li></ul></li><li>pascalCase：帕斯卡命名法/大坨峰命名法 （类名或者构造函数名）<ul><li>HelloWorld</li></ul></li><li>snake_case：蛇形命名法（常量名，全部大写）<ul><li>HELLO_WORLD</li></ul></li><li>kebab-case：烤串命名法（文件/文件夹名称、组件）<ul><li>hello-world</li></ul></li><li>space case：空格命名法（编程语言禁用）<ul><li>hello world</li></ul></li></ul><h2 id="什么是变量"><a class="markdownIt-Anchor" href="#什么是变量"></a> 什么是变量</h2><ul><li><p>内存中存储数据的最基本的单元标识</p></li><li><p>声明变量：</p><ul><li>var 关键字</li><li>将一个值 -&gt; 赋值 -&gt; 变量</li></ul></li><li><p>JS的动态性：变量与值的数据类型无关</p></li><li><p>Java的静态性：int a = 1;</p></li><li><p>JS的弱类型：</p><ul><li>当值操作不匹配既定的数据类型时，系统会做隐式转换</li></ul></li><li><p>var a = 1; 干了什么？</p><ul><li>开辟一个64位的内存空间</li><li>将1存储到该空间</li><li>将a标识对应上该空间的地址</li><li>声明变量 var a;</li></ul></li><li><p>变量二要素：</p><ul><li>变量名入住的房间（房号）</li><li>变量值入住的客人（客人名字）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript - 【新】颠覆认知的JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 【新】颠覆认知的JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-class跟style绑定的实现</title>
      <link href="/posts/39430f0d/index.html"/>
      <url>/posts/39430f0d/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="vue-class跟style绑定的实现"><a class="markdownIt-Anchor" href="#vue-class跟style绑定的实现"></a> vue-class跟style绑定的实现</h1><h2 id="vue的class跟style表现"><a class="markdownIt-Anchor" href="#vue的class跟style表现"></a> Vue的class跟style表现</h2><ul><li>class跟style：都可以用对象、数组形式</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">template: `</span><br><span class="line">&lt;div</span><br><span class="line">:calss=<span class="string">&quot;[</span></span><br><span class="line"><span class="string">&#x27;box&#x27;,</span></span><br><span class="line"><span class="string">isShow ? &#x27;show&#x27; : &#x27;&#x27;,</span></span><br><span class="line"><span class="string">hasError ? &#x27;danger&#x27; : &#x27;&#x27;</span></span><br><span class="line"><span class="string">]&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">&lt;h1</span><br><span class="line">:style=<span class="string">&quot;[</span></span><br><span class="line"><span class="string">titleStyle,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">display: titleShow ? &#x27;block&#x27; : &#x27;none&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">]&quot;</span></span><br><span class="line">&gt;This is Title&lt;/h1&gt;</span><br><span class="line">&lt;h2</span><br><span class="line">:style=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">display: titleShow ? &#x27;block&#x27; : &#x27;none&#x27;</span></span><br><span class="line"><span class="string">color: subTitleColor</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line">&gt;This is Sub_Title&lt;/h2&gt;</span><br><span class="line">&lt;p</span><br><span class="line">:class=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">danger: hasError</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line">&gt;This is content&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h2><ul><li>new Vue<ul><li>constructor<ul><li>data</li><li>el</li><li>template</li></ul></li><li>Vue的做法：分析字符串，形成ast树，将ast树属性、事件处理函数v-bind等解析、优化掉，形成虚拟节点，在形成真实DOM</li><li>我们自己的做法：形成DOM，在DOM上分析，依靠对象、数组的方式，直接解析掉</li></ul></li></ul><ol><li><p>init(vm, template)</p><ul><li>执行render</li><li>执行initData</li></ul></li><li><p>render(vm, template)</p><ul><li>创建div，将template放到innerHTML</li><li>compileAttrs(vm, container) 解析container</li><li>appendChild到el</li></ul></li><li><p>compileAttrs(vm, container)</p><ul><li>编译模板，拿到container里所有的元素</li><li>compileAttr 通过name编译value</li><li>将:class跟:style属性删除</li></ul></li><li><p>initData(vm)</p><ul><li>拿出$data，响应式包装（访问vm.attr的时候，走拦截）</li><li>reactive(vm, data);</li></ul></li><li><p>reactive(vm, data)</p><ul><li>vm直接访问到data里的属性(vm.attr)，相当于vm.$data.attr</li><li>attrUpdate(vm, key) 更新属性</li></ul></li><li><p>compileAttr(vm, el, name, value)</p><ul><li>利用replace(REG_SPACE) 处理value的空跟处理name的冒号</li><li>分别处理name为class跟style的情况<ul><li><p>class</p><ul><li>如果REG_OBJ.test(value)为对象<ul><li>value.match(REG_OBJ)拿到该数组索引为1的项，用split以逗号分割成新数组，因为索引为1的项可能有多个（danger:hasError,danger2:hasError2）,因为一个对象有多个键名键值对</li><li>遍历这个新数组，在以冒号分割拿到键跟值，一会处理的时候需要去除空格</li><li>在外层保存classStr空字符串，用来保存类名</li><li>如果在vm里能够找到值value的时候，那么就需要将value拼接到classStr中，注意拼接的时候要加一个空格，因为多个类名是由空格隔开的</li><li>在遍历的外层给el设置属性class为classStr</li></ul></li><li>如果REG_OBJ.test(value)为数组<ul><li>拿到数组后需要执行每一项（比如该项是三元表达式），让他变成真正的array</li><li>value为字符串数组，需要让执行每一项，需要用到eval或者new Function来执行字符串表达式（三元表达式 “[‘box’,isShow?‘show’:’’]”），要注意这个isShow他是vm上的一个属性，这个时候需要有一个作用域，有一个块，能够管理他，让他都往vm上找isShow变量</li><li>那么就用到with语法：renderArr(vm, value)，拿到新数组</li><li>给el设置属性class，值为：用join将数组分割为字符串并去除前后空格</li></ul></li></ul></li><li><p>style</p><ul><li><p>如果REG_OBJ.test(value)为对象</p><ul><li>执行里边的表达式将字符串对象变为对象：renderObj(vm, value)</li><li>在外边保存styleStr空字符串，枚举新对象，拼接style到styleStr，但是如果有fontSize这种驼峰的属性，需要将他变成font-size：transformToKebab(key)</li></ul></li><li><p>如果REG_OBJ.test(value)为数组</p><ul><li>需要用renderArr(vm, value)处理字符串数组</li><li>遍历新数组，枚举item，拼接style到styleStr</li></ul></li><li><p>最后：给el设置style属性跟值</p></li></ul></li></ul></li></ul></li><li><p>封装正则</p><ul><li>REG_SPACE 匹配所有的空格</li><li>REG_OBJ 匹配由对象开头结尾的所有字符</li><li>REG_ARR 匹配中括号开头中括号结尾的内部的所有字符</li><li>REG_UPPERCASE 匹配大写字母</li></ul></li><li><p>renderArr(vm, value)</p><ul><li><p>value是字符串数组，需要用立即执行函数里用new Function来做</p></li><li><p>(new Function())();</p></li><li><p>Function后边的()里的第一个参数是arg，第二个参数是函数体</p></li><li><p>Function后边的()里可以写函数体，可以return <code>$&#123;value&#125;</code>, 这个时候是拿不到isShow的</p></li><li><p>需要在函数体内传入形参vm，在立即执行函数中传入实参vm：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">renderArr</span> (vm, value) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Function</span>(</span><br><span class="line"><span class="string">&#x27;vm&#x27;</span>,</span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">with (vm) &#123;</span></span><br><span class="line"><span class="string">return `</span>$&#123;value&#125;<span class="string">`</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">))(vm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>update() 数据更新</p><ul><li>用map保存：<ul><li>el:<ul><li>type: style/class</li><li>expression: value 保存表达式</li></ul></li></ul></li><li>new Vue的constructor中保存：<ul><li>$stylePool: new Map();</li></ul></li><li>在complieAttr中设置style数据：vm.$stylePool.set(el, { type: name, expression: value})</li><li>要在reactive中看更改的key，他在stylePool中是否存在，存在则编译attr：attrUpdate(vm, key)</li></ul></li><li><p>attrUpdate(vm, key)</p><ul><li>拿到stylePool的引用，for of遍历拿到k，v</li><li>v.expression他里边是否包含了key<ul><li>包含：重新执行compileAttr(vm, k, v.type, v.expression)</li></ul></li></ul></li></ol><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><h3 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h3><ul><li>index.js: new Vue入口</li><li>reactive.js: 数据响应式处理</li><li>compile.js: 编译模板</li><li>regular.js: 正则</li><li>utils.js: 工具类</li><li>update.js: 更新</li></ul><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><h4 id="indexjs"><a class="markdownIt-Anchor" href="#indexjs"></a> index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; compileAttr &#125; <span class="keyword">from</span> <span class="string">&#x27;./compileAttr&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> (options) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; el, data, template &#125; = options;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span> = <span class="title function_">data</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$stylePool</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>, template);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init (vm, template) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">render</span>(vm, template);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initData (vm) &#123;</span><br><span class="line"><span class="keyword">const</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isObject</span>(_data)) &#123;</span><br><span class="line"><span class="title function_">reactive</span>(vm, _data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render (vm, template) &#123;</span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">container.<span class="property">innerHTML</span> = template;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析container</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">compileAttrs</span>(vm, container);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$el</span>.<span class="title function_">appendChild</span>(container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileAttrs (vm, container) &#123;</span><br><span class="line"><span class="comment">// getElementsByTagName(&#x27;*&#x27;)是类数组，可以用扩展符号平铺到数组中</span></span><br><span class="line"><span class="keyword">const</span> allNodes = [...container.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>)];</span><br><span class="line"></span><br><span class="line">allNodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 拿到所有的属性</span></span><br><span class="line"><span class="keyword">const</span> attrs = [el.<span class="property">attributes</span>];</span><br><span class="line"></span><br><span class="line">attrs.<span class="title function_">forEach</span>(<span class="function"><span class="params">attr</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// name: :class</span></span><br><span class="line"><span class="comment">// value: [...]</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, value &#125; = attr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过name编译value 因为class跟style里都可能是对象跟数组</span></span><br><span class="line"><span class="title function_">compileAttr</span>(vm, el, name, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">el.<span class="title function_">removeAttrbute</span>(<span class="string">&#x27;:class&#x27;</span>);</span><br><span class="line">el.<span class="title function_">removeAttrbute</span>(<span class="string">&#x27;:style&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure><h4 id="reactivejs"><a class="markdownIt-Anchor" href="#reactivejs"></a> reactive.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; attrUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;./update&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span> (vm, target) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> target[key];</span><br><span class="line">&#125;,</span><br><span class="line">set (newValue) &#123;</span><br><span class="line"><span class="keyword">if</span> (target[key] === newValue) <span class="keyword">return</span>;</span><br><span class="line">target[key] = newValue;</span><br><span class="line"><span class="title function_">attrUpdate</span>(vm, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compilejs"><a class="markdownIt-Anchor" href="#compilejs"></a> compile.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REG_SPACE</span>, <span class="variable constant_">REG_OBJ</span>, <span class="variable constant_">REG_ARRAY</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./regular&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map &#123;</span></span><br><span class="line"><span class="comment"> * el: &#123;</span></span><br><span class="line"><span class="comment"> * type: class/style,</span></span><br><span class="line"><span class="comment"> * expression: value</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">compileAttr</span> (vm, el, name, value) &#123;</span><br><span class="line"><span class="comment">// 将所有的空格变为空</span></span><br><span class="line">value = value.<span class="title function_">replace</span>(<span class="variable constant_">REG_SPACE</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">name = name.<span class="title function_">replace</span>(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">vm.<span class="property">$stylePool</span>.<span class="title function_">set</span>(el, &#123;</span><br><span class="line"><span class="attr">type</span>: name,</span><br><span class="line"><span class="attr">expression</span>: value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (name) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;class&#x27;</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable constant_">REG_OBJ</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line"><span class="comment">// value.match(REG_OBJ)[1] -&gt; danger:hasError </span></span><br><span class="line"><span class="comment">// 对象里有多个键值对，所以要以逗号分割开来，拿到所有的字符串</span></span><br><span class="line"><span class="keyword">const</span> keyValueArr = value.<span class="title function_">match</span>(<span class="variable constant_">REG_OBJ</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> classStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">keyValueArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> [ key, value ] = item.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vm[value.<span class="title function_">trim</span>()]) &#123;</span><br><span class="line">classStr += <span class="string">` key.trim()`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, classStr.<span class="title function_">trim</span>());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">REG_ARRAY</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line"><span class="keyword">const</span> classArr = <span class="title function_">renderArr</span>(vm, value);</span><br><span class="line"></span><br><span class="line">el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, classArr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">trim</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;style&#x27;</span>:</span><br><span class="line"><span class="keyword">let</span> styleStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable constant_">REG_OBJ</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line"><span class="keyword">const</span> styleObj = <span class="title function_">renderObj</span>(vm, value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> styleObj) &#123;</span><br><span class="line">styleStr += <span class="string">`<span class="subst">$&#123;transformToKebab(key)&#125;</span>:<span class="subst">$&#123;styleObj[key]&#125;</span>;`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">REG_ARRAY</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line"><span class="keyword">const</span> styleArr = <span class="title function_">renderArr</span>(vm, value);</span><br><span class="line"></span><br><span class="line">styleArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> item) &#123;</span><br><span class="line">styleStr += <span class="string">`<span class="subst">$&#123;transformToKebab(key)&#125;</span>:<span class="subst">$&#123;item[key]&#125;</span>;`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, styleStr);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderArr</span> (vm, value) &#123;</span><br><span class="line"><span class="comment">// 形成作用域可以访问到vm</span></span><br><span class="line"><span class="keyword">const</span> _arr = (<span class="keyword">new</span> <span class="title class_">Function</span> (</span><br><span class="line"><span class="string">&#x27;vm&#x27;</span>,</span><br><span class="line"><span class="string">`with (vm) &#123;</span></span><br><span class="line"><span class="string">return <span class="subst">$&#123;value&#125;</span></span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line">))(vm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤空字符串</span></span><br><span class="line"><span class="keyword">return</span> _arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderObj</span> (vm, value) &#123;</span><br><span class="line"><span class="comment">// 形成作用域可以访问到vm</span></span><br><span class="line"><span class="keyword">return</span> _arr = (<span class="keyword">new</span> <span class="title class_">Function</span> (</span><br><span class="line"><span class="string">&#x27;vm&#x27;</span>,</span><br><span class="line"><span class="string">`with (vm) &#123;</span></span><br><span class="line"><span class="string">return <span class="subst">$&#123;value&#125;</span></span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line">))(vm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="regularjs"><a class="markdownIt-Anchor" href="#regularjs"></a> regular.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有空格</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REG_SPACE</span> = <span class="regexp">/\s+/g</span>; </span><br><span class="line"><span class="comment">// 大括号开头 并且 大括号结尾，拿到内部所有的字符</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REG_OBJ</span> = <span class="regexp">/^\&#123;(.+?)\&#125;$/</span>;</span><br><span class="line"><span class="comment">// 中括号开头 并且 中括号结尾，拿到内部所有字符</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REG_ARRAY</span> = <span class="regexp">/^\[(.+?)\]$/</span>;</span><br><span class="line"><span class="comment">// 子表达式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REG_UPPERCASE</span> = <span class="regexp">/([A-Z])/g</span>;</span><br></pre></td></tr></table></figure><h4 id="utilsjs"><a class="markdownIt-Anchor" href="#utilsjs"></a> utils.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REG_UPPERCASE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./regular&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span> (value) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) === <span class="string">&#x27;[object Object]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">transformToKebab</span> (key) &#123;</span><br><span class="line"><span class="keyword">return</span> key.<span class="title function_">replace</span>(<span class="variable constant_">REG_UPPERCASE</span>, <span class="string">&#x27;-$1&#x27;</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="updatejs"><a class="markdownIt-Anchor" href="#updatejs"></a> update.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; compileAttr &#125; <span class="keyword">from</span> <span class="string">&#x27;./compile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">attrUpdate</span> (vm, key) &#123;</span><br><span class="line"><span class="keyword">const</span> _stylePool = vm.<span class="property">$stylePool</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [ k, v ] <span class="keyword">of</span> _stylePool) &#123;</span><br><span class="line"><span class="comment">// k: 节点</span></span><br><span class="line"><span class="comment">// v：type、expression</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v.<span class="property">expression</span>.<span class="title function_">indexOf</span>(key) !== -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="title function_">comileAttr</span>(vm, k, v.<span class="property">type</span>, v.<span class="property">expression</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/posts/6208627e/index.html"/>
      <url>/posts/6208627e/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="责任链模式"><a class="markdownIt-Anchor" href="#责任链模式"></a> 责任链模式</h1><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><ul><li>需求：<ul><li>充值500（orderType = 1），100%（isPay充值成功）得100的优惠劵</li><li>充值200（orderType = 2），100%（isPay充值成功）得20的优惠劵</li><li>不充值（orderType = 3），根据优惠券的库存（count）来决定，会有10的优惠券</li></ul></li></ul><h3 id="正常实现"><a class="markdownIt-Anchor" href="#正常实现"></a> 正常实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：该函数非常混乱，没有流程，没法扩展</p></blockquote><h3 id="抽象流程函数实现"><a class="markdownIt-Anchor" href="#抽象流程函数实现"></a> 抽象流程函数实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">order200</span>(orderType, isPay, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">orderNormal</span>(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">order500</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 恭喜中奖100优惠券</span></span><br><span class="line"><span class="title function_">order500</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>); <span class="comment">// 恭喜中奖10优惠券</span></span><br><span class="line"><span class="title function_">order500</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// 很遗憾没有优惠券</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：抽象流程函数，易读，易扩展；但是他要修改源代码扩展，还是不好</p></blockquote><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Chain 类: 抽象一条线(链条)</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chain</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> (fn) &#123;</span><br><span class="line"><span class="comment">// 通过每一个函数来把他包装成一条线，这个线会有当前的节点，会有指向的下一个节点（链条）</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定下一个Chain</span></span><br><span class="line">setNext (nextChain) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next</span> = nextChain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让整个函数流程执行</span></span><br><span class="line">passRequest () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>); <span class="comment">// 指向实例化对象 Chain &#123; fn: ƒ (orderType, isPay, count), next: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="variable language_">this</span>.<span class="property">fn</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// apply这里的传的this可以为null，但是为了以后可能会用到所以就传递了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">next</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">passRequest</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">next</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> <span class="title class_">Chain</span>(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> <span class="title class_">Chain</span>(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> <span class="title class_">Chain</span>(orderNormal);</span><br><span class="line"></span><br><span class="line">chainOrder500.<span class="title function_">setNext</span>(chainOrder200);</span><br><span class="line">chainOrder200.<span class="title function_">setNext</span>(chainOrderNormal);</span><br><span class="line"></span><br><span class="line">chainOrder500.<span class="title function_">passRequest</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);</span><br><span class="line">chainOrder500.<span class="title function_">passRequest</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>);</span><br><span class="line">chainOrder500.<span class="title function_">passRequest</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="责任链概念"><a class="markdownIt-Anchor" href="#责任链概念"></a> 责任链概念</h2><ul><li>明确划分每一链条中的责任，把每一个具体处理的情况处理，处理不了就往下执行</li></ul><blockquote><p>总结：扩展时不需要改动核心源代码（Chain类），易于扩展；</p></blockquote><h2 id="aop面向切面编程"><a class="markdownIt-Anchor" href="#aop面向切面编程"></a> AOP：面向切面编程</h2><ul><li>确定函数的执行顺序</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span> () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span> () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="variable language_">this</span>; <span class="comment">// test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">_this.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="variable language_">this</span>; <span class="comment">// before 执行后返回的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">_this.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">test</span>: test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testFn = obj.<span class="property">test</span>.<span class="title function_">before</span>(test1).<span class="title function_">after</span>(test3);</span><br><span class="line">testFn.<span class="title function_">call</span>(obj, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br></pre></td></tr></table></figure><h2 id="通过aop优化责任链"><a class="markdownIt-Anchor" href="#通过aop优化责任链"></a> 通过AOP优化责任链</h2><blockquote><p>责任链优化</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖100优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; isPay === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖20优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 统一约定：返回一个字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">orderType, isPay, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜中奖10优惠券&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾没有优惠券&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 原函数执行</span></span><br><span class="line"><span class="keyword">var</span> res = _this.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res === <span class="string">&#x27;next&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 传入的函数继续调用fn （下一个函数）</span></span><br><span class="line"><span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order = order500</span><br><span class="line">.<span class="title function_">after</span>(order200)</span><br><span class="line">.<span class="title function_">after</span>(orderNormal);</span><br><span class="line"></span><br><span class="line"><span class="title function_">order</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);</span><br><span class="line"><span class="title function_">order</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>);</span><br><span class="line"><span class="title function_">order</span>(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-optionsAPI之computed、watch类方式实现</title>
      <link href="/posts/f907b889/index.html"/>
      <url>/posts/f907b889/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="vue-optionsapi之computed-watch类方式实现"><a class="markdownIt-Anchor" href="#vue-optionsapi之computed-watch类方式实现"></a> vue-optionsAPI之computed、watch类方式实现</h1><h2 id="watch与computed区别"><a class="markdownIt-Anchor" href="#watch与computed区别"></a> watch与computed区别</h2><ul><li>watch侦听器：<ul><li>【数据更新】：给数据绑定侦听器，当数据变更时，侦听器函数执行</li><li>【特点】：数据更新时，完成什么逻辑</li><li>【使用时机】：监听一个数据的变化，变化后干什么</li></ul></li><li>computed计算属性：<ul><li>【模板template】：抽离复用模板中复杂的逻辑运算</li><li>【特点】：当函数的依赖更新后，computed函数重新执行</li><li>【使用时机】：专注视图部分的复杂运算逻辑</li></ul></li></ul><h2 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h2><blockquote><p>用类的方式实现</p></blockquote><ol><li><p>Vue constructor中接收options参数</p><ul><li>从options解构data、computed、watch</li><li>执行init()初始化函数</li></ul></li><li><p>init()函数</p><ul><li>initData函数实现data数据响应</li><li>执行initComputed初始化函数，并执行computed实例上的update方法</li><li>执行initWatcher初始化函数，并执行watcher实例上的invoke方法</li></ul></li><li><p>initData函数</p><ul><li>reactive函数处理data响应性</li></ul></li><li><p>reactive函数</p><ul><li>处理data响应性，并且需要暴露两个接口</li><li>接口1：get的时候执行的函数，并将key跟value作为形参</li><li>接口2：set的时候执行的函数，将key跟newValue、oldValue作为形参；主要是用来触发内部computed函数跟内部watch函数</li></ul></li><li><p>initComputed函数</p><ul><li>实例化Computed类，枚举computed属性并且执行每一次实例化对象下的addComputed方法，并返回实例</li></ul></li><li><p>initWatcher函数</p><ul><li>实例化Watcher类，枚举watch属性并且执行每一项实例化对象下的invoke方法，并返回实例</li></ul></li><li><p>Computed类</p><ul><li>constructor中保存computedData数据池</li><li>addComputed函数：<ul><li>处理computedData，提取_addComputedProp方法<ul><li>key：计算属性</li><li>value：计算值</li><li>get：computed函数</li><li>dep：[ 依赖 ]，提取_collectionDep方法</li></ul></li><li>computed属性挂载到实例</li><li>访问vm.total时，实现响应性，注意set的时候要执行对应的get函数，不需要赋newValue值</li></ul></li><li>update(key, watch)函数<ul><li>dep依赖变更的时候，重新执行watch函数</li></ul></li></ul></li><li><p>Watcher类</p><ul><li>constructor中保存watchers数据池</li><li>addWatcher函数：<ul><li>处理watchers数据，提取_addWatchProp方法<ul><li>key：watch函数名</li><li>fn：watch函数</li></ul></li></ul></li><li>invoke函数：<ul><li>处理watchers数据池，对比key是否相等，则执行fn</li></ul></li></ul></li></ol><h3 id="入口函数srcmainjs"><a class="markdownIt-Anchor" href="#入口函数srcmainjs"></a> 入口函数src/main.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">total () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">total2</span>: &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">total (newValue, oldValue) &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">a (newValue, oldValue) &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">b (newValue, oldValue) &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"></span><br><span class="line">vm.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"></span><br><span class="line">vm.<span class="property">b</span> = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">total</span>);</span><br></pre></td></tr></table></figure><h3 id="实现数据响应式-reactivejs"><a class="markdownIt-Anchor" href="#实现数据响应式-reactivejs"></a> 实现数据响应式 reactive.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span> (vm, __get__, __set__) &#123;</span><br><span class="line"><span class="keyword">const</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="comment">// 实现reactive方法的时候要留接口回调</span></span><br><span class="line"><span class="title function_">__get__</span>(key, _data[key]);</span><br><span class="line"><span class="keyword">return</span> _data[key];</span><br><span class="line">&#125;,</span><br><span class="line">set (newValue) &#123;</span><br><span class="line"><span class="keyword">const</span> oldValue = _data[key];</span><br><span class="line">oldValue = newValue;</span><br><span class="line"><span class="comment">// 更新computedData</span></span><br><span class="line"><span class="comment">// 调用watcher</span></span><br><span class="line"><span class="comment">// 实现reactive方法的时候要留接口回调</span></span><br><span class="line"><span class="title function_">__set__</span>(key, newValue, oldValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现computed计算属性特性"><a class="markdownIt-Anchor" href="#实现computed计算属性特性"></a> 实现computed计算属性特性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computed</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> (options) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * computedData:</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * key: total,</span></span><br><span class="line"><span class="comment"> * value: 3,</span></span><br><span class="line"><span class="comment"> * get: total fn,</span></span><br><span class="line"><span class="comment"> * dep: [a, b]</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">computedData</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addComputed (vm, computed, key) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(computed, key),</span><br><span class="line"><span class="comment">// 通过fn来计算value</span></span><br><span class="line">descriptorFn = descriptor.<span class="property">value</span>.<span class="property">get</span> </span><br><span class="line"> ? descriptor.<span class="property">value</span>.<span class="property">get</span></span><br><span class="line"> : descriptor.<span class="property">value</span>,</span><br><span class="line"><span class="comment">// descriptorFn的this指向window</span></span><br><span class="line">value = descriptorFn.<span class="title function_">call</span>(vm),</span><br><span class="line">get = descriptorFn.<span class="title function_">bind</span>(vm),</span><br><span class="line">dep = <span class="variable language_">this</span>.<span class="title function_">_collectDep</span>(descriptorFn);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_addComputedProp</span>(&#123;</span><br><span class="line">key,</span><br><span class="line">value,</span><br><span class="line">get,</span><br><span class="line">dep</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// total挂载到实例</span></span><br><span class="line"><span class="keyword">const</span> dataItem = <span class="variable language_">this</span>.<span class="property">computedData</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">key</span> === key);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> dataItem.<span class="property">value</span>;</span><br><span class="line">&#125;,</span><br><span class="line">set () &#123;</span><br><span class="line">dataItem.<span class="property">value</span> = dataItem.<span class="title function_">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update (key, watch) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">computedData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> dep = itme.<span class="property">dep</span>;</span><br><span class="line"><span class="keyword">const</span> _key = dep.<span class="title function_">find</span>(<span class="function"><span class="params">el</span> =&gt;</span> el == key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_key) &#123;</span><br><span class="line"><span class="comment">// 依赖变更的时候，重新执行getter函数</span></span><br><span class="line"><span class="keyword">const</span> oldValue = item.<span class="property">value</span>;</span><br><span class="line">item.<span class="property">value</span> = item.<span class="title function_">get</span>();</span><br><span class="line"><span class="title function_">watch</span>(item.<span class="property">key</span>, item.<span class="property">value</span>, oldValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_addComputedProp (computedProp) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">computedData</span>.<span class="title function_">push</span>(computedProp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line">_collectDep (fn) &#123;</span><br><span class="line"><span class="comment">// 匹配 this. 字符</span></span><br><span class="line"><span class="comment">// \ 转义 .</span></span><br><span class="line"><span class="comment">// . 匹配.后边的任意字符</span></span><br><span class="line"><span class="comment">// + 出现一次或多次 </span></span><br><span class="line"><span class="comment">// ? 非贪婪模式</span></span><br><span class="line"><span class="comment">// g 全局匹配</span></span><br><span class="line"><span class="keyword">const</span> matched = fn.<span class="title function_">toString</span>().<span class="title function_">match</span>(<span class="regexp">/this\.(.+?)/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> matched.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Computed</span>;</span><br></pre></td></tr></table></figure><h3 id="实现watch侦听器特性"><a class="markdownIt-Anchor" href="#实现watch侦听器特性"></a> 实现watch侦听器特性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> () &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * key,</span></span><br><span class="line"><span class="comment"> * fn: get Fn</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">watchers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addWatcher (vm, watcher, key) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_addWatchProp</span>(&#123;</span><br><span class="line">key,</span><br><span class="line"><span class="attr">fn</span>: watcher[key].<span class="title function_">bind</span>(vm)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">invoke (key, newValue, oldValue) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.<span class="property">key</span> === key) &#123;</span><br><span class="line">item.<span class="title function_">fn</span>(newValue, oldValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_addWatchProp (watchProp) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">push</span>(watchProp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Watcher</span>;</span><br></pre></td></tr></table></figure><h3 id="实现类vue"><a class="markdownIt-Anchor" href="#实现类vue"></a> 实现类Vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Computed</span> <span class="keyword">from</span> <span class="string">&#x27;./Computed&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Watcher</span> <span class="keyword">from</span> <span class="string">&#x27;./Watcher&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span> (options) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; data, computed, watch &#125; = options;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span> = <span class="title function_">data</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>, computed, watch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init (vm, computed, watch) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">initData</span>(vm);</span><br><span class="line"><span class="keyword">const</span> computedIns = <span class="variable language_">this</span>.<span class="title function_">initComputed</span>(vm, computed);</span><br><span class="line"><span class="keyword">const</span> watcherIns = <span class="variable language_">this</span>.<span class="title function_">initWatcher</span>(vm, watch);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$computed</span> = computedIns.<span class="property">update</span>.<span class="title function_">bind</span>(computedIns);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$watch</span> = watcherIns.<span class="property">invoke</span>.<span class="title function_">bind</span>(watcherIns);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式数据处理</span></span><br><span class="line">initData (vm) &#123;</span><br><span class="line"><span class="comment">// 实现reactive方法的时候要留接口回调</span></span><br><span class="line"><span class="title function_">reactive</span>(vm, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function">(<span class="params">key, newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (newValue === oldValue) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.$computed(key, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$watch</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">this</span>.$watch(key, newValue, oldValue);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举computed 增加computedData</span></span><br><span class="line"><span class="comment"> * 返回实例 实例有update方法 可以更新computedData的value 同时也是在更新实例上挂载的computed属性</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">initComputed (vm, computed) &#123;</span><br><span class="line"><span class="keyword">const</span> computedIns = <span class="keyword">new</span> <span class="title class_">Computed</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line"><span class="title function_">computedIns</span>(vm, computed, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> computedIns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举watch 增加侦听器</span></span><br><span class="line"><span class="comment"> * 返回实例 实例有调用watch的方法 执行侦听器</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">initWatcher (vm, watch) &#123;</span><br><span class="line"><span class="keyword">const</span> watcherIns = <span class="keyword">new</span> <span class="title class_">Watcher</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> watch) &#123;</span><br><span class="line">watcherIns.<span class="title function_">addWatcher</span>(vm, watch, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> watcherIns;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * data -&gt; fn -&gt; vm.$data -&gt; reactive -&gt; vm.xxx</span></span><br><span class="line"><span class="comment"> * get vm[key] -&gt; vm.$data[key]</span></span><br><span class="line"><span class="comment"> * set vm[key] -&gt; vm.$data[key] = newValue</span></span><br><span class="line"><span class="comment"> * updateComputedProp -&gt; value</span></span><br><span class="line"><span class="comment"> * updateWatchProp -&gt; callback</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * computed -&gt; props -&gt; &#123;</span></span><br><span class="line"><span class="comment"> * value: get value</span></span><br><span class="line"><span class="comment"> * get: method</span></span><br><span class="line"><span class="comment"> * dep: []</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * watch -&gt; props -&gt; fn -&gt; data set -&gt; call fn</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-optionsAPI之computed实现</title>
      <link href="/posts/e99c9c30/index.html"/>
      <url>/posts/e99c9c30/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="vue计算属性computed实现"><a class="markdownIt-Anchor" href="#vue计算属性computed实现"></a> vue计算属性computed实现</h1><h2 id="表现"><a class="markdownIt-Anchor" href="#表现"></a> 表现</h2><ol><li>计算属性：解决模板中复杂的逻辑运算及复用的问题</li><li>计算属性只在内部逻辑依赖的数据发生变化的时候才会被再次调用</li><li>计算属性会缓存其依赖的上一次计算出的数据结果</li><li>多次复用一个相同值的数据，计算属性只调用一次</li><li>计算属性直接挂载在实例上</li></ol><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><h3 id="重点"><a class="markdownIt-Anchor" href="#重点"></a> 重点</h3><ol><li><p>数据得缓存：computed方法不会进入到data中去，所以需要有个容器来保存</p><ul><li>computedData<ul><li>value：计算结果</li><li>get：get函数</li><li>dep：收集computed函数依赖</li></ul></li></ul></li><li><p>get函数中的依赖发生变化后，就得重新调用计算方法</p></li></ol><h3 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h3><ol><li>对data进行响应式处理<ul><li>setter触发后，需要调用update方法更新视图</li><li>setter触发后，需要调用updateComputedData方法更新computedData每一项下的dep依赖，发现新的key匹配到dep中的依赖，就重新update视图</li></ul></li><li>将computed函数缓存到computedData中，以及get函数、dep依赖</li><li>对computedData进行响应式处理，访问或者更新实例上的computed值的时候，直接访问computedData保存好的（将computed计算属性值挂载到vm实例上）</li><li>render渲染视图</li><li>创建div并赋值innerHTML为template</li><li>编译模板<ul><li>遍历所有的节点，保存<code>&#123;&#123;&#125;&#125;</code>中的dom</li></ul></li><li>挂载div到$el</li></ol><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Vue</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配双大括号以内的所有字符</span></span><br><span class="line"><span class="keyword">var</span> reg_var = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * compuData：私有变量</span></span><br><span class="line"><span class="comment"> * computed里的方法并不会进入到data中去，所以要有个容器来存储</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * total: &#123;</span></span><br><span class="line"><span class="comment"> * value: 函数执行返回的结果</span></span><br><span class="line"><span class="comment"> * get: get 依赖变化一定要执行getter</span></span><br><span class="line"><span class="comment"> * dep: [&#x27;a&#x27;, &#x27;b&#x27;] 保存依赖【相当于data里的key】，监控a，b，只要变化就去调用get，重新赋值，total就会更改，那么视图就会更改</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> computedData = &#123;&#125;;</span><br><span class="line"><span class="comment">// 让数据属性对应节点DOM 当数据改变时更新DOM</span></span><br><span class="line"><span class="keyword">var</span> dataPool = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vue = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="title function_">data</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// template跟computed是不可以挂载到实例上的</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_init</span>(<span class="variable language_">this</span>, options.<span class="property">computed</span>, options.<span class="property">template</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">vm, computed, template</span>) &#123;</span><br><span class="line"><span class="title function_">dataReactive</span>(vm);</span><br><span class="line"><span class="title function_">computedReactive</span>(vm, computed);</span><br><span class="line"><span class="title function_">render</span>(vm, template);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (vm, template) &#123;</span><br><span class="line"><span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">_el = vm.<span class="property">$el</span>;</span><br><span class="line"></span><br><span class="line">container.<span class="property">innerHTML</span> = template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> domTree = <span class="title function_">_compileTemplate</span>(vm, container);</span><br><span class="line"></span><br><span class="line">_el.<span class="title function_">appendChild</span>(domTree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在data更新的时候,视图也要更新,computedData也会更新,计算属性也会更新</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span> (vm, key) &#123;</span><br><span class="line">dataPool[key].<span class="property">textContent</span> = vm[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译模板</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_compileTemplate</span> (vm, container) &#123;</span><br><span class="line"><span class="keyword">var</span> allNodes = container.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>),</span><br><span class="line">nodeItem = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allNodes.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">nodeItem = allNodes[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配不出双大括号就没必要处理</span></span><br><span class="line"><span class="keyword">var</span> matched = nodeItem.<span class="property">textContent</span>.<span class="title function_">match</span>(reg_var); <span class="comment">// [&#x27;&#123; a &#125;&#x27;, ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (matched) &#123;</span><br><span class="line">nodeItem.<span class="property">textContent</span> = nodeItem.<span class="property">textContent</span>.<span class="title function_">replace</span>(reg_var, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123;</span><br><span class="line"><span class="comment">// 收集有 &#123;&#123;&#125;&#125; 需要响应式的DOM</span></span><br><span class="line">dataPool[key.<span class="title function_">trim</span>()] = nodeItem;</span><br><span class="line"><span class="comment">// 将 &#123;&#123;&#125;&#125; 整体替换为vm上保存的对应的计算属性值</span></span><br><span class="line"><span class="keyword">return</span> vm[key.<span class="title function_">trim</span>()];</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dataReactive</span> (vm) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line"><span class="comment">// key 内部临时局部变量</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> _data[key];</span><br><span class="line">&#125;,</span><br><span class="line">set (newValue) &#123;</span><br><span class="line">_data[key] = newValue;</span><br><span class="line"><span class="title function_">update</span>(vm, key);</span><br><span class="line"><span class="title function_">_updateComputedData</span>(vm, key, <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title function_">update</span>(vm, key)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computedReactive</span> (vm, computed) &#123;</span><br><span class="line"><span class="title function_">_initComputedData</span>(vm, computed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> computedData) &#123;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">get () &#123;</span><br><span class="line"><span class="keyword">return</span> computedData[key].<span class="property">value</span>;</span><br><span class="line">&#125;,</span><br><span class="line">set (newValue) &#123;</span><br><span class="line">computedData[key].<span class="property">value</span> = newValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_initComputedData</span> (vm, computed) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line"><span class="comment">// 因为computed可能是get函数也可能是值value</span></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(computed, key);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * computed: &#123;</span></span><br><span class="line"><span class="comment"> * total () &#123;</span></span><br><span class="line"><span class="comment"> * return this.a + this.b;</span></span><br><span class="line"><span class="comment"> * &#125;,</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * total: &#123;</span></span><br><span class="line"><span class="comment"> * get () &#123;</span></span><br><span class="line"><span class="comment"> * return this.a + this.b;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span>descriptorFn = descriptor.<span class="property">value</span>.<span class="property">get</span> </span><br><span class="line">? descriptor.<span class="property">value</span>.<span class="property">get</span></span><br><span class="line">: descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * total: &#123;</span></span><br><span class="line"><span class="comment"> * value</span></span><br><span class="line"><span class="comment"> * get: get</span></span><br><span class="line"><span class="comment"> * dep: [&#x27;a&#x27;, &#x27;b&#x27;] </span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">computedData[key] = &#123;&#125;;</span><br><span class="line"><span class="comment">// descriptorFn的this指向descriptor这个对象，要更改this指向到实例vm，因为total里要使用this</span></span><br><span class="line">computedData[key].<span class="property">value</span> = descriptorFn.<span class="title function_">call</span>(vm);</span><br><span class="line">computedData[key].<span class="property">get</span> = descriptorFn.<span class="title function_">bind</span>(vm);</span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line">computedData[key].<span class="property">dep</span> = <span class="title function_">_collectDep</span>(descriptorFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_collectDep</span> (fn) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匹配this.</span></span><br><span class="line"><span class="comment"> * . 任意字符</span></span><br><span class="line"><span class="comment"> * * 出现一次或多次</span></span><br><span class="line"><span class="comment"> * ? 非贪婪模式</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">var</span> _collection = fn.<span class="title function_">toString</span>().<span class="title function_">match</span>(<span class="regexp">/this.(.*?)/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_collection.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _collection.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">_collection[i] = _collection[i].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _collection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_updateComputedData</span> (vm, key, update) &#123;</span><br><span class="line"><span class="keyword">var</span> _dep = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _key <span class="keyword">in</span> computedData) &#123;</span><br><span class="line">_dep = computedData[_key].<span class="property">dep</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _dep.<span class="property">length</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (_dep[i] === key) &#123;</span><br><span class="line">vm[_key] = computedData[_key].<span class="title function_">get</span>();</span><br><span class="line"><span class="title function_">update</span>(_key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Vue</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. JavaScript概述</title>
      <link href="/posts/524d20fb/index.html"/>
      <url>/posts/524d20fb/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="javascript概述"><a class="markdownIt-Anchor" href="#javascript概述"></a> JavaScript概述</h1><h2 id="一-javascript特点"><a class="markdownIt-Anchor" href="#一-javascript特点"></a> 一、JavaScript特点</h2><h3 id="1-函数优先-first-class-function头等函数"><a class="markdownIt-Anchor" href="#1-函数优先-first-class-function头等函数"></a> 1、函数优先 （First-class Function头等函数）</h3><ul><li>函数可作为参数</li><li>函数可作为返回值</li><li>函数可赋值给变量</li></ul><h3 id="2-轻量级"><a class="markdownIt-Anchor" href="#2-轻量级"></a> 2、轻量级</h3><ul><li>弱类型</li><li>语法简单、灵活（但是设计是最难的）</li><li>容错率高</li><li>语言核心内容少</li></ul><h3 id="3-解释型"><a class="markdownIt-Anchor" href="#3-解释型"></a> 3、解释型</h3><ul><li>无编译过程（开发者的角度来看）</li><li>运行时进行解释执行（预编译、刚刚要开始运行的那一刻）</li></ul><h3 id="4-宿主多样性"><a class="markdownIt-Anchor" href="#4-宿主多样性"></a> 4、宿主多样性</h3><ul><li>浏览器（JS引擎专门负责解析，以前是跑在渲染引擎上，ie4以后就独立出了JS引擎）</li><li>服务器（谷歌开发v8引擎放到服务器上，JS就可以在服务器上跑了 -&gt; NodeJS）</li></ul><h3 id="5-基于原型"><a class="markdownIt-Anchor" href="#5-基于原型"></a> 5、基于原型</h3><ul><li>面向对象的操作与访问体系是基于原型链</li></ul><h3 id="6-多范式"><a class="markdownIt-Anchor" href="#6-多范式"></a> 6、多范式</h3><ul><li>支持过程化编程</li><li>支持面向对象编程</li><li>支持函数式编程</li></ul><h3 id="7-单线程"><a class="markdownIt-Anchor" href="#7-单线程"></a> 7、单线程</h3><ul><li>JavaScript引擎线程是单线程，同一时间只能执行一个任务</li></ul><h3 id="8-动态化"><a class="markdownIt-Anchor" href="#8-动态化"></a> 8、动态化</h3><ul><li>运行时确定数据类型</li></ul><h2 id="二-javascript发展史"><a class="markdownIt-Anchor" href="#二-javascript发展史"></a> 二、JavaScript发展史</h2><h3 id="1992"><a class="markdownIt-Anchor" href="#1992"></a> 1992</h3><ul><li>Nombas开发了Cmm嵌入式脚本，然后改名为ScriptEase。他运行在CEnvi共享软件中，开发了一个CEnvi嵌入网页版本扩展</li><li>为了软件的运行环境而开发的<ul><li>浏览器第一个脚本语言：ScriptEase</li><li>他并不是单纯的运行在浏览器中，他需要依赖一个CEnvi共享软件才能运行</li></ul></li></ul><h3 id="19952"><a class="markdownIt-Anchor" href="#19952"></a> 1995.2</h3><ul><li>起因：网景公司的Netscape需要处理表单，每一次提交都要提交服务器，去验证用户名密码格式是否正确，必须要提交到后端，然后验证了在返回前端，他需要跳转网页，这是利用网页跳转来实现的。但是网景认为浏览器不是应该这样的，应该是前端由一个专门的机制去处理我们的这个表单验证，然后表单验证成功之后才能将表单提交给服务器。</li><li>目标：处理表单验证</li><li>方案：浏览器脚本驱动<ul><li>网景公司认为浏览器需要脚本驱动来处理表单验证</li><li>Brendan Eich开发处理表单验证的一种语言，用来放到Netscape中去。</li><li>十天时间开发Mocha处理表单验证，后来改名LiveScript，这是真正意义上的第一款浏览器</li></ul></li></ul><p><img src="https://s1.ax1x.com/2023/04/25/p9uaKZn.md.png#id=cHNMh&amp;originHeight=986&amp;originWidth=680&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" /></p><h3 id="javascript的发明是一种强借鉴"><a class="markdownIt-Anchor" href="#javascript的发明是一种强借鉴"></a> JavaScript的发明是一种强借鉴</h3><ol><li>C的基本语法：简介的语法规则</li><li>Java的数据类型与内存管理：动态内存管理</li><li>Scheme的函数优先：函数式编程（Brendan不喜欢Java语言，他借鉴了Scheme语言的函数优先，开发的JavaScript）</li><li>Self语言的原型机制：面向对象</li></ol><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><ol><li>原本是基于Scheme开发</li><li>Netscape与Sun合作</li><li>基于Java开发新语言（Mocha）</li><li>Eich反对（本人觉得Java难上手）</li><li>Eich开发LiveScript（Netscape Navigator 2.0）</li><li>Netscape与Sun完成对LiveScript的实现</li></ol><h3 id="改名javascript"><a class="markdownIt-Anchor" href="#改名javascript"></a> 改名JavaScript</h3><ol><li>时间：1995 - Netscape Navigator 2.0 发布之前</li><li>原因：Java流行性高，并属于Sun公司的，JavaScript名称推广回报率高</li></ol><h3 id="1995"><a class="markdownIt-Anchor" href="#1995"></a> 1995</h3><ul><li>网景将JavaScript作为草案提交给ECMA【European Computer Manufacturers Association 欧洲计算机制造商协会】<ul><li>1961年设立在日内瓦</li><li>国机性会员制度的信息和电信标准组织</li></ul></li></ul><h3 id="1996"><a class="markdownIt-Anchor" href="#1996"></a> 1996</h3><ul><li><p>微软仿造JavaScript创造JScript（运行在IE11记老版本）</p></li><li><p>混乱现象</p><ol><li>Netscape：JavaScript</li><li>Microsoft：JScript</li><li>CEnvi：ScriptEase</li></ol></li></ul><blockquote><p>没有统一的脚本语言标准（弱类型语言，解析一行执行一行，辅助机器或者领域完成某一种功能）</p></blockquote><ul><li>什么是脚本？<ul><li>表演：帮助你完成表演的台本、剧本。</li><li>脚本：你完成一个程序，这个程序是要依赖某一个宿主的，这个宿主需要一个文案，这个文案就是脚本语言来完成宿主想要完成的程序功能</li><li>服务器也有脚本语言，比如php，解释型语言，读一行执行一行</li></ul></li></ul><h3 id="1997"><a class="markdownIt-Anchor" href="#1997"></a> 1997</h3><ul><li>JavaScript1.1作为草案提交给ECMA</li><li>TC39技术委员会（Technical Committee）：Netscape、Microsoft、Sun等<ul><li>制定ECMA-262标准（所有的计算机脚本语言的标准）</li><li>定义ECMAScript脚本语言，是JavaScript技术的语言基础</li></ul></li></ul><blockquote><p>JavaScript是Sun公司的商标，所以TC39委员会是没有权利将ECMAScript定义为JavaScript，所以制定了ECMAScript</p></blockquote><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>从此，JavaScript是一门计算机编程技术</li><li>泛指ECMAScript语言</li></ul><h3 id="19976"><a class="markdownIt-Anchor" href="#19976"></a> 1997.6</h3><ul><li>ECMA-262 Version 1</li><li>对应了Netscape JavaScript 1.1<ul><li>标准中删除所有针对浏览器的代码（API，比如DOM操作）</li><li>支持Unicode标准</li><li>严格化对象与平台无关性</li></ul></li></ul><h3 id="19988"><a class="markdownIt-Anchor" href="#19988"></a> 1998.8</h3><ul><li>ECMA-262 Version 2<ul><li>对标准进行加工，无实质更新</li></ul></li></ul><h3 id="199912"><a class="markdownIt-Anchor" href="#199912"></a> 1999.12</h3><ul><li>ECMA-262 Version 3 - ES3（正式成为一门语言）<ul><li>字符串处理API</li><li>正则表达式</li><li>控制语句</li><li>异常处理</li></ul></li><li>ECMA-262 Version 4 - ES4 / ES3.1（跨度大，现有JS引擎实现难度大，最终搁浅）<ul><li>强类型化</li><li>新数据结构（Map、Set）</li><li>类</li></ul></li></ul><h3 id="200912"><a class="markdownIt-Anchor" href="#200912"></a> 2009.12</h3><ul><li>ECMA-262 Version 3.1 - ES5<ul><li>Oracle收购SUn，JavaScript商标归属Oracle</li><li>Ryan Dahl基于V8引擎开发了NodeJS<ul><li>支持JSON对象</li><li>严格模式</li><li>补充解释JS引擎如何解释和执行代码</li></ul></li></ul></li></ul><h3 id="20116"><a class="markdownIt-Anchor" href="#20116"></a> 2011.6</h3><ul><li>ECMA-262 Version 5 - ES5.1（落地最终版本）<ul><li>对规范进行修订，无实质更新</li></ul></li></ul><h3 id="20156"><a class="markdownIt-Anchor" href="#20156"></a> 2015.6</h3><ul><li>NodeJS Version 1.0发布（服务端商业化时代）</li><li>ECMA-262 Version 6 - ES6 / ES2015<ul><li>新的变量声明（新特性）</li><li>类（语法糖）</li><li>模块化（新特性）</li><li>箭头函数（新特性）</li><li>异步（语法糖）</li><li>解构（新特性）</li><li>模板字符串（语法糖）</li><li>新的数据结构（语法糖+新特性）</li></ul></li></ul><h2 id="三-编程语言"><a class="markdownIt-Anchor" href="#三-编程语言"></a> 三、编程语言</h2><ul><li><p>编程语言</p><ul><li>用一种特定编码方式，可以通过编译或解释，生成计算机系统可运行程序的规范集合</li></ul></li><li><p>低级语言</p><ul><li>机器语言：计算机唯一能识别的二进制指令集体系（0和1）</li><li>汇编语言：符号化的机器语言需要翻译成机器码</li></ul></li><li><p>高级语言</p><ul><li>脱离于机器，以人易于理解为本，类似于日常会话，通过编译或解释器可转换成机器码的计算机语言。</li><li>C、C++、Java、Go、Python、JavaScript、php</li></ul></li></ul><p>静态语言：（强类型语言）</p><ol><li>需编译</li><li>编译前确定变量类型</li></ol><p>动态语言：（弱类型语言）</p><ol><li>无需编译</li><li>变量类型由运行时解释推断</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript - 【新】颠覆认知的JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 【新】颠覆认知的JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue指令v-if、v-show实现</title>
      <link href="/posts/e013d13/index.html"/>
      <url>/posts/e013d13/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="vue指令v-if-v-show实现"><a class="markdownIt-Anchor" href="#vue指令v-if-v-show实现"></a> vue指令v-if、v-show实现</h1><h2 id="表现"><a class="markdownIt-Anchor" href="#表现"></a> 表现</h2><ul><li>v-if: 用注释节点占位</li><li>v-show: 添加display: none</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ol><li><p>对data进行数据劫持</p></li><li><p><code>data () &#123;&#125;</code> 他要执行掉，结果放到$data上，最终挂载到实例vm上</p></li><li><p><code>methods () &#123;&#125;</code> 编译完后他里边的所有方法要放到实例上去的，因为他是方便你本身实例方法就可以直接访问。 this -&gt; vm -&gt; showImg2 -&gt; showImg1 -&gt; vm</p></li><li><p>分析抽象语法树，找到元素绑定的<code>v-if|v-show</code>以及<code>@click</code>事件处理函数</p></li><li><p>分别存储到<code>showPool</code>和<code>eventPool</code>中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1. 数据劫持 更新视图</span><br><span class="line"> * 2. 有一个容器showPool，装一个DOM对应一个数据信息（type: if/show），还有就是给DOM绑定prop，也就是data里的数据。（vue是进行分析字符串） </span><br><span class="line"> * 3. 有一个容器eventPool，一个DOM对应一个handler事件处理函数</span><br><span class="line"> * showPool:</span><br><span class="line"> * [</span><br><span class="line"> * [</span><br><span class="line"> * dom,</span><br><span class="line"> * &#123;</span><br><span class="line"> * type: if/show,</span><br><span class="line"> * prop: data</span><br><span class="line"> * &#125;</span><br><span class="line"> * ]</span><br><span class="line"> * ]</span><br><span class="line"> * </span><br><span class="line"> * eventPool:</span><br><span class="line"> * [</span><br><span class="line"> * [</span><br><span class="line"> * dom,</span><br><span class="line"> * handler</span><br><span class="line"> * ]</span><br><span class="line"> * ]</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p>绑定事件处理函数，用户触发事件处理函数，data数据更新，数据劫持触发setter，进行update页面更新</p></li></ol><h3 id="函数划分"><a class="markdownIt-Anchor" href="#函数划分"></a> 函数划分</h3><ol><li>initData 数据响应式<ul><li>vm实例：用来获取data</li><li>showPool：setter时触发，在showPool中找到对应dom</li></ul></li><li>initPool v-if、v-show、event放进对应的pool<ul><li>template 抽象语法树（ast树）分析模板</li><li>methods 找到事件处理函数</li><li>showPool</li><li>eventPool</li></ul></li><li>bindEvent 事件绑定<ul><li>vm实例：需要把方法放到实例vm中</li><li>eventPool：遍历eventPool挂载方法到实例上</li></ul></li><li>render 页面渲染<ul><li>vm实例：查找模板绑定的属性、找到根容器el将模板append进去</li><li>showPool：遍历pool根据绑定的属性值true、false初始化页面显示状态</li><li>container：append进根容器的dom</li></ul></li><li>update 页面更新<ul><li>vm实例：获取属性值</li><li>key：setter值的变化</li><li>showPool：找到对应的key的DOM更新</li></ul></li></ol><p><a href="https://imgse.com/i/ppzEFBt"><img src="https://s1.ax1x.com/2023/04/14/ppzEFBt.png" alt="ppzEFBt.png" /></a></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;../modules/Vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">isShowImg1</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">isShowImg2</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">beforeCreate () &#123;&#125;,</span><br><span class="line">created () &#123;&#125;,</span><br><span class="line">beforeMount () &#123;&#125;,</span><br><span class="line">mounted () &#123;&#125;,</span><br><span class="line"><span class="attr">template</span>: <span class="string">``</span>,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">showImg1 () &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isShowImg1</span> = !<span class="variable language_">this</span>.<span class="property">isShowImg1</span>;</span><br><span class="line">&#125;,</span><br><span class="line">showImg2 () &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isShowImg2</span> = !<span class="variable language_">this</span>.<span class="property">isShowImg2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Vue</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> recycles = &#123;</span><br><span class="line"><span class="attr">beforeCreate</span>: options.<span class="property">beforeCreate</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line"><span class="attr">created</span>: options.<span class="property">created</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line"><span class="attr">beforeMount</span>: options.<span class="property">beforeMount</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line"><span class="attr">mounted</span>: options.<span class="property">mounted</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">beforeCreate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取el挂载到实例上 </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="title function_">data</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 数据劫持 更新视图</span></span><br><span class="line"><span class="comment"> * 2. 有一个容器showPool，装一个DOM对应一个数据信息（type: if/show），还有就是给DOM绑定prop，也就是data里的数据。（vue是进行分析字符串） </span></span><br><span class="line"><span class="comment"> * 3. 有一个容器eventPool，一个DOM对应一个handler事件处理函数</span></span><br><span class="line"><span class="comment"> * showPool:</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * dom,</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> * type: if/show,</span></span><br><span class="line"><span class="comment"> * prop: data</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * eventPool:</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * dom,</span></span><br><span class="line"><span class="comment"> * handler</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_init</span>(<span class="variable language_">this</span>, options.<span class="property">template</span>, options.<span class="property">methods</span>, recycles);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">vm, template, methods, recycles</span>) &#123;</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">created</span>(); <span class="comment">// 实例以及创建完</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 不可以用文档碎片，因为他不可以调用innerHTML</span></span><br><span class="line">container.<span class="property">innerHTML</span> = template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showPool = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">var</span> eventPool = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">initData</span>(vm, showPool);</span><br><span class="line"><span class="title function_">initPool</span>(container, methods, showPool, eventPool);</span><br><span class="line"><span class="title function_">bindEvent</span>(vm, eventPool);</span><br><span class="line"><span class="title function_">render</span>(vm, showPool, container, recycles);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span> (vm, showPool) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line"><span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> _data[key];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line"><span class="comment">// this.isShowImg = true;</span></span><br><span class="line">_data[key] = newValue;</span><br><span class="line"><span class="title function_">update</span>(vm, key, showPool);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initPool</span> (container, methods, showPool, eventPool) &#123;</span><br><span class="line"><span class="keyword">var</span> _allNodes = container.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> dom = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _allNodes.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">dom = _allNodes[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vIfData = dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-if&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> vShowData = dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-show&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> vEvent = dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;@click&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vIfData) &#123;</span><br><span class="line">showPool.<span class="title function_">set</span>(</span><br><span class="line">dom,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;if&#x27;</span>,</span><br><span class="line"><span class="attr">prop</span>: vIfData</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;v-if&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (vShowData) &#123;</span><br><span class="line">showPool.<span class="title function_">set</span>(</span><br><span class="line">dom,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;show&#x27;</span>,</span><br><span class="line"><span class="attr">prop</span>: vShowData</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;v-show&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vEvent) &#123;</span><br><span class="line">eventPool.<span class="title function_">set</span>(</span><br><span class="line">dom,</span><br><span class="line">methods[vEvent]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;@click&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span> (vm, eventPool) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [ dom, handler ] <span class="keyword">of</span> eventPool) &#123;</span><br><span class="line">vm[handler.<span class="property">name</span>] = handler; <span class="comment">// 实例直接可以访问方法</span></span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, vm[handler.<span class="property">name</span>].<span class="title function_">bind</span>(vm), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (vm, showPool, container, recycles) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"><span class="keyword">var</span> _el = vm.<span class="property">$el</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [ dom, info ] <span class="keyword">of</span> showPool) &#123;</span><br><span class="line">swith (info.<span class="property">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;if&quot;</span>:</span><br><span class="line">info.<span class="property">comment</span> = <span class="variable language_">document</span>.<span class="title function_">createComment</span>([<span class="string">&#x27;v-if&#x27;</span>]);</span><br><span class="line">!_data[info.<span class="property">prop</span>] &amp;&amp; dom.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(info.<span class="property">comment</span>, dom);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">!_data[info.<span class="property">prop</span>] &amp;&amp; (dom.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">beforeMount</span>(); <span class="comment">// 挂载之前</span></span><br><span class="line"></span><br><span class="line">_el.<span class="title function_">appendChild</span>(container);</span><br><span class="line"></span><br><span class="line">recycles.<span class="title function_">mounted</span>(); <span class="comment">// 挂载成功后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是在initData里的set做的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span> (vm, key, showPool) &#123;</span><br><span class="line"><span class="keyword">var</span> _data = vm.<span class="property">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [ dom, info ] <span class="keyword">of</span> showPool) &#123;</span><br><span class="line"><span class="keyword">if</span> (info.<span class="property">prop</span> === key) &#123;</span><br><span class="line">swith (info.<span class="property">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;if&quot;</span>:</span><br><span class="line">!_data[key] ? dom.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(info.<span class="property">comment</span>, dom)</span><br><span class="line">: info.<span class="property">comment</span>.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(dom, info.<span class="property">comment</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">!_data[key] ? (dom.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">: (dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;style&#x27;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Vue</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写new、instanceof</title>
      <link href="/posts/4bf872c5/index.html"/>
      <url>/posts/4bf872c5/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="重写new"><a class="markdownIt-Anchor" href="#重写new"></a> 重写new</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 实例化构造函数</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. this -&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">    2. this.a this.b</span></span><br><span class="line"><span class="comment">    3. &#123; a: a, b: b, __proto__: C.prototype&#123; constructor: C &#125; &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">// 3. 接收构造函数中的返回值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="title function_">myNew</span>(<span class="title class_">Test</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 返回arguments里的第一个参数 并且从arguments中删除第一个参数</span></span><br><span class="line"><span class="keyword">var</span> constructor = [].<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="keyword">var</span> _this = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">_this.<span class="property">__proto__</span> = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="keyword">var</span> res = constructor.<span class="title function_">apply</span>(_this, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">typeOf</span>(res) === <span class="string">&#x27;object&#x27;</span> ? res : _this;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写instanceof"><a class="markdownIt-Anchor" href="#重写instanceof"></a> 重写instanceof</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前提</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line">arr.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line">arr.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instanceOf</span>(<span class="params">target, type</span>) &#123;</span><br><span class="line">type = type.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">target = target.<span class="property">__proto__</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(target === <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(target === type) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target = target.<span class="property">__proto__</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写call、apply、bind</title>
      <link href="/posts/f5c15572/index.html"/>
      <url>/posts/f5c15572/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="重写call"><a class="markdownIt-Anchor" href="#重写call"></a> 重写call</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line"><span class="comment">// 1. ctx上下文必须是一个对象 否则没有意义</span></span><br><span class="line">ctx = ctx ? <span class="title class_">Object</span>(ctx) : <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将this指向改为ctx上下文 谁调用指向谁</span></span><br><span class="line"><span class="comment">// originFn跟test都指向了同一个内存地址</span></span><br><span class="line">ctx.<span class="property">originFn</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> args = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 拿到test的第二个参数以后的所有参数 作为test的实参</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i ++) &#123;</span><br><span class="line"><span class="comment">// 4. 利用ctx.originFn的执行（并且把获取到的实参放入），将this改变</span></span><br><span class="line"><span class="comment">// 将实参以字符串形式存起来，以便于函数的执行</span></span><br><span class="line">args.<span class="title function_">push</span>(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>); <span class="comment">// args: [&#x27;arguments[1]&#x27;, &#x27;arguments[2]&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 执行字符串函数（字符串跟数组拼接，数组会自动toString为字符串）</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;ctx.originFn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="comment">// 6. 将ctx上下文中的临时变量删除</span></span><br><span class="line"><span class="keyword">delete</span> ctx.<span class="property">originFn</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">myCall</span>(&#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="重写apply"><a class="markdownIt-Anchor" href="#重写apply"></a> 重写apply</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">ctx, args</span>) &#123;</span><br><span class="line">ctx = ctx ? <span class="title class_">Object</span>(ctx) : <span class="variable language_">window</span>;</span><br><span class="line">ctx.<span class="property">originFn</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果第二个参数为原始值会抛出异常</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">typeof</span>(args) !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="title function_">typeof</span>(args) !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;CreateListFromArrayLike called on non-object&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果第二个参数没有传或者不是数组，那么就直接执行</span></span><br><span class="line"><span class="keyword">if</span>(!args || <span class="title function_">typeOf</span>(args) !== <span class="string">&#x27;array&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ctx.<span class="title function_">originFn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将第二个参数平铺到originFn中利用eval执行</span></span><br><span class="line"><span class="keyword">var</span> ret = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.originFn(&#x27;</span>+ args +<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="keyword">delete</span> ctx.<span class="property">originFn</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">typeOf</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(value === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">typeof</span>(value) === <span class="string">&#x27;object&#x27;</span> ? &#123;</span><br><span class="line"><span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;object-number&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;object-string&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;object-boolean&#x27;</span>,</span><br><span class="line">&#125;[(&#123;&#125;).<span class="property">toString</span>.<span class="title function_">call</span>(value)] : <span class="title function_">typeof</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写bind"><a class="markdownIt-Anchor" href="#重写bind"></a> 重写bind</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. test.bind() 相当于 test执行</span></span><br><span class="line"><span class="comment"> * 2. bind的第一个参数是test的this指向</span></span><br><span class="line"><span class="comment"> * 3. bind可以分离test参数 因为bind执行返回一个新的函数 </span></span><br><span class="line"><span class="comment"> * 可以在bind传一部分参数跟在返回的新函数中传另外一部分参数</span></span><br><span class="line"><span class="comment"> * 4. bind跟call参数传递是一样的</span></span><br><span class="line"><span class="comment"> * 5. 实例化返回的函数this指向test构造出来的实例</span></span><br><span class="line"><span class="comment"> * 6. 实例应该继承构造函数的原型属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> originFn = <span class="variable language_">this</span>,</span><br><span class="line">args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>), <span class="comment">// 截取第二个参数以后的参数</span></span><br><span class="line">_tempFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;; <span class="comment">// 临时缓存池</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个新的函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> newArgs = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); <span class="comment">// 保存新函数的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> originFn.<span class="title function_">apply</span>(</span><br><span class="line"><span class="variable language_">this</span> <span class="keyword">instanceof</span> fn ? <span class="variable language_">this</span> : ctx, <span class="comment">// 如果实例化了新函数那么this指向该新实例 否则 指向ctx上下文</span></span><br><span class="line">args.<span class="title function_">concat</span>(newArgs)); <span class="comment">// 拼接两个参数列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将test的prototype交给中介</span></span><br><span class="line">_tempFn.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 将中介的实例化对象交给fn的原型属性</span></span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">_tempFn</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>defineProperty版计算器</title>
      <link href="/posts/ae3d3acf/index.html"/>
      <url>/posts/ae3d3acf/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据劫持版计算器"><a class="markdownIt-Anchor" href="#数据劫持版计算器"></a> 数据劫持版计算器</h2><p><img src="https://www.giaott.com/images/2022/09/20/jVE9t.gif" alt="jVE9t.gif" /></p><h3 id="html结构"><a class="markdownIt-Anchor" href="#html结构"></a> HTML结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;J_calculator&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;f-input&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s-input&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;plus&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;minus&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;mul&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-field</span>=<span class="string">&quot;div&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css样式"><a class="markdownIt-Anchor" href="#css样式"></a> CSS样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line"><span class="title function_">plus</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">minus</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mul</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">div</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Compute</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">doc</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oCal = doc.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;J_calculator&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fInput</span> = oCal.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">sInput</span> = oCal.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">oBtnGroup</span> = oCal.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;btn-group&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">oBtnItems</span> = <span class="variable language_">this</span>.<span class="property">oBtnGroup</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">oResult</span> = oCal.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;result&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 所用到的数据</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">data</span> = <span class="variable language_">this</span>.<span class="title function_">defineData</span>();</span><br><span class="line">   <span class="comment">// 用来标识当前的运算符下标</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">btnIdx</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// console.log(this.data);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineData</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _obj = &#123;&#125;,</span><br><span class="line">fNumber = <span class="number">0</span>,</span><br><span class="line">sNumber = <span class="number">0</span>,</span><br><span class="line">field = <span class="string">&#x27;plus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _self = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(_obj, &#123;</span><br><span class="line"><span class="attr">fNumber</span>: &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;fNumber&quot; is being got.&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> fNumber;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">fNumber = newVal;</span><br><span class="line">_self.<span class="title function_">computeResult</span>(fNumber, sNumber, field);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The value &quot;fNumber&quot; has been changed.[<span class="subst">$&#123;newVal&#125;</span>]`</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">sNumber</span>: &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;sNumber&quot; is being got.&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> sNumber;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">sNumber = newVal;</span><br><span class="line">_self.<span class="title function_">computeResult</span>(fNumber, sNumber, field);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The value &quot;sNumber&quot; has been changed.[<span class="subst">$&#123;newVal&#125;</span>]`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">field</span>: &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;field&quot; is being got.&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> field;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">field = newVal;</span><br><span class="line">_self.<span class="title function_">computeResult</span>(fNumber, sNumber, field);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The value &quot;field&quot; has been changed.[<span class="subst">$&#123;newVal&#125;</span>]`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">computeResult</span>(<span class="params">fNumber, sNumber, field</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">oResult</span>.<span class="property">innerText</span> = <span class="variable language_">this</span>[field](fNumber, sNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">bindEvent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bindEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 事件代理 给button的父级绑定点击事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">oBtnGroup</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onFieldBtnClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 给input绑定事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onNumberInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onNumberInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onFieldBtnClick</span>(<span class="params">ev</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> e = ev || <span class="variable language_">window</span>.<span class="property">event</span>,</span><br><span class="line">tar = e.<span class="property">target</span> || e.<span class="property">srcElement</span>,</span><br><span class="line">tarName = tar.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">tarName === <span class="string">&#x27;button&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">fieldUpdate</span>(tar);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onNumberInput</span>(<span class="params">ev</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> e = ev || <span class="variable language_">window</span>.<span class="property">event</span>,</span><br><span class="line">tar = e.<span class="property">target</span> || e.<span class="property">srcElement</span>,</span><br><span class="line">className = tar.<span class="property">className</span>,</span><br><span class="line">val = <span class="title class_">Number</span>(tar.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>)) || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(className) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;f-input&#x27;</span>:</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">fNumber</span> = val;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s-input&#x27;</span>:</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sNumber</span> = val;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fieldUpdate</span>(<span class="params">tar</span>) &#123;</span><br><span class="line"><span class="comment">// 清空点击之前的btn类名</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">oBtnItems</span>[<span class="variable language_">this</span>.<span class="property">btnIdx</span>].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 改变当前的btn下标 使用indexOf方法判断当前点击的元素tar是否在btn集合中，并返回索引</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">btnIdx</span> = [].<span class="property">indexOf</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">oBtnItems</span>, tar);</span><br><span class="line"><span class="comment">// 给点击的btn增加聚焦类名 </span></span><br><span class="line">tar.<span class="property">className</span> += <span class="string">&#x27; current&#x27;</span>;</span><br><span class="line"><span class="comment">// 设置数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">field</span> = tar.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-field&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Calculator</span>(<span class="variable language_">document</span>).<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Object方法 </tag>
            
            <tag> Object.defineProperty </tag>
            
            <tag> 数据劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写typeof</title>
      <link href="/posts/7b8bf196/index.html"/>
      <url>/posts/7b8bf196/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="typeof方法"><a class="markdownIt-Anchor" href="#typeof方法"></a> typeof方法</h2><ul><li><p>MDN解释：返回一个字符串，表示未经计算的操作数的类型</p></li><li><p>语法：</p><ul><li>typeof operand</li><li>typeof(operand)</li></ul></li><li><p>参数：一个表示对象或原始值的表达式，并将其数据类型返回</p></li><li><p>返回值：返回一个数据类型的字符串</p></li><li><p>typeof有可能返回的值：</p><ol><li>‘string’</li><li>‘function’</li></ol><ul><li>typeof Object</li></ul><ol start="3"><li>‘number’</li><li>‘string’</li><li>‘undefined’</li><li>‘object’</li></ol><ul><li>typeof {}</li><li>typeof []</li><li>typeof null</li><li>typeof new String</li><li>typeof new Boolean</li><li>typeof new Number</li></ul></li></ul><h2 id="重写typeof"><a class="markdownIt-Anchor" href="#重写typeof"></a> 重写typeof</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">typeOf</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(value === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">typeof</span>(value) === <span class="string">&#x27;object&#x27;</span> ? &#123;</span><br><span class="line"><span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;Array&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;o-Number&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;o-String&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;o-Boolean&#x27;</span></span><br><span class="line">  &#125;[(&#123;&#125;).<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value)]</span><br><span class="line">                           : <span class="title function_">typeof</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promisify函数封装</title>
      <link href="/posts/8e06be2b/index.html"/>
      <url>/posts/8e06be2b/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="promisify函数的封装"><a class="markdownIt-Anchor" href="#promisify函数的封装"></a> promisify函数的封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promisify</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>(...args, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在node中已经封装到了util中</p></blockquote><ul><li>使用：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> readFile = <span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">readFile</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">readFile</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><h2 id="promisifyall的封装"><a class="markdownIt-Anchor" href="#promisifyall的封装"></a> promisifyAll的封装</h2><blockquote><p>比如说把node中fs模块下的所有函数都通过promisify化</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promisifyAll</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> [key, fn] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      obj[key + <span class="string">&#x27;Async&#x27;</span>] = <span class="title function_">promisify</span>(fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用该方法</span></span><br><span class="line"><span class="title function_">promisifyAll</span>(fs);</span><br><span class="line">fs.<span class="title function_">readFileAsync</span>(<span class="string">&#x27;./name.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> fs.<span class="title function_">readFileSync</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> fs.<span class="title function_">readFileSync</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组方法（最全）</title>
      <link href="/posts/357dc481/index.html"/>
      <url>/posts/357dc481/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-javascript数组array原型prototype上的方法"><a class="markdownIt-Anchor" href="#一-javascript数组array原型prototype上的方法"></a> 一、Javascript数组Array原型prototype上的方法</h2><h3 id="1-push"><a class="markdownIt-Anchor" href="#1-push"></a> 1、push</h3><ul><li><p>MDN解释：方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度</p></li><li><p>参数：elementN</p></li><li><p>返回值：返回新数组长度</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="2-unshift"><a class="markdownIt-Anchor" href="#2-unshift"></a> 2、unshift</h3><ul><li><p>MDN解释：方法将一个或多个元素添加到数组的开头，并返回该数组的新长度</p></li><li><p>参数：elementN</p></li><li><p>返回值：返回新数组长度</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="3-pop"><a class="markdownIt-Anchor" href="#3-pop"></a> 3、pop</h3><ul><li><p>MDN解释：方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度</p></li><li><p>返回值：返回删除的元素</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="4-join"><a class="markdownIt-Anchor" href="#4-join"></a> 4、join</h3><ul><li><p>作用：将数组或者类数组以给定的分隔符拼接成字符串</p></li><li><p>MDN解释：将数组或者类数组对象的所有元素连接成一个字符串并返回这个字符串，不会改变原数组</p></li><li><p>参数：分隔符，必要的时候可以为字符串</p></li><li><p>返回值：返回分割后的字符，如果目标对象长度为0，则返回空字符串</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="5-reverse"><a class="markdownIt-Anchor" href="#5-reverse"></a> 5、reverse</h3><ul><li><p>作用：反转数组，会改变原数组</p></li><li><p>返回值：返回反转后的数组</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="6-shift"><a class="markdownIt-Anchor" href="#6-shift"></a> 6、shift</h3><ul><li><p>MDN解释：从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度</p></li><li><p>返回值：返回删除的元素</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="7-sort"><a class="markdownIt-Anchor" href="#7-sort"></a> 7、sort</h3><ul><li><p>作用：数组排序，sort方法接收一个可选的比较函数，返回负数、零、正数，用来表示两个元素的比较结果。如果结果为负数，第一个元素在第二个元素前面，如果为零则不变，如果为正数，则第一个元素在第二个元素后面</p></li><li><p>MDN解释：使用原地算法进行排序，并返回排序后的数组，会改变原数组</p></li><li><p>参数：</p><ol><li>compareFunction 可选</li></ol><ul><li>firstEl 第一个用于比较的元素</li><li>secondEl 第二个用于比较的元素</li></ul></li><li><p>返回值：返回排序后的数组</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="8-split-array没有该方法"><a class="markdownIt-Anchor" href="#8-split-array没有该方法"></a> 8、split (Array没有该方法)</h3><ul><li><p>String.prototype.split</p><ul><li><p>作用：将字符串以特定的分隔符分割为数组</p></li><li><p>MDN解释：使用指定的分隔符字符串将一个String对象分割为子字符串数组，以一个指定的分隔符字符串来决定每个拆分的位置</p></li><li><p>参数：</p><ol><li>separator 分隔符</li><li>limit 限定返回的分隔片段数量</li></ol></li><li><p>返回值：返回一个新数组</p></li><li><p>结果：<strong>不会</strong>改变原字符串</p></li></ul></li></ul><h3 id="9-splice"><a class="markdownIt-Anchor" href="#9-splice"></a> 9、splice</h3><ul><li><p>作用：增删改数组</p></li><li><p>MDN解释：通过删除或替换现有元素或者原地新增元素来修改数组，会改变原数组</p></li><li><p>参数：</p><ol><li>startIndex 开始索引</li><li>deleteCount 要删除的个数</li><li>item1，item2… 要增加的元素</li></ol></li><li><p>返回值：以数组的形式返回修改后的内容</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li><li><p>注意：<code>Array.prototype.splice.length = 2</code></p></li></ul><h3 id="10-slice"><a class="markdownIt-Anchor" href="#10-slice"></a> 10、slice</h3><ul><li><p>作用：截取数组某一部分，返回新的数组，不会改变原数组</p></li><li><p>MDN解释：该方法返回一个新的数组对象，该对象是由参数begin（包括）跟end（不包括）构成的数组的浅拷贝，不会改变原数组</p></li><li><p>参数：[begin, end)</p><ol><li>begin 开始索引（包括）</li><li>end 结束索引（不包括）</li></ol></li><li><p>返回值：返回截取的新数组</p></li><li><p>结果：<strong>会</strong>改变原数组</p></li></ul><h3 id="11-fill"><a class="markdownIt-Anchor" href="#11-fill"></a> 11、fill</h3><ul><li><p>作用：填充数组</p></li><li><p>MDN解释：用一个固定值填充数组的开始索引到结束索引的全部元素（不包括结束索引），返回填充后的数组，会改变原数组</p></li><li><p>返回值：返回填充后的数组</p></li><li><p>参数：value, [start, end)</p><ol><li>value 填充值</li><li>start 开始索引</li><li>end 结束索引</li></ol></li></ul><h3 id="12-copywithin"><a class="markdownIt-Anchor" href="#12-copywithin"></a> 12、copyWithin</h3><ul><li><p>作用：拷贝数组start到end的元素到target索引处，不会改变数组长度，会改变原数组</p></li><li><p>MDN解释：浅复制数组的一部分到同一数组中的另一个位置，并返回他，不会改变数组长度</p></li><li><p>返回值：改变后的数组</p></li><li><p>参数：</p><ol><li>target 粘贴到的位置</li><li>start 开始复制的起始索引（包括）</li><li>end 结束复制的索引（不包括）</li></ol></li></ul><h3 id="13-concat"><a class="markdownIt-Anchor" href="#13-concat"></a> 13、concat</h3><ul><li><p>作用：合并多个数组，并返回合并后的数组，不会改变原数组</p></li><li><p>参数：valueN 数组或值</p></li><li><p>返回值：返回新数组</p></li></ul><h3 id="14-tostring"><a class="markdownIt-Anchor" href="#14-tostring"></a> 14、toString</h3><ul><li><p>MDN解释：返回一个字符串，表示指定的数组及其元素，不会改变原数组</p></li><li><p>返回值：返回一个字符串，表示数组所有元素的字符串</p></li></ul><h3 id="15-valueof-继承自object"><a class="markdownIt-Anchor" href="#15-valueof-继承自object"></a> 15、valueOf (继承自Object)</h3><blockquote><p>数组Array上没有valueOf方法，他是继承自Object上的</p></blockquote><ul><li><p>MDN解释：返回指定对象的原始值</p></li><li><p>返回值：返回指定对象的原始值</p></li></ul><h3 id="16-includes"><a class="markdownIt-Anchor" href="#16-includes"></a> 16、includes</h3><ul><li><p>作用：判断一个值是否在给定数组中</p></li><li><p>MDN解释：用来判断一个数组中是否包含指定的值，如果包含则返回true，否则返回false</p></li><li><p>参数：</p><ol><li>valueToFind 要查找的值</li><li>fromIndex 开始查找的索引位置</li></ol></li><li><p>返回值：boolean值</p></li></ul><blockquote><p>从技术上来讲，该方法使用<code>零值相等</code>算法来确定是否找到给定的元素</p></blockquote><h3 id="17-find"><a class="markdownIt-Anchor" href="#17-find"></a> 17、find</h3><ul><li><p>作用：用来查找数组总满足条件的第一个值</p></li><li><p>MDN解释：返回数组中满足提供的测试函数中的第一个元素的值，没有则返回undefined</p></li><li><p>参数：</p><ol><li>callback 在数组每一项上执行的函数</li></ol><ul><li>item</li><li>index</li><li>array</li></ul><ol start="2"><li>thisArg 执行回调时的this指向</li></ol></li><li><p>返回值：返回找到的元素</p></li></ul><h3 id="18-findindex"><a class="markdownIt-Anchor" href="#18-findindex"></a> 18、findIndex</h3><ul><li><p>作用：用来查找数组中满足条件的第一个值的索引</p></li><li><p>MDN解释：返回数组中满足提供的测试函数中的第一个元素的值的索引，没有则返回-1</p></li><li><p>参数：同find方法</p></li><li><p>返回值：满足条件值的索引</p></li></ul><h3 id="19-indexof"><a class="markdownIt-Anchor" href="#19-indexof"></a> 19、indexOf</h3><ul><li><p>作用：找到数组中给定元素的第一个值的索引，没有则返回-1</p></li><li><p>MDN解释：返回在数组中找到一个给定元素的第一个索引，没有则返回-1</p></li><li><p>参数：</p><ol><li>searchElement 要查找的值</li><li>fromIndex 开始查找的索引位置</li></ol></li><li><p>返回值：首个被找到的元素的索引</p></li></ul><h3 id="20-lastindexof"><a class="markdownIt-Anchor" href="#20-lastindexof"></a> 20、lastIndexOf</h3><ul><li><p>作用：找到数组中给定元素的最后一个值的索引，没有则返回-1</p></li><li><p>MDN解释：返回在数组中找到一个给定元素的最后一个索引，没有则返回-1</p></li><li><p>参数：</p><ol><li>searchElement 要查找的值</li><li>fromIndex 开始查找的索引位置，从该位置逆向查找</li></ol></li><li><p>返回值：最后一个被找到的元素的索引</p></li></ul><h3 id="21-foreach"><a class="markdownIt-Anchor" href="#21-foreach"></a> 21、forEach</h3><ul><li><p>MDN解释：让数组中每项元素执行一次给定的回调函数</p></li><li><p>参数：</p><ol><li>callback</li><li>thisArg</li></ol></li><li><p>返回值：undefined，不会改变原数组</p></li></ul><h3 id="22-filter"><a class="markdownIt-Anchor" href="#22-filter"></a> 22、filter</h3><ul><li><p>MDN解释：返回一个新数组，包含所有通过所有给定的测试函数通过的元素</p></li><li><p>参数：</p><ol><li>callback</li></ol><ul><li>element</li><li>index</li><li>array</li></ul><ol start="2"><li>thisArg</li></ol></li><li><p>返回值：返回一个新数组</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="23-map"><a class="markdownIt-Anchor" href="#23-map"></a> 23、map</h3><ul><li><p>MDN解释：返回一个新数组，该数组由原数组中的每一项元素都通过调用给定的函数的返回值组成</p></li><li><p>参数：</p><ol><li>callback</li></ol><ul><li>element</li><li>index</li><li>array</li></ul><ol start="2"><li>thisArg</li></ol></li><li><p>返回值：返回一个新数组</p></li><li><p>结果：<strong>不会</strong>改变原数组</p></li></ul><h3 id="24-reduce"><a class="markdownIt-Anchor" href="#24-reduce"></a> 24、reduce</h3><ul><li><p>MDN解释：对数组中的每个元素按序执行由您给定的reducer函数，每一次运行的reducer都会将先前计算的结果以参数传入，最后将其结果汇总后为单个返回值</p></li><li><p>参数：</p><ol><li>callbackFn</li></ol><ul><li>previousValue 上一个值，如果initialValue没有传递，则为数组索引0 的值，否则为initialValue</li><li>currentValue 当前值，如果initialValue没有传递，则为数组索引1 的值，否则为数组索引0 的值</li><li>currentIndex 当前值的索引，如果initialValue没有传递，则为数组索引1，否则为数组索引0</li><li>array 被遍历的数组</li></ul><ol start="2"><li>initialValue 第一次调用callback时的previousValue的初始值</li></ol></li><li><p>返回值：返回一个值</p></li></ul><h3 id="25-reduceright"><a class="markdownIt-Anchor" href="#25-reduceright"></a> 25、reduceRight</h3><blockquote><p>跟reduce功能一样，不同的是reduceRight从数组的最右边开始累加，一直到最左边</p></blockquote><ul><li><p>MDN解释：该方法接收一个函数作为累加器和数组的每个值（从右到左）将其减少为单个值</p></li><li><p>对数组中的每个元素按倒序的方式执行由您给定的reducer函数，每一次运行的reducer都会将先前计算的结果以参数传入，最后将其结果汇总后为单个返回值</p></li><li><p>参数：</p><ol><li>callbackFn</li></ol><ul><li>previousValue 上一个值</li><li>currentValue 当前值</li><li>currentIndex 当前值的索引</li><li>array 被遍历的数组</li></ul><ol start="2"><li>initialValue 第一次调用callback时的previousValue的初始值</li></ol></li><li><p>返回值：返回一个值</p></li></ul><h3 id="26-every"><a class="markdownIt-Anchor" href="#26-every"></a> 26、every</h3><ul><li><p>MDN解释：该方法测试数组中的每一个元素都通过给定的函数，返回一个boolean值</p></li><li><p>参数：</p><ol><li>callback</li><li>thisArg</li></ol></li><li><p>返回值：boolean值</p></li></ul><blockquote><p>如果用一个空数组测试，则返回true</p></blockquote><h3 id="27-some"><a class="markdownIt-Anchor" href="#27-some"></a> 27、some</h3><ul><li><p>MDN解释：判断数组中至少有一个值通过了给定函数的测试，返回一个boolean值</p></li><li><p>参数：</p><ol><li>callback</li><li>thisArg</li></ol></li><li><p>返回值：boolean值</p></li></ul><blockquote><p>如果用一个空数组测试，则返回false</p></blockquote><h3 id="28-symboliterator"><a class="markdownIt-Anchor" href="#28-symboliterator"></a> 28、<a href="">Symbol.iterator</a></h3><ul><li><p>作用：任何的数组、类数组、Set、Map等数据结构都继承了Symbol.iterator接口，就代表着可以被for of迭代</p></li><li><p>MDN解释：跟Array.prototype.values() 属性的初始值的同一个函数对象</p></li><li><p>返回值：默认情况下与values()方法返回值相同（Array Iterator{}）</p></li></ul><h3 id="29-values"><a class="markdownIt-Anchor" href="#29-values"></a> 29、values</h3><ul><li><p>作用：拿到可迭代对象的每一项的的value</p></li><li><p>MDN解释：返回一个新的Array Iterator对象，该对象包含数组每个索引的值</p></li><li><p>返回值：一个新的Array迭代对象</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr.<span class="title function_">values</span>(); <span class="comment">// Array Iterator&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> letter <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(letter);</span><br><span class="line">&#125;  <span class="comment">//&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="30-keys"><a class="markdownIt-Anchor" href="#30-keys"></a> 30、keys</h3><ul><li><p>作用：拿到可迭代对象的每一项的key</p></li><li><p>MDN解释：返回包含数组中每个索引键的对象</p></li><li><p>返回值：一个新的Array迭代对象</p></li></ul><h3 id="31-entries"><a class="markdownIt-Anchor" href="#31-entries"></a> 31、entries</h3><ul><li><p>作用：拿到可迭代对象的每一项的键值对</p></li><li><p>MDN解释：返回一个新的Array Iterator{}对象，该对象包含数组中每个索引的键值</p></li><li><p>返回值：一个新的Array迭代对象</p><ol><li>该对象下有一个next方法，用来迭代数组中的每一项的键值</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="comment">         __proto__:Array Iterator</span></span><br><span class="line"><span class="comment">         next:ƒ next()</span></span><br><span class="line"><span class="comment">         Symbol(Symbol.toStringTag):&quot;Array Iterator&quot;</span></span><br><span class="line"><span class="comment">         __proto__:Object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.<span class="title function_">entries</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*&#123;value: Array(2), done: false&#125;</span></span><br><span class="line"><span class="comment">          done:false</span></span><br><span class="line"><span class="comment">          value:(2) [0, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">           __proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="32-flat"><a class="markdownIt-Anchor" href="#32-flat"></a> 32、flat</h3><p><a href="https://www.yuque.com/lybinweb/wg2hbh/obwoe4">flat详细笔记地址</a></p><ul><li><p>MDN解释：按照一个可指定的深度递归遍历数组，将所有元素跟遍历到的子元素合并为一个数组返回</p></li><li><p>参数：有一个参数</p><ul><li>depth：降维的层数，默认为1<ul><li>Infinity：数组降多维</li><li>‘1’：字符串1，降维一层</li><li>true：boolean值，降维一层</li></ul></li></ul></li><li><p>返回值：返回一个新数组</p></li></ul><h3 id="33-flatmap"><a class="markdownIt-Anchor" href="#33-flatmap"></a> 33、flatMap</h3><p><a href="https://www.yuque.com/lybinweb/wg2hbh/el4xbk#17f254c9">flatMap详细笔记地址</a></p><ul><li>MDN解释：该方法首先使用映射函数映射每一项数据，然后将其结果压缩为一个新数组</li></ul><blockquote><p>flatMap == flat + map</p></blockquote><ul><li><p>参数：</p><ol><li>callbackFn</li><li>thisArg</li></ol></li><li><p>返回值：一个新数组</p></li></ul><h2 id="二-javascript数组array的构造函数的方法"><a class="markdownIt-Anchor" href="#二-javascript数组array的构造函数的方法"></a> 二、JavaScript数组Array的构造函数的方法</h2><h3 id="34-arrayof"><a class="markdownIt-Anchor" href="#34-arrayof"></a> 34、Array.of</h3><ul><li><p>作用：创建指定元素的数组</p></li><li><p>MDN解释：创建一个<code>可变数量参数</code>的新数组实例，而不考虑参数的数量或类型</p></li><li><p>参数：</p><ol><li>elementN  任意的参数个数</li></ol></li><li><p>返回值：返回新的数组实例</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">7</span>); <span class="comment">// [7]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">7</span>); <span class="comment">// [ , , , , , , ]</span></span><br></pre></td></tr></table></figure><h3 id="35-arrayfrom"><a class="markdownIt-Anchor" href="#35-arrayfrom"></a> 35、Array.from</h3><ul><li><p>作用：将类数组转换为数组</p></li><li><p>MDN解释：对一个类似数组或可迭代对象创建一个新的、浅拷贝的实例</p></li><li><p>参数：</p><ol><li>arrayLike(*必传) 类数组</li><li>mapFn        回调函数</li><li>thisArg      this指向</li></ol></li><li><p>返回值： 一个新的数组实例</p></li><li><p>描述：</p><ol><li>Array.from通过<code>什么对象</code>来创建数组对象:</li></ol><ul><li>类数组对象（拥有一个length属性和若干索引属性的任意对象）</li><li>可迭代对象（Map、Set）</li></ul><ol start="2"><li>他的第二个参数是一个回调函数，让你在最后生成的数组上进行一次类似与map的操作</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = <span class="title class_">Array</span>.<span class="title function_">form</span>(arrLike, <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><h3 id="36-arrayisarray"><a class="markdownIt-Anchor" href="#36-arrayisarray"></a> 36、Array.isArray</h3><ul><li><p>作用：判断一个值是否是数组</p></li><li><p>MDN解释: 用于确定传入的值是否是数组</p></li><li><p>参数：</p><ol><li>obj 需要监测的值</li></ol></li><li><p>返回值：boolean值</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流的实现以及应用</title>
      <link href="/posts/830b4898/index.html"/>
      <url>/posts/830b4898/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-防抖"><a class="markdownIt-Anchor" href="#一-防抖"></a> 一、防抖</h2><h3 id="1-防抖的实现"><a class="markdownIt-Anchor" href="#1-防抖的实现"></a> 1、防抖的实现</h3><ul><li>防抖需要明白的两点：<ol><li>对于在事件被触发n秒后再执行的回调：延迟回调</li><li>如果在这n秒内再触发事件、重新开始计时</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn：目标函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time：延迟时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> triggleNow：初次是否需要触发 </span></span><br><span class="line"><span class="comment"> * * true：首次不进行防抖处理 </span></span><br><span class="line"><span class="comment"> * * false：首次需要防抖处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, time, triggerNow</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> t = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounced = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _self = <span class="variable language_">this</span>,</span><br><span class="line">args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除定时器</span></span><br><span class="line"><span class="keyword">if</span>(t) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次也进行防抖处理</span></span><br><span class="line"><span class="keyword">if</span>(triggerNow) &#123;</span><br><span class="line"><span class="keyword">let</span> exce = !t; <span class="comment">// 第一次不进行防抖处理标识</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在防抖延迟时间time后，将定时器清空，取消防抖</span></span><br><span class="line"><span class="comment">// 在time时间内，会重新计时</span></span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125;, time);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(exce) &#123;</span><br><span class="line"><span class="comment">// 直接执行函数</span></span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123; <span class="comment">// 首次不进行防抖处理</span></span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;, time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制清除防抖函数</span></span><br><span class="line">debounced.<span class="property">remove</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-防抖的应用"><a class="markdownIt-Anchor" href="#2-防抖的应用"></a> 2、防抖的应用</h3><ul><li><p>函数初次执行不需要防抖处理：<code>triggerNow = true</code></p><ol><li>列表的下拉刷新</li><li>ajax的请求</li></ol></li><li><p>函数初次执行需要防抖处理：<code>triggerNow = false</code></p><ol><li>输入框的输入校验</li></ol></li></ul><h2 id="二-节流"><a class="markdownIt-Anchor" href="#二-节流"></a> 二、节流</h2><ul><li>节流需要注意的一点：<ol><li>每隔一段事件执行一次函数</li></ol></li></ul><h3 id="1-节流的实现"><a class="markdownIt-Anchor" href="#1-节流的实现"></a> 1、节流的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn: 要进行节流处理的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay: 延迟的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> t = <span class="literal">null</span>,</span><br><span class="line">begin = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> _self = <span class="variable language_">this</span>,</span><br><span class="line">args = <span class="variable language_">arguments</span>,</span><br><span class="line">cur = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流处理</span></span><br><span class="line"><span class="keyword">if</span>(cur - begin &gt;= delay) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">begin = cur;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_self, args);</span><br><span class="line">&#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-节流的应用"><a class="markdownIt-Anchor" href="#2-节流的应用"></a> 2、节流的应用</h3><ol><li>输入验证</li><li>窗口页面的resize</li><li>列表的下拉刷新</li><li>ajax的请求</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现forEach</title>
      <link href="/posts/718b0317/index.html"/>
      <url>/posts/718b0317/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="foreach会不会改变原数组"><a class="markdownIt-Anchor" href="#foreach会不会改变原数组"></a> forEach会不会改变原数组</h2><h3 id="不改变原数组"><a class="markdownIt-Anchor" href="#不改变原数组"></a> 不改变原数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">item += <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="改变原数组"><a class="markdownIt-Anchor" href="#改变原数组"></a> 改变原数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">arr[index] += <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="重写foreach"><a class="markdownIt-Anchor" href="#重写foreach"></a> 重写forEach</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myForEach</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="variable language_">this</span>,</span><br><span class="line">len = arr.<span class="property">length</span>,</span><br><span class="line">_this = <span class="variable language_">arguments</span>[<span class="number">1</span>] || <span class="variable language_">window</span>; <span class="comment">// forEach的第二个参数this指向问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(_this, [arr[i], i, arr]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5分钟实现深拷贝</title>
      <link href="/posts/ecc4b994/index.html"/>
      <url>/posts/ecc4b994/index.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">Origin, Target</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> tar = <span class="title class_">Target</span> || &#123;&#125;,</span><br><span class="line">toStr = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>,</span><br><span class="line">arrType = <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Origin</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Origin</span>.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证当前项是对象并且不是null，因为null的类型也是objec</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Origin</span>[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="title class_">Origin</span>[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 判断当前项是数组还是对象并且赋值为空数组或空对象</span></span><br><span class="line">tar[key] = toStr.<span class="title function_">call</span>(<span class="title class_">Origin</span>[key]) === arrType ? [] : &#123;&#125;;</span><br><span class="line"><span class="comment">// 递归深拷贝函数</span></span><br><span class="line"><span class="title function_">deepClone</span>(<span class="title class_">Origin</span>[key], tar[key]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前项不是对象而是原始值则直接赋值</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">tar[key] = <span class="title class_">Origin</span>[key];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 重写 </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令</title>
      <link href="/posts/24caea6b/index.html"/>
      <url>/posts/24caea6b/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h2><h2 id="个人基本使用"><a class="markdownIt-Anchor" href="#个人基本使用"></a> 个人基本使用</h2><p>如果更新了 <code>manifest.json</code> 首先清除一下数据</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后去文件中修改，把 <code>manifest.json</code> 多余的 script 标签删除，</p><p>把 <code>fireworks.js</code> 的重复部分删除</p><p>然后再使用</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p>然后以下用法（不过一般使用最后这俩命令即可）</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言:</h2><p>为了方便查阅,这里将常用指令汇总.</p><p>防止请求次数过多插件不再自动获取番剧数据，所以请根据自己的需要在 <code>hexo generate 或 hexo deploy</code> 之前使用<code>hexo bangumi -u</code> 命令更新番剧数据！</p><p>删除数据命令:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo bangumi -d</span><br></pre></td></tr></table></figure><h2 id="简写指令"><a class="markdownIt-Anchor" href="#简写指令"></a> 简写指令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;`       等价于        `hexo new &quot;我的第一篇文章&quot;`  还等价于       `hexo new post &quot;我的第一篇文章&quot;`</span><br><span class="line"> `hexo p` 等价于 `hexo publish`</span><br><span class="line"> `hexo g` 等价于 `hexo generate`</span><br><span class="line"> `hexo s`等价于 `hexo server`</span><br><span class="line"> `hexo d` 等价于 `hexo deploy`</span><br><span class="line"> `hexo deploy -g`  等价于 `hexo deploy --generate`</span><br><span class="line"> `hexo generate -d`等价于`hexo generate --deploy</span><br></pre></td></tr></table></figure><p><strong>注: hexo clean 没有 简写, git --version 没有简写</strong></p><h2 id="指令说明"><a class="markdownIt-Anchor" href="#指令说明"></a> 指令说明:</h2><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。<br /><code>hexo server -s</code> #以静态模式启动<br /><code>hexo server -p 5000</code> #更改访问端口 (默认端口为 4000，'ctrl + c’关闭 server)<br /><code>hexo server -i IP地址</code> #自定义 IP<br /><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹<br /><code>hexo g</code> #生成静态网页 (执行 <code>$ hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将&quot;/blog/source/&quot; <a href="http://xn--ghqq00hg2v.md">下面的.md</a> 后缀的文件编译为.html 后缀的文件,存放在&quot;/blog/public/ &quot; 路径下)<br /><code>hexo d</code> #将本地数据部署到远端服务器(如 github)<br /><code>hexo init 文件夹名称</code> #初始化 XX 文件夹名称<br /><code>npm update hexo -g</code>#升级<br /><code>npm install hexo -g</code>#安装<br /><code>node-v</code> #查看 node.js 版本号<br /><code>npm -v</code> #查看 npm 版本号<br /><code>git --version</code> #查看 git 版本号<br /><code>hexo -v</code> #查看 hexo 版本号</p><p><code>hexo publish [layout]</code> #通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout]</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><p><code>hexo new aaa &quot;bbb&quot;</code> # 新建一篇文章,文章名称和标题分别为 <a href="http://bbb.md">bbb.md</a> 和 bbb. 文章采用 aaa 布局, 此时会在站点根目录下的----&gt;source-----&gt;_post 文件夹下生成 <a href="http://bbb.md">bbb.md</a> 文件, <a href="http://bbb.md">bbb.md</a> 文件的顶部(-----分割线上方区域,也称作 Front matter 区),生成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout : aaa`</span><br><span class="line"> `title:`</span><br><span class="line"> `date:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
